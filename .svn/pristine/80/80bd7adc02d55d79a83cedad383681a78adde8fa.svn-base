import React, { PureComponent, Fragment } from 'react';
import { connect } from 'dva';
import moment from 'moment';
import { Card, Form, Input, Select, Icon, Button, Dropdown, Menu, Modal, Tag, Row,Col, } from 'antd';
import StandardTable from '@/components/StandardTable';
import PageHeaderWrapper from '@/components/PageHeaderWrapper';

import styles from './MemberChannelReport.less';

const FormItem = Form.Item;
const { confirm } = Modal;
const { Option } = Select;

const statusName = (props) => {
  let value = '';
  switch (props) {
    case 1:
      value =<Tag color='red'>未报备</Tag>;
      break;
    case 2:
      value = <Tag color='volcano'>报备中</Tag>;
      break;
    case 3:
      value = <Tag color='#87d068'>报备成功</Tag>
      break;
    case 4:
      value = <Tag color='red'>报备失败</Tag>
      break;
    default:
      value =<Tag color='red'>未报备</Tag>;
  }
  return value
  
}

/**
 * 请求组件 需放在主class 上面
 */
@connect(({ payChannel, loading, }) => ({
  payChannel, loading
}))
@Form.create()
class MemberChannelList extends PureComponent {
  state = {
    selectedRows: [],
    record: {},
    pageSize: 10,
    currentPage: 1,
    a:[]
  };

  /**
   * 初始化数据
   */
  static defaultProps = {
    memberLevel: {
      list: []
    },
  };

  columns = [
    {
      title: '商户名称',
      dataIndex: 'merchName',
      key: 'merchName',
    },
    {
      title: '手机号码',
      dataIndex: 'phone',
      key: 'phone',
    },
    {
      title: '商户编号',
      dataIndex: 'merchNo',
      key: 'merchNo'
    },
    {
      title: '通道名称',
      dataIndex: 'channelName',
      key: 'channelName'
    },  
    {
      title: '费率',
      dataIndex: 'rate',
      key: 'rate',
      render: val => <span >{val}%</span> 
    }, 
    {
      title: '结算手续费',
      dataIndex: 'withdrawFee',
      key: 'withdrawFee'
    }, 
    {
      title: '状态',
      dataIndex: 'examineStatus',
      key: 'examineStatus',
      sorter:true,
      render:(value) => {
        return statusName(value);
     }
    },
    {
      title: '原因',
      dataIndex: 'reason',
      key: 'reason',
    render: val => <a title={val}>{val}</a> 
    },
    {
      title: '审核时间',
      dataIndex: 'createTime',
      key: 'createTime',
      sorter:true,
      render: val => val && <span>{moment(val).format('YYYY-MM-DD HH:mm:ss')}</span>
    },
    
    {
      title: '操作',
      render: (text, record) => (
        <Fragment>
          {record.examineStatus != 3?<a onClick={() => this.handleReport(record)}>报备</a>:'' }
          &nbsp;&nbsp;&nbsp;&nbsp;
        </Fragment>
      ),
    },
  ];



  /**
   * 初始化加载数据
   */
  componentDidMount() {
    const { dispatch } = this.props;
    const { pageSize } = this.state;
    dispatch({
      type: 'payChannel/memberChannelList',
      payload: {
        "pageNo": 1,
        "pageSize": pageSize,
      }
    });
    //获取通道列表
    dispatch({
      type: 'payChannel/fetch',
      payload: {}
    });


  }

   // 查询
   handleSearch = (e) => {
    e.preventDefault();
    const { dispatch, form } = this.props;
    const { pageSize } = this.state;
    form.validateFields((err, fieldsValue) => {
      if (!err) {
        const value = {
          merchName: fieldsValue.merchName,
          phone: fieldsValue.phone,
          merchNo: fieldsValue.merchNo,
          channelName:fieldsValue.channelName,
          examineStatus:fieldsValue.examineStatus
        }
        this.setState({
          currentPage: 1
        });
        dispatch({
          type: 'payChannel/memberChannelList',
          payload: {
            ...value,
            "pageNo": 1,
            "pageSize": pageSize,
          }
        });
      }
    })
  }

  // 重置
  handleFormReset = () => {
    const { form, dispatch } = this.props;
    const { pageSize } = this.state;
    form.resetFields();
    this.setState({
      formValues: {},
      currentPage: 1
    });
    dispatch({
      type: 'payChannel/memberChannelList',
      payload: {
        "pageNo": 1,
        "pageSize": pageSize,
      },
    });
  };

  /**
   * 选择行数据
   */
  handleSelectRows = rows => {
    this.setState({
      selectedRows: rows,
    });
  };

  /**
   * 单个审核 批量审核
   */
  handleMenuClick = (e,type) => {
    const { dispatch } = this.props;
    const { selectedRows } = this.state;
    const params = [];
    const title =  '你确定要通道报备吗?'
    if(type == 1){  //单个批量通道报备
      if(e.length === 0) return;
      e.forEach(item => {
        const data = {
          id: item.id,//通道id
          channelCode:item.channelCode,//通道编码
          memberId:item.memberId,//会员id
        }
        params.push(data)
      })
    }else{  //批量报备操作
      if (selectedRows.length === 0) return;
      selectedRows.forEach(item => {
        const data = {
          id: item.id,//通道id
          channelCode:item.channelCode,//通道编码
          memberId:item.memberId,//会员id
        }
        params.push(data)
      })
    }
    confirm({
      title,
      onOk() {
        dispatch({
          type: 'payChannel/toExamineAuth',
          payload: params,
          callback: () => {
            this.setState({
              selectedRows: [],
            });
          },
        })

      },
      onCancel() { },
    });
  };

  
  handleReport = (value)=>{
    
    this.handleMenuClick([value],1);

  }

   // 分页
   handlePageChange = (pagination,filters, sorter ) => {
    const { dispatch } = this.props;
    const { pageSize, formValues } = this.state;
    this.setState({
      currentPage: pagination.current,
      pageSize:pagination.pageSize
    });
    const value = formValues?formValues:{};
    value.timeOrderBy=sorter.columnKey == 'createTime'?sorter.order=="descend"?'desc':'asc':null,
    value.examineStatusOrderBy=sorter.columnKey == 'examineStatus'?sorter.order=="descend"?'desc':'asc':null,
    dispatch({
      type: 'payChannel/memberChannelList',
      payload: {
        ...value,
        "pageNo": pagination.current,
        "pageSize": pagination.pageSize,
      }
    });
  }


  renderForm = () => {
    const { form,payChannel } = this.props;
    const { getFieldDecorator } = form;
    const payChannelList = payChannel.list;
    return (
      <Form labelCol={{ span: 4, md: 4, lg: 8 }} wrapperCol={{ span: 19, md: 19, lg: 16 }} onSubmit={this.handleSearch}>
        <Row>
          <Col span={24} md={24} lg={8}>
            <FormItem label="商户名称">
              {getFieldDecorator('merchName',
                {
                  rules: []
                }
              )(<Input />)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={8}>
            <FormItem label="手机号">
              {getFieldDecorator('phone',
                {
                  rules: []
                }
              )(<Input />)}
            </FormItem>
          </Col>

          <Col span={24} md={24} lg={8}>
            <FormItem label="商户编号">
              {getFieldDecorator('merchNo',
                {
                  rules: []
                }
              )(<Input />)}
            </FormItem>
          </Col>
{/* 
          <Col span={24} md={24} lg={8}>
            <FormItem label="通道名称">
              {getFieldDecorator('channelName',
                {
                  rules: []
                }
              )(<Input />)}
            </FormItem>
          </Col> */}

          <Col span={24} md={24} lg={8}>
              <FormItem label="通道">
                {getFieldDecorator('channelName',
                  {
                    rules: []
                  }
                )(
                  <Select placeholder="请选择" style={{ width: '100%' }}>
                     <Option value=''>全部</Option>
                      {payChannelList && payChannelList.map(item => {
                  return (
                    <Option value={item.name} key={item.name} >{item.name}</Option>
                  )
                })}
                    
                  </Select>
                )}
              </FormItem>
            </Col>

          <Col span={24} md={24} lg={8}>
              <FormItem label="状态">
                {getFieldDecorator('examineStatus',
                  {
                    rules: []
                  }
                )(
                  <Select placeholder="请选择" style={{ width: '100%' }}>
                     <Option value=''>全部</Option>
                    <Option value='1'>未报备</Option>
                    <Option value='2'>报备中</Option>
                    <Option value='3'>报备成功</Option>
                    <Option value='4'>报备失败</Option>
                    
                  </Select>
                )}
              </FormItem>
            </Col>

          <Col span={24} md={24} lg={8} offset={16}>
            <FormItem className={styles.btnContainer}>
              <Button type="primary" htmlType="submit">
                查询
              </Button>
              <Button style={{ marginLeft: 20 }} onClick={this.handleFormReset}>
                重置
              </Button>
            </FormItem>
          </Col>
        </Row>
      </Form>
    )
  }

  render() {
    const {dispatch,payChannel, } = this.props;
    const { selectedRows, modalVisible, record,currentPage,pageSize } = this.state;
    const memberChannelList = payChannel.memberChannelList.rows;
    const setChannelLoading = payChannel.channelLoading;
    const  total = payChannel.memberChannelList.total;
    const pagination = {
      current: currentPage,
      pageSize,
      total,
      showTotal:()=>"共 " + total + " 条", //显示总条数
      showQuickJumper: true, //显示跳转指定页框
      showSizeChanger:true //显示指定条数
    }
  

    const parentMethods = {
      handleAdd: this.handleAdd,
      handleModalVisible: this.handleModalVisible,
    };


    const menu = (
      <Menu onClick={this.handleMenuClick} selectedKeys={[]}>
        <Menu.Item key="1">批量报备</Menu.Item>
      </Menu>
    );
    return (
      <PageHeaderWrapper title="通道报备">
       
         
        <Card bordered={false}>

        <Row>
        {this.renderForm()}
        </Row>

          <div className={styles.tableList}>
            <div className={styles.tableListOperator}>
              {selectedRows.length > 0 && (
                <span>
                  <Dropdown overlay={menu}>
                    <Button> 更多操作 <Icon type="down" /></Button>
                  </Dropdown>
                </span>
              )}
            </div>
            <StandardTable
              rowKey=''
              selectedRows={selectedRows}
              data={memberChannelList}
              columns={this.columns}
              pagination={pagination}
              onSelectRow={this.handleSelectRows}
              expandedRowRender={this.expandedRowRender}
              onExpandedRowsChange={this.onExpandedRowsChange}
              expandedRowKeys={this.state.a}
              onExpand={this.fetchDetailsList}
              expandRowByClick
              onChange={this.handlePageChange}
              loading={setChannelLoading}
            />
          </div>
        </Card>
      </PageHeaderWrapper>
    );
  }

}

export default MemberChannelList;