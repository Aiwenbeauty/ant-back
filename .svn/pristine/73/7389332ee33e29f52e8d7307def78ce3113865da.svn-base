import React from 'react';
import { connect } from 'dva';
import { Row, Col, Card, Table, Select, DatePicker, Form, Badge, Button, } from 'antd';
// import ExportJsonExcel from 'js-export-excel';
import Yuan from '@/utils/Yuan';
import PageHeaderWrapper from '@/components/PageHeaderWrapper';
import moment from "moment";
import PropTypes from 'prop-types';
import styles from "./Log.less";
import { judgePageAuth } from '@/global.js';

const { Option } = Select;
const { RangePicker } = DatePicker;
const statusMap = ['error', 'warning', 'success', 'processing', 'default', 'success'];
const status = ['提现', '手续费', '交易分润', '充值', '转账', '结算分润'];
const auth = sessionStorage.getItem('auth');
@Form.create()
/* eslint react/no-multi-comp:0 */
//页面权限
@connect(({ outMerchantTrans, loading,menu: { pagePermissions }}) => ({
  outMerchantTrans,
  pagePermissions,
  loading: loading.models.rule,
}))
class CashOutDetails extends React.Component {
  constructor(props) {
    super(props)
    this.state = {
      pageSize: 10,
      currentPage: 1,
      formValues: {}
    }
  }

  componentDidMount() {
    const { dispatch } = this.props;
    const { pageSize } = this.state;
    //页面权限
    dispatch({
      type: 'menu/fetchButton',
    });
    dispatch({
      type: 'outMerchantTrans/fetchCashOutList',
      payload: {
        "pageNo": 1,
        "pageSize": pageSize,
      }
    });
  }


  downloadExcel = () => {
    const { dispatch, form,pagePermissions } = this.props;
    form.validateFields((err, fieldsValue) => {
      const extracStartTime = fieldsValue.createTime ? fieldsValue.createTime[0].format('YYYY-MM-DD 00:00:00') : null;
      const extracEndTime = fieldsValue.createTime ? fieldsValue.createTime[1].format('YYYY-MM-DD 23:59:59') : null;
      const values = {
        extracStartTime,
        extracEndTime,
        tradeType: fieldsValue.tradeType
      }
      dispatch({
        type: 'outMerchantTrans/fetchCashOutList',
        payload: {
          ...values,
        }
      }).then(() => {
        const { outMerchantTrans } = this.props;
        const data = outMerchantTrans.CashOutList ? outMerchantTrans.CashOutList : '';// 表格数据
        const option = {};
        if (data) {
          // const dataTable = auth === "root" || auth === "operate" ? data.map(item => {
          //页面权限
          const dataTable = judgePageAuth("displayCashOutDetails", pagePermissions) ? (data.rows.map(item => {
            return {
              '商户编号': item.merchNo,
              '商户名称': item.name,
              '交易流水号': item.orderNo,
              '金额': item.amount,
              '交易类型': status[item.tradeType - 1],
              '变动后余额': item.afterBalance,
              '时间': moment(item.createTime).format('YYYY-MM-DD HH:mm:ss'),
            }
          })) : (data.rows.map(item => {
            return {
              '交易流水号': item.orderNo,
              '金额': item.amount,
              '交易类型': status[item.tradeType - 1],
              '变动后余额': item.afterBalance,
              '时间': moment(item.createTime).format('YYYY-MM-DD HH:mm:ss'),
            }
          }));
          // const sheetHeader = auth === "root" || auth === "operate" ? ['商户编号', '商户名称', '交易流水号', '金额', '交易类型', '变动后余额', '时间'] : ['交易流水号', '金额', '交易类型', '变动后余额', '时间'];
          //页面权限
          const sheetHeader = judgePageAuth("displayCashOutDetails", pagePermissions) ? (['商户编号', '商户名称', '交易流水号', '金额', '交易类型', '变动后余额', '时间']) : (['交易流水号', '金额', '交易类型', '变动后余额', '时间']);
          option.fileName = moment(Date.now()).format('YYYYMMDDHHmmss')+'收支明细'
          option.datas = [
            {
              sheetData: dataTable,
              sheetName: 'sheet',
              // sheetFilter: ['组织ID', '组织代码', '组织名称'],
              sheetHeader,
            }
          ];
          import('js-export-excel').then((module) => {
            const toExcel = module.default(option)
            toExcel.saveExcel();

          })
        }
      })
    })

    // if (data) {
    //   for (const i in data) {
    //     if (data) {
    //       const obj = {
    //         '组织ID': data[i].id,
    //         '组织代码': data[i].organization_code,
    //         '组织名称': data[i].organization_name,
    //       }
    //       dataTable.push(obj);
    //     }
    //   }
    // }



  }

  // from表单确认事件
  handleSearch = (e) => {
    const { dispatch, form } = this.props;
    const { pageSize } = this.state;

    e.preventDefault();
    form.validateFields((err, fieldsValue) => {
      const extracStartTime = fieldsValue.createTime ? fieldsValue.createTime[0].format('YYYY-MM-DD 00:00:00') : null;
      const extracEndTime = fieldsValue.createTime ? fieldsValue.createTime[1].format('YYYY-MM-DD 23:59:59') : null;
      const values = {
        extracStartTime,
        extracEndTime,
        tradeType: fieldsValue.tradeType
      }
      if (!err) {
        this.setState({
          currentPage: 1,
          formValues: values
        });
        dispatch({
          type: 'outMerchantTrans/fetchCashOutList',
          payload: {
            ...values,
            "pageNo": 1,
            "pageSize": pageSize,
          }
        });
      };

    }
    )
  }

  // 重置
  handleFormReset = () => {
    const { form, dispatch } = this.props;
    const { pageSize } = this.state;
    form.resetFields();
    this.setState({
      currentPage: 1,
      formValues: {}
    });
    dispatch({
      type: 'outMerchantTrans/fetchCashOutList',
      payload: {
        "pageNo": 1,
        "pageSize": pageSize,
      },
    });
  };

  renderForm = () => {
    const { getFieldDecorator } = this.props.form;
    const { pagePermissions } = this.props;
    const FormItem = Form.Item;
    return (
      <Form labelCol={{ span: 4, md: 4, lg: 8 }} wrapperCol={{ span: 19, md: 19, lg: 16 }} onSubmit={this.handleSearch}>
        <Row>
          <Col span={24} md={24} lg={8}>
            <FormItem label="时间">
              {getFieldDecorator('createTime',
                {
                  rules: []
                }
              )(<RangePicker />)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={8}>
            <FormItem label="交易类型">
              {getFieldDecorator('tradeType',
                {
                  rules: [],
                  initialValue: null,
                }
              )(
                <Select>
                  <Option value="">全部</Option>
                  <Option value="1">提现</Option>
                  <Option value="2">手续费</Option>
                  <Option value="3">交易分润</Option>
                  <Option value="4">充值</Option>
                  <Option value="5">转账</Option>
                  <Option value="6">结算分润</Option>
                </Select>
              )}
            </FormItem>
          </Col>
        </Row>
        <Col span={24}>
          <FormItem className={styles.btnContainer}>
            <Button type="primary" htmlType="submit">
              查询
            </Button>
            <Button style={{ marginLeft: 20 }} onClick={this.handleFormReset}>
              重置
            </Button>
            {
              //页面权限
              judgePageAuth("exportCashOutDetails", pagePermissions) && 
              (
                <Button style={{ marginLeft: 20 }} onClick={this.downloadExcel}>导出</Button>
              )

            }
            {/* <Button style={{ marginLeft: 20 }} onClick={this.downloadExcel}>导出</Button> */}
          </FormItem>
        </Col>
      </Form>
    )
  }

  renderCell = (text, width) => (
    <div style={{ width: `${width}`, overflow: "hidden", display: "inline-block", whiteSpace: 'nowrap', textOverflow: "ellipsis" }}>
      {text}
    </div>
  )

  handleModalVisible = (flag, record) => {
    this.setState({
      modalVisible: !!flag,
      currentRecord: record,
    });
  };

  handlePageChange = (pagination, filters, sorter) => {
    const { dispatch } = this.props;
    const { pageSize, formValues } = this.state;
    this.setState({
      currentPage: pagination.current,
      pageSize: pagination.pageSize
    });
    formValues.amountOrderBy = sorter.columnKey == 'amount'?sorter.order=="descend"?"desc":"asc":null,
    formValues.afterBalanceOrderBy = sorter.columnKey == 'afterBalance'?sorter.order=="descend"?"desc":"asc":null,
    formValues.timeOrderBy = sorter.columnKey == 'createTime'?sorter.order=="descend"?"desc":"asc":null,
    formValues.amountOrderBy = sorter.columnKey == 'amount'?sorter.order=="descend"?"desc":"asc":null,
    formValues.afterBalanceOrderBy = sorter.columnKey == 'afterBalance'?sorter.order=="descend"?"desc":"asc":null,
    formValues.timeOrdey = sorter.columnKey == 'createTime'?sorter.order=="descend"?"desc":"asc":null,
    formValues.amountOrderBy = sorter.columnKey == 'amount' ? sorter.order == "descend" ? "desc" : "asc" : null
    formValues.afterBalanceOrderBy = sorter.columnKey == 'afterBalance' ? sorter.order == "descend" ? "desc" : "asc" : null
    formValues.timeOrdey = sorter.columnKey == 'createTime' ? sorter.order == "descend" ? "desc" : "asc" : null
    dispatch({
      type: 'outMerchantTrans/fetchCashOutList',
      payload: {
        ...formValues,
        "pageNo": pagination.current,
        "pageSize": pagination.pageSize,
      }
    });
  }

  render() {
    const { outMerchantTrans,pagePermissions } = this.props;
    const { currentPage, pageSize } = this.state;
    // 权限是root则显示商户编号、商户名称列 
    // const columns = auth === "root" || auth === "operate" ? [
    //页面权限
    const columns = judgePageAuth("displayCashOutDetails", pagePermissions) ? ([
      {
        title: '商户编号',
        dataIndex: 'merchNo',
        key: 'merchNo',
      },
      {
        title: '商户名称',
        dataIndex: 'name',
        key: 'name',
      },
      {
        title: '交易流水号',
        dataIndex: 'orderNo',
        key: 'orderNo',
      },
      {
        title: '金额',
        dataIndex: 'amount',
        key: 'amount',
        sorter: true,
        render(val, record) {
          if (record.direction === 1 || record.direction === '1') {
            return <div style={{ color: "red" }}>+<span style={{ color: "#000" }}>&nbsp;{val}</span></div>
          }
          return <div style={{ color: "green" }}>-<span style={{ color: "#000" }}>&nbsp;{val}</span></div>
        }
      },
      {
        title: '交易类型',
        dataIndex: 'tradeType',
        key: 'tradeType',
        render(val) {
          return <Badge status={statusMap[val - 1]} text={status[val - 1]} />;
        },
      },
      {
        title: '变动后余额',
        dataIndex: 'afterBalance',
        key: 'afterBalance',
        sorter: true,
        render(val) {
          return val;
        },
      },
      {
        title: '时间',
        dataIndex: 'createTime',
        key: 'createTime',
        sorter: true,
        render: val => val && <span>{moment(val).format('YYYY-MM-DD HH:mm:ss')}</span>,
      },

    ]) : ([
        {
          title: '交易流水号',
          dataIndex: 'orderNo',
          key: 'orderNo',
        },
        {
          title: '金额',
          dataIndex: 'amount',
          key: 'amount',
          sorter: true,
          render(val, record) {
            if (record.direction === 1 || record.direction === '1') {
              return <span>+ &nbsp;{val}</span>
            }
            return <span>- &nbsp; {val} </span>
          }
        },
        {
          title: '交易类型',
          dataIndex: 'tradeType',
          key: 'tradeType',
          render(val) {
            return <Badge status={statusMap[val - 1]} text={status[val - 1]} />;
          },
        },
        {
          title: '变动后余额',
          dataIndex: 'afterBalance',
          key: 'afterBalance',
          sorter: true,
        },
        {
          title: '时间',
          dataIndex: 'createTime',
          key: 'createTime',
          sorter: true,
          render: val => val && <span>{moment(val).format('YYYY-MM-DD HH:mm:ss')}</span>,
        },

      ]);

    const { total } = outMerchantTrans.CashOutList;
    const pagination = {
      current: currentPage,
      pageSize,
      total,
      showTotal: () => `共 ${total} 条`, // 显示总条数
      showQuickJumper: true, // 显示跳转指定页框
      showSizeChanger: true // 显示指定条数
    }

    return (
      <PageHeaderWrapper title="收支明细查询">
        <Card>
          <Row>
            {this.renderForm()}
          </Row>

          {/* <Row style={{marginBottom:20}}> 
            <Alert message={`交易汇总：订单金额￥111, 交易手续费￥222, 结算手续费￥3333。`} type="success" showIcon />
          </Row> */}

          <Row>
            <Table
              dataSource={outMerchantTrans.CashOutList.rows}
              rowKey="id"
              rowClassName="textCenter"
              columns={columns}
              pagination={pagination}
              loading={outMerchantTrans.loading}
              bordered={false}
              scroll={{ x: 'max-content' }}
              onChange={this.handlePageChange}
            />
          </Row>
        </Card>
      </PageHeaderWrapper>
    )
  }
}
CashOutDetails.propTypes = {
  outMerchantTrans: PropTypes.object
};

CashOutDetails.defaultProps = {
  outMerchantTrans: {
    list: {
      rows: [],
      totalPage: 5
    }
  }
};
export default CashOutDetails;