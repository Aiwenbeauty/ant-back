import React, { PureComponent, Fragment } from 'react';
import { connect } from 'dva';
import moment from 'moment';
import { Card, Form, Input, Button, Modal,Row,Col,DatePicker,Table,Alert } from 'antd';
import PageHeaderWrapper from '@/components/PageHeaderWrapper';
// import ExportJsonExcel from 'js-export-excel';

import styles from './IncomeList.less';
import { judgePageAuth } from '@/global.js';

const { RangePicker } = DatePicker;




/**
 * 请求组件 需放在主class 上面
 */
//页面权限
@connect(({ incomeList,menu: { pagePermissions } }) => ({
  incomeList,
  pagePermissions
}))
@Form.create()
class IncomeList extends PureComponent {
  state = {
    modalVisible: false,
    pageSize: 10,
    currentPage: 1,
    formValues: {}
  };

  /**
   * 初始化数据
   */
  static defaultProps = {
    incomeList: {
      list: []
    },
  };


   /**
   * 初始化加载数据
   */
  componentDidMount() {
    const { dispatch } = this.props;
    const { pageSize } = this.state;
    //页面权限
    dispatch({
      type: 'menu/fetchButton',
    });
    dispatch({
      type: 'incomeList/fetch',
    payload: {
        "pageNo": 1,
        "pageSize": pageSize,
      }
    });

     // 收益汇总
     dispatch({
      type: 'incomeList/incomeSummary',
      payload: {}
    });
  }
  

  renderForm = () => {
    const { getFieldDecorator } = this.props.form;
    const { pagePermissions } = this.props;
    const FormItem = Form.Item;
    return (
      <Form labelCol={{ span: 4, md: 4, lg: 8 }} wrapperCol={{ span: 19, md: 19, lg: 16 }} onSubmit={this.handleSearch}>
        <Row>
          <Col span={24} md={24} lg={8}>
            <FormItem label="交易编号">
              {getFieldDecorator('tradeNo',
                {
                  rules: []
                }
              )(<Input />)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={8}>
            <FormItem label="商户名称">
              {getFieldDecorator('memberName',
                {
                  rules: []
                }
              )(<Input />)}
            </FormItem>
          </Col>

          <Col span={24} md={24} lg={8}>
            <FormItem label="商户手机号">
              {getFieldDecorator('memberMobile',
                {
                  rules: []
                }
              )(<Input />)}
            </FormItem>
          </Col>

          <Col span={24} md={24} lg={8}>
            <FormItem label="创建时间">
              {getFieldDecorator('time',
                {
                  rules: []
                }
              )(<RangePicker />)}
            </FormItem>
          </Col>

          <Col span={24} md={24} lg={8} offset={16}>
            <FormItem className={styles.btnContainer}>
              <Button type="primary" htmlType="submit">
                查询
              </Button>
              <Button style={{ marginLeft: 20 }} onClick={this.handleFormReset}>
                重置
              </Button>
              {
                //页面权限
               judgePageAuth("detailIncomeList", pagePermissions) && 
               (
                <Button style={{ marginLeft: 20 }} onClick={this.exportIncomeList}>导出</Button>
               )
              }
              {/* <Button style={{ marginLeft: 20 }} onClick={this.exportIncomeList}>导出</Button> */}
            </FormItem>
          </Col>
        </Row>
      </Form>
    )
  }

   // 查询
   handleSearch = (e) => {
    const { dispatch, form } = this.props;
    const { pageSize } = this.state;
    e.preventDefault();
    form.validateFields((err, fieldsValue) => {
      if (!err) {
        const value = {
          tradeNo: fieldsValue.tradeNo,
          memberName: fieldsValue.memberName,
          memberMobile:fieldsValue.memberMobile,
          createTimeStart: fieldsValue.time != null ? fieldsValue.time[0].format('YYYY-MM-DD 00:00:00') : null,
          createTimeEnd: fieldsValue.time != null ? fieldsValue.time[1].format('YYYY-MM-DD 23:59:59') : null,
        }
        this.setState({
          currentPage: 1,
          formValues: value
        });
        dispatch({
          type: 'incomeList/fetch',
          payload: {
            ...value,
            "pageNo": 1,
            "pageSize": pageSize,
          }
        });
        // 收益汇总
        dispatch({
          type: 'incomeList/incomeSummary',
          payload: {
            ...value,
          }
        });
      }
    })
  }

    // 重置
    handleFormReset = () => {
      const { form, dispatch } = this.props;
      const { pageSize } = this.state;
      form.resetFields();
      this.setState({
        formValues: {},
        currentPage: 1
      });
      dispatch({
        type: 'incomeList/fetch',
        payload: {
          "pageNo": 1,
          "pageSize": pageSize,
        },
      });
    };
 

   // 详情页面
   detailsModalVisible = (flag, record) => {
    const { dispatch } = this.props;

    this.setState({
      updateModalVisible: !!flag,
      updateFormValues: record || {},
    });
    if (flag) {
      dispatch({
        type: 'incomeList/incomeDetails',
        payload: {
          "tradeNo": record.tradeNo,
        },
      });

    }

  };

  // 分页
  handlePageChange = (pagination, filters, sorter) => {
    const { dispatch } = this.props;
    const { pageSize, formValues } = this.state;
    this.setState({
      currentPage: pagination.current,
      pageSize:pagination.pageSize
    });
    formValues.amountOrderBy = sorter.columnKey == 'orderAmount'?sorter.order=="descend"?"desc":"asc":null,
    formValues.totalProfitOrderBy = sorter.columnKey == 'totalProfit'?sorter.order=="descend"?"desc":"asc":null,
    formValues.timeOrderBy = sorter.columnKey == 'createTime'?sorter.order=="descend"?"desc":"asc":null,
    dispatch({
      type: 'incomeList/fetch',
      payload: {
        ...formValues,
        "pageNo": pagination.current,
        "pageSize": pagination.pageSize,
      }
    });
  }

  
  // 导出收益列表
  exportIncomeList = (e) =>{
    const { dispatch, form } = this.props;
    form.validateFields((err, fieldsValue) => {
      if (!err) {
        const value = {
          tradeNo: fieldsValue.tradeNo,
          memberName: fieldsValue.memberName,
          memberMobile:fieldsValue.memberMobile,
          createTimeStart: fieldsValue.time != null ? fieldsValue.time[0].format('YYYY-MM-DD 00:00:00') : null,
          createTimeEnd: fieldsValue.time != null ? fieldsValue.time[1].format('YYYY-MM-DD 23:59:59') : null,
        }
  
        dispatch({
          type: 'incomeList/fetch',
          payload: {
            ...value,
          }
        }).then(() => {
          const { incomeList } = this.props;
          const option = {};
          const data =  incomeList.list.rows
          if(data){
            const dataTable = data.map(item => {
            return {
              '交易编号': item.tradeNo,
              '商户手机号': item.memberMobile,
              '商户名称': item.memberName,
              '订单交易金额': item.orderAmount == null ? "0":item.orderAmount,
              '收益': item.totalProfit==null ? "0":item.totalProfit,
              '创建时间': item.createTime == null? "" : moment(item.createTime).format('YYYY-MM-DD HH:mm:ss'),
             
            }
        });
        option.fileName = moment(Date.now()).format('YYYYMMDDHHmmss')+'收益查询';
        const sheetHeader = ['交易编号', '商户手机号', '商户名称', '订单交易金额', '收益',
        '创建时间']
          option.datas = [
            {
              sheetData: dataTable,
              sheetName: 'sheet',
              // sheetFilter: ['组织ID', '组织代码', '组织名称'],
              sheetHeader,
            }
          ];
          import('js-export-excel').then((module) => {
            const toExcel = module.default(option)
            // const toExcel = ExportJsonExcel(option);
            toExcel.saveExcel();

          })
          }
        });
      
      }
    })
  };

  render() {
    const { incomeList,pagePermissions } = this.props;
    const tradeIncomeList = incomeList.list.rows;
    const incomeDetailsList = incomeList.details.rows;
    
    const {updateModalVisible,updateFormValues,currentPage,pageSize} = this.state;
    

    const columns = [
      {
        title: '交易编号',
        dataIndex: 'tradeNo',
        key: 'tradeNo',
      },
      {
        title: '商户手机号',
        dataIndex: 'memberMobile',
        key: 'memberMobile',
      },
      {
        title: '商户名称',
        dataIndex: 'memberName',
        key: 'memberName',
      },
      {
        title: '订单交易金额',
        dataIndex: 'orderAmount',
        key: 'orderAmount',
        sorter:true,
      },
      {
        title: '收益',
        dataIndex: 'totalProfit',
        key: 'totalProfit',
        sorter:true,
      },
     
      {
        title: '创建时间',
        dataIndex: 'createTime',
        key: 'createTime',
        sorter:true,
        render: val => val && <span>{moment(val).format('YYYY-MM-DD HH:mm:ss')}</span>
      },  
      {
        title: '操作',
        render: (text, record) => (
          <Fragment>
            {
                //页面权限
               judgePageAuth("detailIncomeList", pagePermissions) && 
               (
                <a onClick={() => this.detailsModalVisible(true, record)}>查看详情</a>
               )
            }
            {/* <a onClick={() => this.detailsModalVisible(true, record)}>查看详情</a>&nbsp;&nbsp;&nbsp;&nbsp; */}
          </Fragment>
        ),
      },
    ];

    
   

    const { total } = incomeList.list;
    const pagination = {
      current: currentPage,
      pageSize,
      total,
      showTotal:()=>"共 " + total + " 条", //显示总条数
      showQuickJumper: true, //显示跳转指定页框
      showSizeChanger:true //显示指定条数
    }

    const updateMethods = {
      detailsModalVisible: this.detailsModalVisible,
      details: this.details,
    };
  
    return (
      <PageHeaderWrapper title="收益列表">
        <Card bordered={false}>
          <Row>
            {this.renderForm()}
          </Row>

          <Row style={{marginBottom:20}}> 
            <Alert message={`交易汇总：交易订单金额￥${incomeList.summary.orderAmount}, 收益￥${incomeList.summary.totalProfit},收益笔数 ${total} `} type="success" showIcon />
          </Row>

          <Row>
            <Table
              dataSource={tradeIncomeList}
              rowKey="id"
              rowClassName="textCenter"
              columns={columns}
              pagination={pagination}
              loading={incomeList.loading}
              bordered={false}
              style={{ overflowX: "scroll" }}
              onChange={this.handlePageChange}
            />
          </Row>
        </Card>
        <DetailsForm
          {...updateMethods}
          updateModalVisible={updateModalVisible}
          incomeDetails={incomeDetailsList}
          incomeList={incomeList}
          values={updateFormValues}
        />
      </PageHeaderWrapper>
    );
  }

}


/**
 * 收益详情
 */
@connect(({ incomeList }) => ({
  incomeList
}))
@Form.create()
class DetailsForm extends PureComponent {
  static defaultProps = {
    details: () => { },
    detailsModalVisible: () => { },
    values: {},
  };
  state = {
    pageSize: 10,
    currentPage: 1,
    formValues: {}
  };


  // 分页
  handlePageChange = (pagination, filters, sorter) => {
    const { dispatch,values } = this.props;
    const { pageSize, formValues } = this.state;
    this.setState({
      currentPage: pagination.current,
      pageSize:pagination.pageSize
    });
    formValues.amountOrderBy = sorter.columnKey == 'orderAmount'?sorter.order=="descend"?"desc":"asc":null,
    formValues.totalProfitOrderBy = sorter.columnKey == 'totalProfit'?sorter.order=="descend"?"desc":"asc":null,
    formValues.timeOrderBy = sorter.columnKey == 'createTime'?sorter.order=="descend"?"desc":"asc":null,
    formValues.tradeNo = values.tradeNo ?values.tradeNo:null;
    dispatch({
      type: 'incomeList/incomeDetails',
      payload:{
        ...formValues,
        "pageNo": pagination.current,
        "pageSize": pagination.pageSize,
      }
    });
  }

  

  render() {
    const { updateModalVisible, detailsModalVisible, incomeList,values, incomeDetails } = this.props;
    const {currentPage,pageSize} = this.state;
    const  total  = incomeList.details.total;
    const pagination = {
      current: currentPage,
      pageSize,
      total,
      showTotal:()=>"共 " + total + " 条", //显示总条数
      showQuickJumper: true, //显示跳转指定页框
      showSizeChanger:true //显示指定条数
    }
    const detailsColumns = [
      {
        title: '交易编号',
        dataIndex: 'tradeNo',
        key: 'tradeNo',
      },
      {
        title: '商户手机号',
        dataIndex: 'memberMobile',
        key: 'memberMobile',
      },
      {
        title: '商户名称',
        dataIndex: 'memberName',
        key: 'memberName',
      },
      {
        title: '分润商户',
        dataIndex: 'upperName',
        key: 'upperName',
      },
      {
        title: '分润等级',
        dataIndex: 'upperLevel',
        key: 'upperLevel',
      },
      {
        title: '订单交易金额',
        dataIndex: 'orderAmount',
        key: 'orderAmount',
        sorter:true,
      },
      {
        title: '收益',
        dataIndex: 'totalProfit',
        key: 'totalProfit',
        sorter:true,
      },
     
      {
        title: '创建时间',
        dataIndex: 'createTime',
        key: 'createTime',
        sorter:true,
        render: val => val && <span>{moment(val).format('YYYY-MM-DD HH:mm:ss')}</span>
      },  
    ];

    return (
      <Modal
        maskClosable={false}
        width={1000}
        bodyStyle={{ padding: '32px 40px 48px' }}
        destroyOnClose
        title="收益详细信息"
        visible={updateModalVisible}
        footer={null}
        onCancel={() => detailsModalVisible(false, values)}
      >

        <Table
          dataSource={incomeDetails}
          rowKey="id"
          size="small"
          columns={detailsColumns}
          pagination={pagination}
          loading={incomeList.loading}
          bordered={false}
          style={{ overflowX: "scroll" }}
          onChange={this.handlePageChange}
        />
      </Modal>

    );
  }
}

export default IncomeList;