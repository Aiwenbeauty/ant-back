import React from 'react';
import { Row, notification, Tooltip, Icon, Card, Alert, Divider, Form, Input, Button, message, Modal, InputNumber } from 'antd';
import DescriptionList from '@/components/DescriptionList';
import PageHeaderWrapper from '@/components/PageHeaderWrapper';
import { connect } from 'dva';
import router from 'umi/router';

const { confirm } = Modal;
const { Description } = DescriptionList;
const FormItem = Form.Item;
@Form.create()
@connect(({ cash,financial,systemSetting }) => ({
  cash,
  financial,
  systemSetting
}))
class  AgentCashOut extends React.PureComponent {
  constructor(props) {
    super(props)
    this.state = {
      visible:false,
      captcha:'',
      money:0
    };
    this.showConfirm = this.showConfirm.bind(this);
  }


  componentDidMount() {
    const { dispatch } = this.props;

    // dispatch({
    //   type: 'cash/fetch',
    // });
    dispatch({
      type: 'cash/query',
    });
    dispatch({
      type: 'systemSetting/fetch',
    });
  }

  componentDidUpdate(_,prevState){
    const { visible } = this.state;
    // 当模态框打开时请求验证码
    if(!prevState.visible && visible){
      this.getCaptcha();
    }
  }

  // handleEncrypt = beforePwd => {
  //   const secretKey = 'com.vcpay.foo.key';
  //   const afterEncrypt = CryptoJS.DES.encrypt(beforePwd, CryptoJS.enc.Utf8.parse(secretKey), {
  //     mode: CryptoJS.mode.ECB,
  //     padding: CryptoJS.pad.Pkcs7
  //   }).toString()
  //   return afterEncrypt;
  // }

  // showConfirm(){
    
  // }
  showCaptchaModal = (flag)=>{
    this.setState({
      visible:!!flag
    });
    // dispatch({
    //   type: 'outMerchantTrans/getMoney',
    //   payload: {
    //     mainCustomerNo: agentCashInfo.merchNo,
    //     receiveCardNo:agentCashInfo.bankCard,
    //     receiveName:agentCashInfo.openAccountName,
    //     ...fieldsValue
    //   }
    // })
  }

  showConfirm = (e)=> {
    const { cash,form,systemSetting } = this.props;
    const agentCashInfo = cash.distributionExtractInfo;
    e.preventDefault();
    const that = this;
    form.validateFields((err, fieldsValue) => {
      const calcMoney = fieldsValue.amount - (fieldsValue.amount * agentCashInfo.processFee + agentCashInfo.withdrawFee);
      this.setState({
        money:fieldsValue.amount,
      });
      const content = 
        <section>
          <p>提现金额：￥{fieldsValue.amount}</p>
          <p>银行卡号：{agentCashInfo.bankCard}</p>
          <p>实际到账金额：<span>￥{calcMoney.toFixed(2)}</span><Tooltip title="实际到账金额 = 提现金额 - ( 提现金额 × 税率 + 提现手续费 )"><Icon type="question-circle" theme="twoTone" twoToneColor="#52c41a" style={{marginLeft:20}} /></Tooltip></p>
        </section> 
        // 系统提现开关关闭
        if(systemSetting.list.agentWithdrawSwitch === 0){
          notification.error({
            message: '系统维护中',
          });
          return;
        }
        // 提现金额大于可用余额
        if(fieldsValue.amount > agentCashInfo.enableBalance){
          notification.error({
            message: '可用余额不足!',
          });
          return;
        }
        // 提现金额大于系统限额或小于系统限额  
        if(fieldsValue.amount < systemSetting.list.agentMinAmount){
          notification.error({
            message: `提现金额不能低于${systemSetting.list.agentMinAmount}`,
          });
          return;
        }
        // 提现金额大于系统限额或小于系统限额  
        if(fieldsValue.amount > systemSetting.list.agentMaxAmount){
          notification.error({
            message: `提现金额不能高于${systemSetting.list.agentMaxAmount}`,
          });
          return;
        }
      if (!err) {
        confirm({
          title: '确认提现',
          content,
          onOk() {
            that.showCaptchaModal(true);
          },
          onCancel() {},
        });
      }
    })
  }

  getCaptcha = ()=>{
    const { dispatch, cash } = this.props;
    const agentCashInfo = cash.distributionExtractInfo;
    dispatch({
      type: 'financial/fetchMessage',
      payload: {
        mobile: agentCashInfo.phone,
        type:'WITHDRAW'
      },
    });
  }

  confirmCashOut = () => {
    const { dispatch,form } = this.props;
    const { captcha,money } = this.state;
    if(captcha === ''){
      notification.error({
        message: '请输入验证码!',
      });
      return;
    }
    dispatch({
      type: 'financial/cashOut',
      payload: {
        amount: money,
        validCode:captcha,
        withdrawType:'agent'
      },
    }).then((res)=>{
      if(res.code === 'SUCCESS'){
        dispatch({
          type: 'cash/query',
        });
        this.setState({
          visible:false
        });
        form.resetFields();
      }
    });

  }

  setCaptcha = e => {
    this.setState({
      captcha:e.target.value
    });
  }

  linkToCashOutList = e =>{
    e.preventDefault();
    router.push('/tran/mallCashout');
  }


  render() {
    const { form, cash, systemSetting } = this.props;
    const agentCashInfo = cash.distributionExtractInfo;
    const { captcha, visible } = this.state;
    return (
      <PageHeaderWrapper title="提现">
        <Card>
          {/* <Alert message="提现金额最低200元，最高50000元。" type="info" showIcon /> */}
          <Alert message={`提现金额最低${systemSetting.list.agentMinAmount},最高${systemSetting.list.agentMaxAmount}`} type="info" showIcon />
          <Row style={{marginTop:"20px"}}>
            <DescriptionList size="large" title="余额信息" layout="horizontal" col={3}>
              <Description term="可提现余额">
                <span className="money" style={{ fontSize: '18px' }}> {agentCashInfo.enableBalance} </span>
              </Description>
              <Description term="税率">
                <span className="money" style={{ fontSize: '18px' }}>{agentCashInfo.processFee * 100} %</span>
              </Description>
              <Description term="手续费">
                <span className="money" style={{ fontSize: '18px' }}> {agentCashInfo.withdrawFee} </span>
              </Description>
              <Description term="户名">
                {agentCashInfo.householdName}
              </Description>
              <Description term="银行卡号">
                {agentCashInfo.bankCard}
              </Description>
              <Description term="行别">
                {agentCashInfo.subBranch}
              </Description>
              <Description term="绑定手机">
                {agentCashInfo.phone}
              </Description>
            </DescriptionList>
            <Divider dashed />
          </Row>
          <Row>
            <Form layout="inline" onSubmit={this.showConfirm}>
              <FormItem label="提现金额">
                {form.getFieldDecorator('amount', {
                  rules: [{ pattern:/^[1-9]\d{0,4}(\.\d{1,2})?$/,required: true, message: "请输入正确的提现金额！", max: 8, }],
                })(<InputNumber autoFocus step="1" min={0} />)}
              </FormItem>
              {/* <FormItem label="验证码">
                {form.getFieldDecorator('sendCode', {
                      rules: [{ required: true, message: "请输入验证码", max: 8, }],
                    })(<Input placeholder="" />)}
              </FormItem> */}
              <FormItem>
                <Button type='primary' htmlType="submit" style={{marginLeft:20}}>提现</Button>
              </FormItem>
              <a  style={{float:"right"}} onClick={this.linkToCashOutList}>提现明细</a>
            </Form>
          </Row>
        </Card>
        <Modal 
          maskClosable={false}
          title='确认提现'
          visible={visible}
          onOk={this.confirmCashOut}
          onCancel={()=>{
            this.setState({
              visible:false
            })
          }}
        >
          <span>请输入{agentCashInfo.phone}收到的验证码</span>
          <Form layout="inline">
            <FormItem label="验证码">
              {form.getFieldDecorator('captcha', {
                      rules: [{  message: "请输入验证码", max: 8, }],
                    })(<Input placeholder="" value={captcha} onChange={this.setCaptcha} />)}
            </FormItem>
          </Form>
        </Modal>
      </PageHeaderWrapper>)
  }
}

export default  AgentCashOut;