import React, { PureComponent,Fragment } from 'react';
import { formatMessage, FormattedMessage } from 'umi-plugin-react/locale';
import { connect } from 'dva';
import { Radio,Row, Col, Avatar, Badge, Card, Table, Modal, Select, DatePicker, Carousel, Alert, Spin, Skeleton, Divider, Form, Input, Button, List, Progress } from 'antd';
import DescriptionList from '@/components/DescriptionList';
import PageHeaderWrapper from '@/components/PageHeaderWrapper';
import PropTypes from 'prop-types';
import moment from "moment";
import CryptoJS from 'crypto-js';
import echarts from 'echarts';


import styles from "./UserDimension.less";

const { Description } = DescriptionList;
const { Option } = Select;
const { RangePicker } = DatePicker;
const FormItem = Form.Item;
const time=[];// 时间
const result = []
const memberNum = [] // 注册人数
const memberAuth = [] // 认证人数
const oneMember = [] // 青铜店主数
const twoMember = [] // 白银店主数
const threeMember = [] // 黄金店主数
const fourMember = [] // 黄金店主数
const countryNum = [] // 国代
const provinceNum = [] // 省代
const cityNum = [] // 市代
const optionData ={
    title: { text: '用户维度（会员）' },
    tooltip : {
      trigger: 'axis'
  },
  legend: {
      data:['注册人数','认证人数','一级会员数','二级会员数','三级会员数']
  },
  toolbox: {
      show : true,
      feature : {
          dataView : {show: true, readOnly: false},
          magicType : {show: true, type: ['line', 'bar']},
          restore : {show: true},
          saveAsImage : {
            show: true,
            type: 'jpg'
          }
      }
  },
    xAxis : [
      {
          type : 'category',
          boundaryGap : false,
          data : time
      }
  ],
  yAxis : [
      {
          type : 'value'
      }
  ],
    series : [
      {
          name:'注册人数',
          type:'line',
          data: memberNum,
          smooth:true,
          markPoint : {
              data : [
                  {type : 'max', name: '最大值'},
                  {type : 'min', name: '最小值'}
              ]
          },
          markLine : {
              data : [
                  {type : 'average', name: '平均值'}
              ]
          }
      },
      {
          name:'认证人数',
          type:'line',
          data: memberAuth,
          smooth:true,
          markPoint : {
              data : [
                {type : 'max', name: '最大值'},
                {type : 'min', name: '最小值'}
              ]
          },
          markLine : {
              data : [
                  {type : 'average', name : '平均值'}
              ]
          }
      },
      {
        name:'一级会员数',
        type:'line',
        data: oneMember,
        smooth:true,
        markPoint : {
            data : [
              {type : 'max', name: '最大值'},
              {type : 'min', name: '最小值'}
            ]
        },
        markLine : {
            data : [
                {type : 'average', name : '平均值'}
            ]
        }
    },
    {
        name:'二级会员数',
        type:'line',
        data: twoMember,
        smooth:true,
        markPoint : {
            data : [
              {type : 'max', name: '最大值'},
              {type : 'min', name: '最小值'}
            ]
        },
        markLine : {
            data : [
                {type : 'average', name : '平均值'}
            ]
        }
    },
    {
        name:'三级会员数',
        type:'line',
        data: threeMember,
        smooth:true,
        markPoint : {
            data : [
              {type : 'max', name: '最大值'},
              {type : 'min', name: '最小值'}
            ]
        },
        markLine : {
            data : [
                {type : 'average', name : '平均值'}
            ]
        }
    },   
 
  ]  
}

/* eslint react/no-multi-comp:0 */
@connect(({ statistics, loading }) => ({
    statistics,
  loading: loading.models.rule,
}))

@Form.create()
class CartItemList extends PureComponent {
  constructor(props) {
    super(props)
    this.state = {
      modalVisible: false,
      currentRecord: null,
      pageSize: 10,
    }
  }

  componentDidMount() {
    const { dispatch } = this.props;
    const { pageSize } = this.state;
    dispatch({
        type: 'statistics/memberDimension',
        payload:{
          
        }
    }).then(()=>{
      const {statistics} = this.props;
       this.dataInfo(statistics);
   });

  }

  // 组装数据
  dataInfo(statistics){
    // 清空数组
    time.splice(0,time.length); 
    result.splice(0,result.length); 
    memberNum.splice(0,memberNum.length); 
    memberAuth.splice(0,memberAuth.length);
    oneMember.splice(0,oneMember.length); 
    twoMember.splice(0,twoMember.length); 
    threeMember.splice(0,threeMember.length); 
    // fourMember.splice(0,fourMember.length); 

    const memberList = statistics.memberStatisticsList.data; 
    memberList.forEach(item => {
        time.push(item.memberTime);
        memberNum.push(item.memberNum);
        memberAuth.push(item.memberAuth);
        oneMember.push(item.oneMember);
        twoMember.push(item.twoMember);
        threeMember.push(item.threeMember);
        // fourMember.push(item.fourMember);
  
    })
    const myChart = echarts.init(document.getElementById('main'));
    myChart.setOption(optionData);
  }

  // 查询
  handleSearch = (e) => {
    const { dispatch, form } = this.props;
    const { pageSize } = this.state;
    e.preventDefault();
    form.validateFields((err, fieldsValue) => {
      if (!err) {
        // console.log(fieldsValue)
          const value={
            startTime: fieldsValue.time[0] != null ? fieldsValue.time[0].format('YYYY-MM-DD') : null,
            endTime: fieldsValue.time[1] != null ? fieldsValue.time[1].format('YYYY-MM-DD') : null,
          }
          dispatch({
            type: 'statistics/memberDimension',
            payload:{
               ...value 
            }
        }).then(()=>{
          const {statistics} = this.props;
          this.dataInfo(statistics);
      });
      }
    })
  }

 // 重置
  handleFormReset = () => {
    const { form, dispatch } = this.props;
    form.resetFields();
    dispatch({
      type: 'statistics/memberDimension',
      payload:{

      }
    }).then(()=>{
     const {statistics} = this.props;
        this.dataInfo(statistics);
      });
  };

  renderForm = () => {
    const { getFieldDecorator } = this.props.form;
    const { form} = this.props;
    const FormItem = Form.Item;
    return (
      <Form labelCol={{ span:4, md: 4 ,lg:8}} wrapperCol={{ span:19,md: 19,lg:16 }} onSubmit={this.handleSearch}>
        <Row>
          <Col span={24} md={24} lg={8}>
            <FormItem label="日期">
              {getFieldDecorator('time',
                {
                  rules: []
                }
              )(<RangePicker />)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={8} offset={16}>
            <FormItem className={styles.btnContainer}>
              <Button type="primary" htmlType="submit">
                查询
              </Button>
              <Button style={{marginLeft:20}} onClick={this.handleFormReset}>
                重置
              </Button>
            </FormItem>
          </Col>
        </Row>
      </Form>
    )
  }

  onTabChange = (key, type) => {
    this.setState({ [type]: key });
  };

  render() {
    const {statistics} = this.props;
    const memberList = statistics.memberStatisticsList.data; 
    const columns = [
      {
        title: '时间',
        dataIndex: 'memberTime',
        key: 'memberTime',
      },
      {
        title: '注册人数',
        dataIndex: 'memberNum',
        key: 'memberNum',
      },
      {
        title: '认证人数',
        dataIndex: 'memberAuth',
        key: 'memberAuth',
      },
      {
        title: '一级会员',
        dataIndex: 'oneMember',
        key: 'oneMember',
      },
      {
        title: '二级会员',
        dataIndex: 'twoMember',
        key: 'twoMember',
      },
      {
        title: '三级会员',
        dataIndex: 'threeMember',
        key: 'threeMember',
      },
      // {
      //   title: '四级会员',
      //   dataIndex: 'fourMember',
      //   key: 'fourMember',
      // },
    ]
    //设置默认分页(表格自带分页)
    const pagination ={
          pageSize:10
        }

    return (
      <PageHeaderWrapper title="会员维度">
        <Card>
          <Row>
            {this.renderForm()}
          </Row>
          <div id="main" style={{ width: '100%', height: 500 }} />
        </Card>
        <Card>
          <Table
                dataSource={memberList}
                rowKey="index"
                className="textCenter"
                rowClassName="textCenter"
                columns={columns}
                bordered={true}
                pagination={pagination}
                scroll={{ x: 'max-content' }}
                onChange={this.handlePageChange}
                size="small"
              />
        </Card>
      </PageHeaderWrapper>
    )
  }
}
export default CartItemList;