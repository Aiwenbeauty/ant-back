import React from 'react';
import { connect } from 'dva';
import { Row, Col, Card, Table, Select, DatePicker, Form, Input, Button, Badge, Alert, Modal, Popconfirm,message } from 'antd';
// import ExportJsonExcel from 'js-export-excel';
import PageHeaderWrapper from '@/components/PageHeaderWrapper';
import moment from "moment";
import TextArea from 'antd/lib/input/TextArea';
import styles from "../Log/Log.less";
import { judgePageAuth } from '@/global.js';

// 用Authorized和localStorage做权限控制
const { Option } = Select;
const { RangePicker } = DatePicker;
const statusColor = ['pink', 'blue', 'green', 'red', 'gold', '#ddd'];
const statusMap = ['待处理', '处理中', '打款成功', '打款失败', '已退回', '已撤销'];
@Form.create()
/* eslint react/no-multi-comp:0 */
// 页面权限
@connect(({ financial, memberLevel, loading, menu: { pagePermissions } }) => ({
  financial,
  memberLevel,
  pagePermissions,
  loading: loading.models.rule,
}))
class CashList extends React.Component {
  constructor(props) {
    super(props)
    this.state = {
      pageSize: 10,
      currentPage: 1,
      currentRecord: {},
      modalVisible: false,
      remark: '',
      status: ''
    }
  }

  componentDidMount() {
    const { dispatch } = this.props;
    const { pageSize } = this.state;
    // 页面权限
    dispatch({
      type: 'menu/fetchButton',
    });
    dispatch({
      type: 'financial/fetchMallCashOutList',
      payload: {
        "pageNo": 1,
        "pageSize": pageSize,
      }
    });
    dispatch({
      type: 'memberLevel/fetch',
      payload: {}
    });
    dispatch({
      type: 'financial/fetchMallCashSum',
      payload: {}
    });
  }


  downloadExcel = () => {
    const { financial, form, dispatch } = this.props;
    //修改导出
    form.validateFields((err, fieldsValue) => {
      const endTime = fieldsValue.createTime ? fieldsValue.createTime[0].format('YYYY-MM-DD 00:00:00') : null;
      const startTime = fieldsValue.createTime ? fieldsValue.createTime[1].format('YYYY-MM-DD 23:59:59') : null;
      const values = fieldsValue.createTime ? {
        ...fieldsValue,
        endTime,
        startTime,
      } : {
          ...fieldsValue,
        };
      dispatch({
        type: 'financial/fetchMallCashOutList',
        payload: {
          ...values,
        }
      }).then(() => {
        const { financial } = this.props;
        const data = financial.mallCashOutList ? financial.mallCashOutList : '';// 表格数据
        const option = {};
        if (data) {
          const dataTable = data.rows.map(item => {
            let status = "";
            /**
             *  <Option value={1}>待处理</Option>
                      <Option value={2}>处理中</Option>
                      <Option value={3}>打款成功</Option>
                      <Option value={4}>打款失败</Option>
                      <Option value={5}>已退回</Option>
                      <Option value={6}>已撤销</Option>
             */
            if (item.status == 1) {
              status = "待处理"
            } else if (item.status == 2) {
              status = "处理中"
            } else if (item.status == 3) {
              status = "打款成功"
            } else if (item.status == 4) {
              status = "打款失败"
            } else if (item.status == 5) {
              status = "已退回"
            } else if (item.status == 6) {
              status = "已撤销"
            }
            return {
              '名称': item.accountName,
              '手机号': item.merchPhone,
              '提现订单号': item.withdrawNo,
              '提现金额': (item.amount / 1).toFixed(2),
              '实际到账金额': (item.actualAmount / 1).toFixed(2),
              '提现状态': status,
              '提现时间': moment(item.createTime).format('YYYY-MM-DD HH:mm:ss'),
              '提现类型': item.withdrawType === 'agent' ? '代理商' : '会员',
              '提现手续费': (item.withdrawFee / 1).toFixed(2),
              '税率': item.taxRate,
              '税费': item.taxFee,
              '户名': item.accountName,
              '银行卡号': item.bankCardNo,
              '行别': item.bankName,
              '完成时间': moment(item.finishTime).format('YYYY-MM-DD HH:mm:ss'),
              '备注': item.remark,
            }
          });
          option.fileName = moment(Date.now()).format('YYYYMMDDHHmmss') + 'vcmall提现管理';
          const sheetHeader = ['名称', '手机号', '提现订单号', '提现金额', '实际到账金额'
            , '提现状态', '提现时间', '提现类型', '提现手续费', '税率', '税费', '户名', '银行卡号', '行别', '完成时间', '备注',];
          option.datas = [
            {
              sheetData: dataTable,
              sheetName: 'sheet',
              sheetHeader,
            }
          ];
          import('js-export-excel').then((module) => {
            const toExcel = module.default(option)
            // const toExcel = ExportJsonExcel(option);
            toExcel.saveExcel();

          })
        }
      });
    })



    // if (data) {
    //   for (const i in data) {
    //     if (data) {
    //       const obj = {
    //         '组织ID': data[i].id,
    //         '组织代码': data[i].organization_code,
    //         '组织名称': data[i].organization_name,
    //       }
    //       dataTable.push(obj);
    //     }
    //   }
    // }



  }

  // from表单确认事件
  handleSearch = (e) => {
    const { dispatch, form } = this.props;
    const { pageSize } = this.state;
    e.preventDefault();
    form.validateFields((err, fieldsValue) => {
      const endTime = fieldsValue.createTime ? fieldsValue.createTime[0].format('YYYY-MM-DD 00:00:00') : null;
      const startTime = fieldsValue.createTime ? fieldsValue.createTime[1].format('YYYY-MM-DD 23:59:59') : null;
      const values = fieldsValue.createTime ? {
        ...fieldsValue,
        endTime,
        startTime,
      } : {
          ...fieldsValue,
        };
      if (!err) {
        this.setState({
          currentPage: 1,
          formValues: values
        });
        dispatch({
          type: 'financial/fetchMallCashOutList',
          payload: {
            ...values,
            "pageNo": 1,
            "pageSize": pageSize,
          }
        });
        dispatch({
          type: 'financial/fetchMallCashSum',
          payload: {
            ...values,
          }
        });
      }
    })
  }

  // 重置
  handleFormReset = () => {
    const { form, dispatch } = this.props;
    const { pageSize } = this.state;
    form.resetFields();
    this.setState({
      formValues: {},
      currentPage: 1
    });
    dispatch({
      type: 'financial/fetchMallCashOutList',
      payload: {
        "pageNo": 1,
        "pageSize": pageSize,
      },
    });
  };

  renderForm = () => {
    const { memberLevel, form, pagePermissions } = this.props;
    const { getFieldDecorator } = form;
    const FormItem = Form.Item;
    return (
      <Form labelCol={{ span: 4, md: 4, lg: 8 }} wrapperCol={{ span: 19, md: 19, lg: 16 }} onSubmit={this.handleSearch}>
        <Row>
          <Col span={24} md={24} lg={8}>
            <FormItem label="会员名称">
              {getFieldDecorator('memberName',
                {
                  rules: []
                }
              )(<Input />)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={8}>
            <FormItem label="所属代理商">
              {getFieldDecorator('agentName',
                {
                  rules: []
                }
              )(<Input />)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={8}>
            <FormItem label="手机号">
              {getFieldDecorator('merchPhone',
                {
                  rules: []
                }
              )(<Input />)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={8}>
            <FormItem label="订单号">
              {getFieldDecorator('withdrawNo',
                {
                  rules: []
                }
              )(<Input />)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={8}>
            <FormItem label="会员等级">
              {getFieldDecorator('levelNo', {
                rules: []
              })(
                <Select>
                  {memberLevel && memberLevel.list.map(item => {
                    return (<Option value={item.id} key={item.id}>{item.name}</Option>)
                  })
                  }
                </Select>
              )}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={8}>
            <FormItem label="提现时间">
              {getFieldDecorator('createTime',
                {
                  rules: []
                }
              )(<RangePicker />)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={8}>
            <FormItem label="完成时间">
              {getFieldDecorator('finishTime',
                {
                  rules: []
                }
              )(<RangePicker />)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={8}>
            <FormItem label="提现状态">
              {getFieldDecorator('status', {
                initialValue: null,
                rules: []
              })(
                <Select>
                  <Option value={null}>全部</Option>
                  <Option value={1}>待处理</Option>
                  <Option value={2}>处理中</Option>
                  <Option value={3}>打款成功</Option>
                  <Option value={4}>打款失败</Option>
                  <Option value={5}>已退回</Option>
                  <Option value={6}>已撤销</Option>
                </Select>
              )}
            </FormItem>
          </Col>
          <Col span={24}>
            <FormItem className={styles.btnContainer}>
              <Button type="primary" htmlType="submit">
                查询
              </Button>
              <Button style={{ marginLeft: 20 }} onClick={this.handleFormReset}>
                重置
              </Button>
              {
                // 页面权限
                judgePageAuth("exportMallCashout", pagePermissions) &&
                (
                  <Button style={{ marginLeft: 20 }} onClick={this.downloadExcel}>导出</Button>
                )
              }
              {/* <Button style={{ marginLeft: 20 }} onClick={this.downloadExcel}>导出</Button> */}
            </FormItem>
          </Col>
        </Row>
      </Form>
    )
  }

  renderCell = (text, width) => (
    <div style={{ width: `${width}`, overflow: "hidden", display: "inline-block", whiteSpace: 'nowrap', textOverflow: "ellipsis" }}>
      {text}
    </div>
  )

  handleModalVisible = (flag, record) => {
    if (flag) {
      this.setState({
        modalVisible: !!flag,
        currentRecord: record,
        status: record.status,
        remark:record.remark
      })
    } else {
      this.setState({
        modalVisible: !!flag,
      });
    }
  };

  confirmModalVisible = (withdrawNo) => {
    const { dispatch } = this.props;
    const { remark,status } = this.state;
    if(!remark){
      message.warn("请填写备注！");
      return;
    }
    const params = {
      status,
      remark,
      withdrawNo,
    }
    Modal.confirm({
      title: `确定更新订单状态为${statusMap[status - 1]}吗`,
      okText: "确定",
      cancelText: "取消",
      onOk: () => {
        dispatch({
          type: 'financial/updateMallCashList',
          payload: params,
        }).then((res) => {
          if (res.code === "SUCCESS") {
            this.handleModalVisible();
          }
        })
      }
    })
  }


  handlePageChange = (pagination) => {
    const { dispatch } = this.props;
    const { pageSize, formValues } = this.state;
    this.setState({
      currentPage: pagination.current
    });
    dispatch({
      type: 'financial/fetchMallCashOutList',
      payload: {
        ...formValues,
        "pageNo": pagination.current,
        "pageSize": pageSize,
      }
    });
  }

  setRemark = (e) => {
    this.setState({
      remark: e.target.value
    })
  }

  setStatus = (e) => {
    console.log(e)
    this.setState({
      status: e
    })
  }

  render() {
    const { financial, pagePermissions } = this.props;
    const { currentPage, pageSize, modalVisible, currentRecord, remark, status } = this.state;
    const columns = [
      {
        title: '名称',
        dataIndex: 'accountName',
        key: 'accountName',
        fixed: 'left',
        render: (text) => (
          <div style={{ whiteSpace: "noWrap" }}>
            {text}
          </div>
        ),
      },
      {
        title: '手机号',
        dataIndex: 'merchPhone',
        key: 'merchPhone',
        render: (text) => (
          <div style={{ whiteSpace: "noWrap" }}>
            {text}
          </div>
        ),
      },
      {
        title: ' 提现订单号',
        dataIndex: 'withdrawNo',
        key: 'withdrawNo',
        render: (text) => (
          <div style={{ whiteSpace: "noWrap" }}>
            {text}
          </div>
        ),
      },
      {
        title: '提现金额',
        dataIndex: 'amount',
        key: 'amount',
        render: (text) => (
          <div style={{ whiteSpace: "noWrap" }}>
            {(text / 1).toFixed(2)}
          </div>
        ),
      },
      {
        title: '实际到账金额',
        dataIndex: 'actualAmount',
        key: 'actualAmount',
        render: (text) => (
          <div style={{ whiteSpace: "noWrap" }}>
            {(text / 1).toFixed(2)}
          </div>
        ),
      }, {
        title: '提现状态',
        dataIndex: 'status',
        key: 'status',
        render: (text) => (
          <div style={{ whiteSpace: "noWrap" }}>
            <Badge status={statusColor[text - 1]} text={statusMap[text - 1]} style={{ minWidth: 80 }} />
          </div>
        ),
      },
      {
        title: '提现时间',
        dataIndex: 'createTime',
        key: 'createTime',
        render: val => val &&
          <div style={{ width: 100 }}>{moment(val).format('YYYY-MM-DD HH:mm:ss')}</div>,
      },
      {
        title: '提现类型',
        dataIndex: 'withdrawType',
        key: 'withdrawType',
        render: (text) => (
          <div style={{ whiteSpace: "noWrap" }}>
            {text === 'agent' ? '代理商' : '会员'}
            {/* {text} */}
          </div>
        ),
      },
      {
        title: '提现手续费',
        dataIndex: 'withdrawFee',
        key: 'withdrawFee',
        render: (text) => (
          <div style={{ whiteSpace: "noWrap" }}>
            {(text / 1).toFixed(2)}
          </div>
        ),
      },
      {
        title: '税率',
        dataIndex: 'taxRate',
        key: 'taxRate',
        render: (text) => {
          return (
            <div style={{ whiteSpace: "noWrap" }}>
              {text || 0}
            </div>
          )
        },
      },
      {
        title: '税费',
        dataIndex: 'taxFee',
        key: 'taxFee',
        render: (text) => {
          return (
            <div style={{ whiteSpace: "noWrap" }}>
              {text || 0}
            </div>
          )
        },
      },
      {
        title: '银行卡号',
        dataIndex: 'bankCardNo',
        key: 'bankCardNo',
        render: (text) => (
          <div style={{ whiteSpace: "noWrap" }}>
            {text}
          </div>
        ),
      },
      {
        title: '行别',
        dataIndex: 'bankName',
        key: 'bankName',
        render: (text) => (
          <div style={{ whiteSpace: "noWrap" }}>
            {text}
          </div>
        ),
      },
      {
        title: '操作',
        fixed: 'right',
        render: (text, record) => {
          return (
            // 页面权限
            judgePageAuth("updateStateMallCashout", pagePermissions) && record.status !=="3" && record.status !=="5" && record.status !=="6" &&
            (
              <a onClick={() => this.handleModalVisible(true, record)}>更新状态</a>
            )
            // <a onClick={() => this.handleModalVisible(true, record)}>更新状态</a>
          )
        }
      },
    ];

    const { total } = financial.mallCashOutList;
    const pagination = {
      current: currentPage,
      pageSize,
      total,
    }
    const { totalWithdrawAmount, totalWithdrawCount, totalWithdrawFee } = financial.mallCashSum;
    return (
      <PageHeaderWrapper title="提现管理">
        <Card>
          <Row>
            {this.renderForm()}
          </Row>
          <Row style={{ marginBottom: 20 }}>
            {/* 改这里 */}
            <Alert message={`提现统计：总提现金额￥${(totalWithdrawAmount / 1).toFixed(2)}, 总提现笔数￥${(totalWithdrawCount)},总提现手续费￥${(totalWithdrawFee / 1).toFixed(2)}`} type="success" showIcon />
          </Row>
          <Row>
            <Table
              dataSource={financial.mallCashOutList.rows}
              loading={financial.loading}
              expandedRowRender={record => <p>完成时间:{record.finishTime}&nbsp;&nbsp;&nbsp;&nbsp;备注:{record.remark}</p>}
              columns={columns}
              rowKey="revenueTime"
              rowClassName="textCenter"
              pagination={pagination}
              bordered={false}
              scroll={{ x: 'max-content' }}
              // style={{ overflowX: "scroll" }}
              onChange={this.handlePageChange}
            />
          </Row>
          {currentRecord &&
            <Modal
              maskClosable={false}
              title="更新提现状态"
              visible={modalVisible}
              onCancel={() => this.handleModalVisible(false)}
              onOk={() => { this.confirmModalVisible(currentRecord.withdrawNo) }}
              width={520}
            >
              <Form style={{ overflow: 'hidden' }} labelCol={{ span: 4 }} wrapperCol={{ span: 16 }} onSubmit={this.handleSearch}>
                <Col span={24}>
                  <Form.Item label="提现状态">
                    <Select value={Number(status)} onSelect={(e) => { this.setStatus(e) }}>
                      <Option value={1}>待处理</Option>
                      <Option value={2}>处理中</Option>
                      <Option value={3}>打款成功</Option>
                      <Option value={4}>打款失败</Option>
                      <Option value={5}>已退回</Option>
                      <Option value={6}>已撤销</Option>
                    </Select>
                  </Form.Item>
                </Col>
                <Col span={24}>
                  <Form.Item label="备注">
                    <TextArea value={remark} onChange={(e) => { this.setRemark(e) }} />
                  </Form.Item>
                </Col>
              </Form>
            </Modal>
          }
        </Card>
      </PageHeaderWrapper>
    )
  }
}

export default CashList;