import React, { PureComponent,Fragment } from 'react';
import { formatMessage, FormattedMessage } from 'umi-plugin-react/locale';
import { connect } from 'dva';
import {message, Radio,Row,Popconfirm, Col, Avatar, Badge, Card, Table, Modal, Select, DatePicker, Carousel, Alert, Spin, Skeleton, Divider, Form, Input, Button, List, Progress } from 'antd';
import DescriptionList from '@/components/DescriptionList';
import PageHeaderWrapper from '@/components/PageHeaderWrapper';
import PropTypes from 'prop-types';
import moment from "moment";
import CryptoJS from 'crypto-js';
import styles from "./Agent.less";

const { Description } = DescriptionList;
const { Option } = Select;
const { RangePicker } = DatePicker;
const FormItem = Form.Item;
const CreateForm = Form.create()(props => {
    const { modalVisible, form, handleAdd, handleModalVisible, roleList } = props;
    const okHandle = () => {
      form.validateFields((err, fieldsValue) => {
        if (err) return;
        form.resetFields();
        handleAdd(fieldsValue);
      });
    };
    return (
      <Modal maskClosable={false}
        destroyOnClose
        title="添加业务员"
        visible={modalVisible}
        onOk={okHandle}
        onCancel={() => handleModalVisible()}
      >
        <FormItem labelCol={{ span: 5 }} wrapperCol={{ span: 15 }} label="用户名">
          {form.getFieldDecorator('loginName', {
            rules: [{ required: true, message: '请输入至多10个字符！', max: 10 }],
          })(<Input placeholder="请输入" />)}
        </FormItem>
        <FormItem labelCol={{ span: 5 }} wrapperCol={{ span: 15 }} label="密码">
          {form.getFieldDecorator('password', {
            rules: [{ required: true, message: '请输入至少五个字符的密码！', min: 5 }],
          })(<Input placeholder="请输入密码" type="password" />)}
        </FormItem>
        <FormItem labelCol={{ span: 5 }} wrapperCol={{ span: 15 }} label="真实名称">
          {form.getFieldDecorator('realName', {
            rules: [{ required: true, message: '最多8个字符！', max: 8 }],
          })(<Input placeholder="请输入" />)}
        </FormItem>
        <FormItem labelCol={{ span: 5 }} wrapperCol={{ span: 15 }} label="手机号">
          {form.getFieldDecorator('mobile', {
            rules: [{ test: /^1\d{10}$/, message: '请输入正确的手机号码！', max: 11 }],
          })(<Input placeholder="请输入手机号码" />)}
        </FormItem>
        <FormItem labelCol={{ span: 5 }} wrapperCol={{ span: 15 }} label="状态">
          {form.getFieldDecorator('status', {
            rules: [],
            initialValue: 0
          })(
            <Radio.Group name="status" defaultValue={0}>
              <Radio value={0}>启用</Radio>
              <Radio value={1}>禁用</Radio>
            </Radio.Group>
          )}
        </FormItem>
        {/* <FormItem labelCol={{ span: 5 }} wrapperCol={{ span: 15 }} label="权限">
          {form.getFieldDecorator('roleId', {
            rules: [{ required: true }],
          })(
            <Select placeholder="请选择" style={{ width: '100%' }}>
              {roleList && roleList.map(item => {
                return (
                  <Option value={item.id} key={item.id}>{item.description}</Option>
                )
              })}
            </Select>
            )}
        </FormItem> */}

      </Modal>
    );
  });

@Form.create()
class UpdateForm extends PureComponent {
  static defaultProps = {
    handleUpdate: () => { },
    handleUpdateModalVisible: () => { },
    values: {},
    roleList: []
  };

  render() {
    const { updateModalVisible, handleUpdateModalVisible, handleUpdate, values, form, roleList } = this.props;
    const okHandle = () => {
      form.validateFields((err, fieldsValue) => {
        if (err) return;
        form.resetFields();
        if (values.encryptionId) {
          handleUpdate(fieldsValue, values.encryptionId);
        }
      });
    };
    return (
      <Modal maskClosable={false}
        width={640}
        bodyStyle={{ padding: '32px 40px 48px' }}
        destroyOnClose
        title="编辑角色"
        visible={updateModalVisible}
        onOk={okHandle}
        onCancel={() => handleUpdateModalVisible(false, values)}
        afterClose={() => handleUpdateModalVisible()}
      >
        <FormItem labelCol={{ span: 5 }} wrapperCol={{ span: 15 }} label="用户名">
          <Input placeholder="请输入" value={values.loginName} />
        </FormItem>
        <FormItem labelCol={{ span: 5 }} wrapperCol={{ span: 15 }} label="真实名称">
          {form.getFieldDecorator('realName', {
            initialValue: values.realName,
            rules: [{ required: true, message: '最多8个字符！', max: 8 }],
          })(<Input placeholder="请输入" />)}
        </FormItem>
        {/* <FormItem labelCol={{ span: 5 }} wrapperCol={{ span: 15 }} label="权限">
          {form.getFieldDecorator('roleId', {
            initialValue: values.roleId,
            rules: [{ required: true }],
          })(
            <Select placeholder="请选择" style={{ width: '100%' }}>
              {roleList && roleList.map(item => {
                return (
                  <Option value={item.id} key={item.id}>{item.description}</Option>
                )
              })}
            </Select>)}
        </FormItem> */}
        <FormItem labelCol={{ span: 5 }} wrapperCol={{ span: 15 }} label="手机">
          {form.getFieldDecorator('mobile', {
            initialValue: values.mobile,
            rules: [{ test: /^1\d{10}$/, message: '请输入正确的手机号码！', max: 11 }],
          })(<Input placeholder="请输入手机号码" />)}
        </FormItem>
        <FormItem labelCol={{ span: 5 }} wrapperCol={{ span: 15 }} label="状态">
          
          {form.getFieldDecorator('status', {
            rules: [],
            initialValue:  Number(values.status),
          })(
            <Radio.Group>
              <Radio value={0}>启用</Radio>
              <Radio value={1}>禁用</Radio>
            </Radio.Group>
          )}
        </FormItem>
      </Modal>

    );
  }
}


/* eslint react/no-multi-comp:0 */
@connect(({ agentSalesman,role, loading }) => ({
  agentSalesman,
    role,
  loading: loading.models.rule,
}))
@Form.create()
class SalesmanList extends PureComponent {
  constructor(props) {
    super(props)
    this.state = {
      modalVisible: false,
      currentRecord: null,
      pageSize: 10,
    }
  }

  componentDidMount() {
    const { dispatch } = this.props;
    const { pageSize } = this.state;
    dispatch({
      type: 'agentSalesman/fetch',
      payload: {
        "pageNo": 1,
        "pageSize": pageSize,
      }
    });
    dispatch({
        type: 'role/fetch',
      });
  }

  // from表单确认事件
  handleSearch = (e) => {
    const { dispatch, form } = this.props;
    const { pageSize } = this.state;
    e.preventDefault();
    form.validateFields((err, fieldsValue) => {
      if (!err) {
          const value={
            realName: fieldsValue.realName,
            loginName: fieldsValue.loginName,
            status: fieldsValue.status,
          }
        dispatch({
          type: 'agentSalesman/fetch',
          payload: {
            ...value,
            "pageNo": 1,
            "pageSize": pageSize,
          }
        });
      }
    })
  }

 // 重置
  handleFormReset = () => {
    const { form, dispatch } = this.props;
    const { pageSize } = this.state;
    form.resetFields();
    dispatch({
      type: 'agentSalesman/fetch',
      payload: {
        "pageNo": 1,
        "pageSize": pageSize,
      },
    });
  };

    //取消提示
  cancel = (e) => {
    // message.error('Click on No');
  }

  renderForm = () => {
    const { getFieldDecorator } = this.props.form;
    const FormItem = Form.Item;
    return (
      <Form labelCol={{ span:4, md: 4 ,lg:8}} wrapperCol={{ span:19,md: 19,lg:16 }} onSubmit={this.handleSearch}>
        <Row>
          <Col span={24} md={24} lg={8}>
          <FormItem label="登录账号">
              {getFieldDecorator('loginName',
                {
                  rules: []
                }
              )(<Input />)}
            </FormItem>
        </Col>
          <Col span={24} md={24} lg={8}>
            <FormItem label="用户姓名">
              {getFieldDecorator('realName',
                {
                  rules: []
                }
              )(<Input />)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={8}>
            <FormItem label="交易状态">
              {getFieldDecorator('status',
                {
                  rules: []
                }
              )(
                <Select>
                  <Option value="">全部</Option>
                  <Option value="0">正常</Option>
                  <Option value="1">冻结</Option>
                </Select>
              )}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={8} offset={16}>
            <FormItem className={styles.btnContainer}>
              <Button type="primary" htmlType="submit">
                查询
              </Button>
              <Button style={{marginLeft:20}} onClick={this.handleFormReset}>
                重置
              </Button>
            </FormItem>
          </Col>
        </Row>
      </Form>
    )
  }

  renderCell = (text, width) => (
    <div style={{ width: `${width}`, overflow: "hidden", display: "inline-block", whiteSpace: 'nowrap', textOverflow: "ellipsis" }}>
      {text}
    </div>
  )

  handleUpdateModalVisible = (flag, record) => {
    debugger
    this.setState({
      updateModalVisible: !!flag,
      updateFormValues: record || {},
    });
  };

  handleModalVisible = (flag, record) => {
    this.setState({
      modalVisible: !!flag,
      currentRecord: record,
    });
  };

  handleAdd = fields => {
      debugger
    const { dispatch } = this.props;
    const EncryptPassword =  this.handleEncrypt(fields.password);
    dispatch({
      type: 'agentSalesman/add',
      payload: {
        loginName: fields.loginName,
        password: EncryptPassword,
        realName: fields.realName,
        roleId: 48,
        status: fields.status,
        mobile: fields.mobile,
      },
    });
    this.handleModalVisible();
  };

  handleUpdate = (fields, encryptionId) => {
    const { dispatch } = this.props;
    dispatch({
      type: 'agentSalesman/update',
      payload: {
        notDetail: true,
        encryptionId,
        realName: fields.realName,
        loginName: fields.loginName,
        roleId: 48,
        mobile: fields.mobile,
        status: fields.status,
      },
    });
    this.handleUpdateModalVisible();
  };


  handleEncrypt = beforePwd => {
    const secretKey = 'com.vcpay.foo.key';
    const afterEncrypt = CryptoJS.DES.encrypt(beforePwd, CryptoJS.enc.Utf8.parse(secretKey), {
      mode: CryptoJS.mode.ECB,
      padding: CryptoJS.pad.Pkcs7
    }).toString()
    return afterEncrypt;
  }

  handlePageChange = (pagination) => {
    const { dispatch } = this.props;
    const { pageSize } = this.state;
    dispatch({
      type: 'agentSalesman/fetch',
      payload: {
        "pageNo": pagination.current,
        "pageSize": pageSize,
      }
    });
  }

  isProhibit = (flag,record)=>{
    const { dispatch } = this.props;
    // const { id } = record;
    dispatch({
        type:"agentSalesman/prohibitSalesman",
        payload:record,
    })
}

isEnable = (flag,record)=>{
    const { dispatch } = this.props;
    // const { id } = record;
    dispatch({
        type:"agentSalesman/startUpSalesman",
        payload:record,
    })
}

  render() {
    const { agentSalesman } = this.props;
    const { modalVisible, currentRecord } = this.state;
    const { role } = this.props;
    const roleList = role.list;
    const {selectedRows,updateModalVisible, updateFormValues } = this.state;
    const columns = [
    {
      title: '登录账号',
      dataIndex: 'loginName',
      key: 'loginName',
    },
    {
      title: '用户姓名',
      dataIndex: 'realName',
      key: 'realName',
    },
    {
      title: '状态',
      dataIndex: 'status',
      key: 'status',
      render: item => {
        const status = item === "1" ?  "error":"processing";
        const statusText = item === "1" ?  "禁用":"正常";
        return (
          <Badge status={status} text={statusText} /> 
        )
      }
    },
   
    {
      title: '操作',
      render: (text, record) => (
        <Fragment>
          <a onClick={() => this.handleUpdateModalVisible(true, record)}>编辑</a>&nbsp;&nbsp;&nbsp;&nbsp;
          {record.status === "0" ?
            // <a onClick={() => this.isProhibit(record.encryptionId)}>禁用</a>
            <Popconfirm
            title="确定禁用吗"
            onConfirm={() => this.isProhibit(true, record.encryptionId)}
            onCancel={() => this.cancel(true, record.encryptionId)}
            okText="确定"
            cancelText="取消"
          >
            <a href="#">禁用</a>
          </Popconfirm>
                :
            // <a onClick={() => this.isEnable(record.encryptionId)}>启用</a>}
                <Popconfirm
                  title="确定启用吗"
                  onConfirm={() => this.isEnable(true, record.encryptionId)}
                  onCancel={() => this.cancel(true, record.encryptionId)}
                  okText="确定"
                  cancelText="取消"
                >
                  <a href="#">启用</a>
                </Popconfirm>}
        </Fragment>
      ),
    },
    ];

    const {total} = agentSalesman.list;
    const pagination = {
      total
    }
    const parentMethods = {
        handleAdd: this.handleAdd,
        handleModalVisible: this.handleModalVisible,
      };
    const updateMethods = {
        handleUpdateModalVisible: this.handleUpdateModalVisible,
        handleUpdate: this.handleUpdate,
      };
    return (
      <PageHeaderWrapper title="交易记录查询">
        <Card>
          <Row>
            {this.renderForm()}
          </Row>
          <Row>
            <Button icon="plus" type="primary" onClick={() => this.handleModalVisible(true)}>
                添加
          </Button>
            <Table
              dataSource={agentSalesman.list.rows}
              rowKey="id"
              className="textCenter"
              rowClassName="textCenter"
              columns={columns}
              loading={agentSalesman.loading}
              bordered={false}
              scroll={{ x: 'max-content'}}
              onChange={this.handlePageChange}
            />
          </Row>
        </Card>
        <CreateForm {...parentMethods} modalVisible={modalVisible} roleList={roleList} />
        {updateFormValues && Object.keys(updateFormValues).length ? (
          <UpdateForm
            {...updateMethods}
            updateModalVisible={updateModalVisible}
            values={updateFormValues}
            roleList={roleList}
          />
        ) : null}
      </PageHeaderWrapper>
    )
  }
}
SalesmanList.propTypes = {
  agentSalesman: PropTypes.object
};

SalesmanList.defaultProps = {
  agentSalesman: {
    list: {
      rows: [],
      totalPage: 5
    }
  }
};
export default SalesmanList;