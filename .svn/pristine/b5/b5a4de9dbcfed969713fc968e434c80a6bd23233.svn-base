import React, { PureComponent, Fragment } from 'react';
import { connect } from 'dva';
import moment from 'moment';
import { Card, Form, Input, Button, Modal,Row,Col,DatePicker,Table,Alert,Select } from 'antd';
import PageHeaderWrapper from '@/components/PageHeaderWrapper';
// import ExportJsonExcel from 'js-export-excel';
import { judgePageAuth } from '@/global.js';
import styles from './AccountInfoList.less';

const { RangePicker } = DatePicker;

const StatusName = (props) => {
  //交易类型：1、提现 2、手续费分润 3、结算费分润 4、转账扣款
  let value = '';
  switch (props) {
    case 1:
      value = "提现";
      break;
    case 2:
      value = "手续费分润"
      break;
    case 3:
      value = "结算费分润"
      break;
    case 4:
      value = "转账扣款"
      break;
      case 5:
        value = "手动调账"
        break;
      case 6:
      value = "手续费"
      break;
    default:
      value = ""
  }
  return value
  
}


/**
 * 请求组件 需放在主class 上面
 */
//页面权限
@connect(({ financial,menu: { pagePermissions }  }) => ({
  financial,
  pagePermissions
}))
@Form.create()
class AccountInfoList extends PureComponent {
  state = {
    modalVisible: false,
    pageSize: 10,
    currentPage: 1,
    formValues: {}
  };

  /**
   * 初始化数据
   */
  static defaultProps = {
    incomeList: {
      list: []
    },
  };


   /**
   * 初始化加载数据
   */
  componentDidMount() {
    const { dispatch } = this.props;
    const { pageSize } = this.state;
    //页面权限
    dispatch({
      type: 'menu/fetchButton',
    });
    dispatch({
      type: 'financial/queryAccountiInfoList',
    payload: {
        "pageNo": 1,
        "pageSize": pageSize,
      }
    });

  }
  

  renderForm = () => {
    const { getFieldDecorator } = this.props.form;
    const FormItem = Form.Item;
    return (
      <Form labelCol={{ span: 4, md: 4, lg: 8 }} wrapperCol={{ span: 19, md: 19, lg: 16 }} onSubmit={this.handleSearch}>
        <Row>
          <Col span={24} md={24} lg={8}>
            <FormItem label="商户名称">
              {getFieldDecorator('nickname',
                {
                  rules: []
                }
              )(<Input />)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={8}>
            <FormItem label="商户手机号">
              {getFieldDecorator('phone',
                {
                  rules: []
                }
              )(<Input />)}
            </FormItem>
          </Col>

          <Col span={24} md={24} lg={8}>
            <FormItem label="商户编号">
              {getFieldDecorator('merchNo',
                {
                  rules: []
                }
              )(<Input />)}
            </FormItem>
          </Col>

          <Col span={24} md={24} lg={8}>
            <FormItem label="商户类型">
              {getFieldDecorator('userType',
              )(
                <Select placeholder="请选择" style={{ width: '100%' }}>
                   <Option value="">全部</Option>      
                 <Option value="1">会员</Option>     
                  <Option value="2">代理商</Option>
                </Select>)}
            </FormItem>
          </Col>

          {/* <Col span={24} md={24} lg={8}>
            <FormItem label="更新时间">
              {getFieldDecorator('time',
                {
                  rules: []
                }
              )(<RangePicker />)}
            </FormItem>
          </Col> */}

          <Col span={24} md={24} lg={8} offset={16}>
            <FormItem className={styles.btnContainer}>
              <Button type="primary" htmlType="submit">
                查询
              </Button>
              <Button style={{ marginLeft: 20 }} onClick={this.handleFormReset}>
                重置
              </Button>
              {/* <Button style={{ marginLeft: 20 }} onClick={this.exportIncomeList}>导出</Button> */}
            </FormItem>
          </Col>
        </Row>
      </Form>
    )
  }

   // 查询
   handleSearch = (e) => {
    const { dispatch, form } = this.props;
    const { pageSize } = this.state;
    e.preventDefault();
    form.validateFields((err, fieldsValue) => {
      if (!err) {
        fieldsValue.time = fieldsValue.time?fieldsValue.time:[];
        const value = {
          nickname: fieldsValue.nickname?fieldsValue.nickname.trim():fieldsValue.nickname,
          phone: fieldsValue.phone?fieldsValue.phone.trim():fieldsValue.phone,
          merchNo:fieldsValue.merchNo?fieldsValue.merchNo.trim():fieldsValue.merchNo,
          userType:fieldsValue.userType,
          startUpdateTime: fieldsValue.time.length > 0 ? fieldsValue.time[0].format('YYYY-MM-DD 00:00:00') : null,
          endUpdateTime: fieldsValue.time.length > 0 ? fieldsValue.time[1].format('YYYY-MM-DD 23:59:59') : null,
        }
        this.setState({
          currentPage: 1,
          formValues: value
        });
        dispatch({
          type: 'financial/queryAccountiInfoList',
          payload: {
            ...value,
            "pageNo": 1,
            "pageSize": pageSize,
          }
        });
      }
    })
  }

    // 重置
    handleFormReset = () => {
      const { form, dispatch } = this.props;
      const { pageSize } = this.state;
      form.resetFields();
      this.setState({
        formValues: {},
        currentPage: 1
      });
      dispatch({
        type: 'financial/queryAccountiInfoList',
        payload: {
          "pageNo": 1,
          "pageSize": pageSize,
        },
      });
    };
 

   // 详情页面
   detailsModalVisible = (flag, record) => {
    const { dispatch } = this.props;

    this.setState({
      updateModalVisible: !!flag,
      updateFormValues: record || {},
    });
    if (flag) {
      dispatch({
        type: 'financial/queryAccountInfoHistoryList',
        payload: {
          ...record,
          "pageNo": 1,
          "pageSize": 20,
        }
      });

      dispatch({
        type: 'financial/accountInfoSummary',
        payload: {
          id:record.id
        }
      });

    }

  };

  // 分页
  handlePageChange = (pagination,filters, sorter ) => {
    const { dispatch } = this.props;
    const { pageSize, formValues } = this.state;
    this.setState({
      currentPage: pagination.current,
      pageSize:pagination.pageSize
    });
    const value = formValues;
   
    value.directionOrderBy=sorter.columnKey == 'userType'?sorter.order=="descend"?'desc':'asc':null,
    value.amountOrderBy=sorter.columnKey == 'balance'?sorter.order=="descend"?'desc':'asc':null,
   
    dispatch({
      type: 'financial/queryAccountiInfoList',
      payload: {
        ...value,
        "pageNo": pagination.current,
        "pageSize": pagination.pageSize,
      }
    });
  }

  
  // 导出收益列表
  exportIncomeList = (e) =>{
    const { dispatch, form } = this.props;
    form.validateFields((err, fieldsValue) => {
      if (!err) {
        const value = {
          tradeNo: fieldsValue.tradeNo,
          memberName: fieldsValue.memberName,
          memberMobile:fieldsValue.memberMobile,
          createTimeStart: fieldsValue.time.length > 0 ? fieldsValue.time[0].format('YYYY-MM-DD 00:00:00') : null,
          createTimeEnd: fieldsValue.time.length > 0 ? fieldsValue.time[1].format('YYYY-MM-DD 23:59:59') : null,
        }
  
        dispatch({
          type: 'incomeList/exportIncomeList',
          payload: {
            ...value
          }
        }).then(() => {
          const { incomeList } = this.props;
          const option = {};
          const data =  incomeList.exportIncomeList.rows
          if(data){
            const dataTable = data.map(item => {
            return {
              '交易编号': item.tradeNo,
              '商户手机号': item.memberMobile,
              '商户名称': item.memberName,
              '订单交易金额': item.orderAmount == null ? "0":item.orderAmount,
              '收益': item.totalProfit==null ? "0":item.totalProfit,
              '创建时间': item.createTime == null? "" : moment(item.createTime).format('YYYY-MM-DD HH:mm:ss'),
             
            }
        });
        option.fileName = '收益列表';
        const sheetHeader = ['交易编号', '商户手机号', '商户名称', '订单交易金额', '收益',
        '创建时间']
          option.datas = [
            {
              sheetData: dataTable,
              sheetName: 'sheet',
              // sheetFilter: ['组织ID', '组织代码', '组织名称'],
              sheetHeader,
            }
          ];
          import('js-export-excel').then((module) => {
            const toExcel = module.default(option)
            // const toExcel = ExportJsonExcel(option);
            toExcel.saveExcel();

          })
          }
        });
      
      }
    })
  };

  render() {
    const { financial,pagePermissions } = this.props;
    const accountInfoHistoryItemList = financial.accountInfoHistoryItemList;
    const accountiInfoItemList = financial.accountiInfoItemList.rows;
    
    const {updateModalVisible,updateFormValues,currentPage,pageSize} = this.state;

    const columns = [
      {
        title: '商户编号',
        dataIndex: 'merchNo',
        key: 'merchNo',
      },
      {
        title: '商户名称',
        dataIndex: 'nickname',
        key: 'nickname',
      },
      {
        title: '商户手机号',
        dataIndex: 'phone',
        key: 'phone',
      },
     
      {
        title: '类型',
        dataIndex: 'userType',
        key: 'userType',
        sorter:true,
        render: item => {
          //用户类型 1:会员 2:代理
          return item == 2?"代理商":"会员"
        }
      },
      {
        title: '余额',
        dataIndex: 'balance',
        key: 'balance',
        sorter:true
      },

      // {
      //   title: '更新时间',
      //   dataIndex: 'updateTime',
      //   key: 'updateTime',
      //   render: val => val && <span>{moment(val).format('YYYY-MM-DD HH:mm:ss')}</span>
      // },  
      {
        title: '操作',
        render: (text, record) => (
          <Fragment>
            {
              //页面权限
              judgePageAuth("detailsAccountInfoList", pagePermissions) &&
              (
                <a onClick={() => this.detailsModalVisible(true, record)}>收支明细</a> 
              )
            }
            {/* <a onClick={() => this.detailsModalVisible(true, record)}>收支明细</a>&nbsp;&nbsp;&nbsp;&nbsp; */}
          </Fragment>
        ),
      },
    ];

    
   
    const  total = financial.accountiInfoItemList.total;
    const pagination = {
      current: currentPage,
      pageSize,
      total,
      showTotal:()=>"共 " + total + " 条", //显示总条数
      showQuickJumper: true, //显示跳转指定页框
      showSizeChanger:true //显示指定条数
    }

    const updateMethods = {
      detailsModalVisible: this.detailsModalVisible,
      details: this.details,
    };
  
    return (
      <PageHeaderWrapper title="余额列表">
        <Card bordered={false}>
          <Row>
            {this.renderForm()}
          </Row>

         
          <Row>
            <Table
              dataSource={accountiInfoItemList}
              rowKey="id"
              rowClassName="textCenter"
              columns={columns}
              pagination={pagination}
              loading={financial.loading}
              bordered={false}
              style={{ overflowX: "scroll" }}
              onChange={this.handlePageChange}
            />
          </Row>
        </Card>
        <DetailsForm
          {...updateMethods}
          updateModalVisible={updateModalVisible}
          accountDetails={accountInfoHistoryItemList}
          financial={financial}
          values={updateFormValues}
        />
      </PageHeaderWrapper>
    );
  }

}


/**
 * 收支明细详情
 */
@connect(({ financial }) => ({
  financial
}))
@Form.create()
class DetailsForm extends PureComponent {

  state = {
    pageSize: 10,
    currentPage: 1,
    formValues: {}
  };

  static defaultProps = {
    details: () => { },
    detailsModalVisible: () => { },
    values: {},
    
  };

   // 查询
   handlHistoryeSearch = (e) => {
    const { dispatch, form,values } = this.props;
    const { pageSize } = this.state;
    e.preventDefault();
    form.validateFields((err, fieldsValue) => {
      if (!err) {
        fieldsValue.time = fieldsValue.time?fieldsValue.time:[];
        const value = {
          tradeNo: fieldsValue.tradeNo?fieldsValue.tradeNo.trim():fieldsValue.tradeNo,
          direction:fieldsValue.direction,
          startUpdateTime: fieldsValue.time.length > 0? fieldsValue.time[0].format('YYYY-MM-DD 00:00:00') : null,
          endUpdateTime: fieldsValue.time.length > 0? fieldsValue.time[1].format('YYYY-MM-DD 23:59:59') : null,
          id:values.id
        }
        this.setState({
          currentPage: 1,
          formValues: value
        });
        dispatch({
          type: 'financial/queryAccountInfoHistoryList',
          payload: {
            ...value,
            "pageNo": 1,
            "pageSize": pageSize,
          }
        });
        dispatch({
          type: 'financial/accountInfoSummary',
          payload: {
            ...value
          }
        });
      }
    })
  }

    // 重置
    handleFormReset = () => {
      const { form, dispatch } = this.props;
      const { pageSize } = this.state;
      form.resetFields();
      this.setState({
        formValues: {},
        currentPage: 1
      });
      dispatch({
        type: 'financial/queryAccountInfoHistoryList',
        payload: {
          "pageNo": 1,
          "pageSize": pageSize,
        },
      });
    };

    handleTableChange = (pagination, filters, sorter) => {
      const { dispatch,values } = this.props;
      const value = {
        amountOrderBy:sorter.columnKey == 'amount'?sorter.order=="descend"?"desc":"asc":null,
        beforeBalanceOrderBy:sorter.columnKey == 'beforeBalance'?sorter.order=="descend"?"desc":"asc":null,
        afterBalanceOrderBy:sorter.columnKey == 'afterBalance'?sorter.order=="descend"?"desc":"asc":null,
        directionOrderBy:sorter.columnKey == 'direction'?sorter.order=="descend"?"desc":"asc":null,
        tradeTypeOrderBy:sorter.columnKey == 'tradeType'?sorter.order=="descend"?"desc":"asc":null,
        timeOrderBy:sorter.columnKey == 'createTime'?sorter.order=="descend"?"desc":"asc":null,
        id:values.id
      }
      this.setState({
        currentPage: pagination.current,
        pageSize:pagination.pageSize
      });
      dispatch({
        type: 'financial/queryAccountInfoHistoryList',
        payload: {
          ...value,
          "pageNo": pagination.current,
          "pageSize": pagination.pageSize,
        },
      });

      
      
    };



  render() {
    const { updateModalVisible, detailsModalVisible, financial,values, accountDetails } = this.props;
    const {currentPage,pageSize} = this.state;
    const FormItem = Form.Item;
    const { getFieldDecorator } = this.props.form;
    const accountDetailsItems = accountDetails.rows;
    const  total = accountDetails.total;

    const  accountInfoSummaryItems = financial.accountInfoSummaryItem;
    const pagination = {
      current: currentPage,
      pageSize,
      total,
      showTotal:()=>"共 " + total + " 条", //显示总条数
      showQuickJumper: true, //显示跳转指定页框
      showSizeChanger:true //显示指定条数
    }

    const detailsColumns = [
      {
        title: '交易流水号',
        dataIndex: 'transactionNo',
        key: 'transactionNo',
      },
      // {
      //   title: '类型',
      //   dataIndex: 'direction',
      //   key: 'direction',
      //   sorter: true,
      //   render: item => {
      //     //-1出方向 1进方向
      //     return item == 1?"收入":"支出"
      //   }
      // },
      {
        title: '变动金额',
        dataIndex: 'amount',
        key: 'amount',
        sorter: true,
        render: (val,record) => {
          //-1出方向 1进方向
          return record.direction == 1?<div style={{ color: "red" }}>+<span style={{ color: "#000" }}>&nbsp;{val}</span></div>
          :<div style={{ color: "green" }}>-<span style={{ color: "#000" }}>&nbsp;{val}</span></div>
        }
      },
      {
        title: '变动前金额',
        dataIndex: 'beforeBalance',
        key: 'beforeBalance',
        sorter: true,
      },
     
      
      {
        title: '变动后金额',
        dataIndex: 'afterBalance',
        key: 'afterBalance',
        sorter: true,
      },
      // {
      //   title: '手续费',
      //   dataIndex: 'serviceBalance',
      //   key: 'serviceBalance'
      // },
      
      {
        title: '交易类型',
        dataIndex: 'tradeType',
        key: 'tradeType',
        sorter: true,
        render: item => {
          // 订单状态：1新增（等待付款），2取消（买家取消），3已付款（等待发货），
          // 4待退款审核（等待商家审核），5已发货（商家已发货等待买家确认），6已完成（买家确认收货），
          // 7待退货审核（等待商家审核），8退货中（商家审核通过，买家退货中），9退款中（商家已退款）
          //  return  this.statusByName(item);
          return StatusName (item);
        }
      },
      {
        title: '创建时间',
        dataIndex: 'createTime',
        key: 'createTime',
        sorter: true,
        render: val => val && <span>{moment(val).format('YYYY-MM-DD HH:mm:ss')}</span>
      },  
    ];


    return (
      
      <Modal
        maskClosable={false}
        width={1000}
        bodyStyle={{ padding: '32px 40px 48px' }}
        destroyOnClose
        title="收支明细详情"
        visible={updateModalVisible}
        footer={null}
        onCancel={() => detailsModalVisible(false, values)}
      >
         <Form labelCol={{ span: 4, md: 4, lg: 8 }} wrapperCol={{ span: 19, md: 19, lg: 16 }} onSubmit={this.handlHistoryeSearch}>
        <Row>
          <Col span={24} md={24} lg={8}>
            <FormItem label="交易流水号">
              {getFieldDecorator('tradeNo',
                {
                  rules: []
                }
              )(<Input />)}
            </FormItem>
          </Col>
          
          <Col span={24} md={24} lg={8}>
            <FormItem label="交易类型">
              {getFieldDecorator('direction',
              )(
                <Select placeholder="请选择" style={{ width: '100%' }}>
                   <Option value="">全部</Option>      
                 <Option value="1">提现</Option>     
                  <Option value="2">手续费分润</Option>
                  <Option value="3">结算费分润</Option>
                  <Option value="4">转账扣款</Option>
                  <Option value="5">手动调账</Option>
                </Select>)}
            </FormItem>
          </Col>

          <Col span={24} md={24} lg={8}>
            <FormItem label="创建时间">
              {getFieldDecorator('time',
                {
                  rules: []
                }
              )(<RangePicker />)}
            </FormItem>
          </Col>

          <Col span={24} md={24} lg={8} offset={16}>
            <FormItem className={styles.btnContainer}>
              <Button type="primary" htmlType="submit">
                查询
              </Button>
              <Button style={{ marginLeft: 20 }} onClick={this.handleFormReset}>
                重置
              </Button>
              {/* <Button style={{ marginLeft: 20 }} onClick={this.exportIncomeList}>导出</Button> */}
            </FormItem>
          </Col>
        </Row>
      </Form>
      <Alert message={`收支明细汇总：收入金额￥${accountInfoSummaryItems.balance},支出金额${(accountInfoSummaryItems.enableBalance)}`} type="success" showIcon />
        <Table
          dataSource={accountDetailsItems}
          rowKey="id"
          size="small"
          rowClassName="textCenter"
          columns={detailsColumns}
          pagination={pagination}
          loading={financial.loading}
          bordered={false}
          style={{ overflowX: "scroll" }}
          onChange={this.handleTableChange}
        />
      </Modal>

    );
  }
}

export default AccountInfoList;