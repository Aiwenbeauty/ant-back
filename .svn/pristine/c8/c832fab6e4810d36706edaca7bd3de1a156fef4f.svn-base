import React, { PureComponent, Fragment } from 'react';
import { connect } from 'dva';
import moment from 'moment';
import router from 'umi/router';
import {
    Row,
    Col,
    Card,
    Form,
    Input,
    Select,
    Icon,
    Button,
    Dropdown,
    Menu,
    Modal,
    Badge,
    Upload,
    notification
} from 'antd';
import StandardTable from '@/components/StandardTable';
import DescriptionList from '@/components/DescriptionList';
import PageHeaderWrapper from '@/components/PageHeaderWrapper';
import styles from '../AuthorityControl/UserControl.less';
import imgUrl from '@/global';

const { Description } = DescriptionList;
function getBase64(file) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.readAsDataURL(file);
        reader.onload = () => resolve(reader.result);
        reader.onerror = error => reject(error);
    });
}
@connect(({ goods }) => ({
    goods,
}))
class PicturesWall extends React.Component {
    state = {
        previewVisible: false,
        previewImage: '',
        fileList: [],
        pageSize: 10,
        currentPage: 1
    };

    componentDidMount() {
        const { Picture } = this.props;
        if (Picture && Array.isArray(Picture)) {
            const fileList = Picture.map((item, index) => {
                return ({
                    uid: index,
                    name: 'image.png',
                    status: 'done',
                    url: imgUrl + item,
                })
            })
            this.setState({
                fileList
            })
        } else if (Picture && !Array.isArray(Picture)) {
            this.setState({
                fileList: [{
                    uid: 1,
                    name: 'image.png',
                    status: 'done',
                    url: imgUrl + Picture,
                },]
            })
        }
    }

    handleCancel = () => this.setState({ previewVisible: false });

    handlePreview = async file => {
        if (!file.url && !file.preview) {
            file.preview = await getBase64(file.originFileObj);
        }

        this.setState({
            previewImage: file.url || file.preview,
            previewVisible: true,
        });
    };

    handleChange = ({ fileList }) => {
        const { dispatch, type } = this.props;
        this.setState({
            fileList
        });
        if (type === 'mainPicture') {
            dispatch({
                type: "goods/mainPicture",
                payload: fileList
            });
        } else {
            dispatch({
                type: "goods/detailPicture",
                payload: fileList
            });
        }
    };

    render() {
        const { previewVisible, previewImage, fileList } = this.state;
        const { type } = this.props;
        const uploadButton = (
          <div>
            <Icon type="plus" />
            <div className="ant-upload-text">Upload</div>
          </div>
        );
        const token = localStorage.getItem("token");
        return (
          <div className="clearfix">
            <Upload
              action="/lazy-card/sysUser/uploadUserImg"
              listType="picture-card"
              fileList={fileList}
              data={{ type: 'goodsImg' }}
              onPreview={this.handlePreview}
              onChange={this.handleChange}
              headers={{
                        Authorization: token
                    }}
            >
              {type === 'mainPicture' && fileList.length >= 4 ? null : uploadButton}
            </Upload>
            <Modal maskClosable={false} visible={previewVisible} footer={null} onCancel={this.handleCancel}>
              <img alt="example" style={{ width: '100%' }} src={previewImage} />
            </Modal>
          </div>
        );
    }
}

const FormItem = Form.Item;
const { Option } = Select;
const CreateForm = Form.create()(props => {
    const { modalVisible, form, handleAdd, handleModalVisible, typeList } = props;
    const okHandle = () => {
        form.validateFields((err, fieldsValue) => {
            if (err) return;
            handleAdd(fieldsValue,form);
        });
    };


    return (
      <Modal
        maskClosable={false}
        destroyOnClose
        width={820}
        title="新增商品"
        visible={modalVisible}
        onOk={okHandle}
        onCancel={() => handleModalVisible()}
      >
        <Row>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 5 }} wrapperCol={{ span: 15 }} label="商品名">
              {form.getFieldDecorator('name', {
                            rules: [{ required: true, message: '请输入至多10个字符！', max: 10 }],
                        })(<Input placeholder="请输入" />)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 5 }} wrapperCol={{ span: 15 }} label="商品货号">
              {form.getFieldDecorator('productNo', {
                            rules: [{ required: true, pattern: /^[1-9]\d{0,4}$/, message: '最大五位数！' }],
                        })(<Input placeholder="请输入商品货号" />)}
            </FormItem>
          </Col>
        </Row>
        <Row>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 5 }} wrapperCol={{ span: 15 }} label="品牌名称">
              {form.getFieldDecorator('brandName', {
                            rules: [{ required: true, message: '请输入至多10个字符！', max: 10 }],
                        })(<Input placeholder="请输入" />)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 5 }} wrapperCol={{ span: 15 }} label="销售价格">
              {form.getFieldDecorator('price', {
                            rules: [{ required: true, pattern: /^\d{1,4}(\.\d{1,2})?$/, message: '价格不超过4位数，且最多两位小数！', min: 5 }],
                        })(<Input placeholder="请输入价格（元）" type="text" />)}
            </FormItem>
          </Col>
        </Row>
        <Row>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 5 }} wrapperCol={{ span: 15 }} label="库存">
              {form.getFieldDecorator('stock', {
                            rules: [{ required: true, pattern: /^[1-9]\d{0,4}$/, message: '最大五位数！' }],
                        })(<Input placeholder="请输入库存" />)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 5 }} wrapperCol={{ span: 15 }} label="分类">
              {form.getFieldDecorator('productCategoryId', {
                            rules: [{ required: true, message: '请选择分类！' }],
                        })(
                          <Select placeholder="请选择分类" style={{ width: '100%' }}>
                            {typeList && typeList.map(item => {
                                    return (
                                      <Option value={item.id} key={item.id}>{item.name}</Option>
                                    )
                                })}
                          </Select>
                        )}
            </FormItem>
          </Col>
        </Row>
        <Row>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 5 }} wrapperCol={{ span: 15 }} label="状态">
              {form.getFieldDecorator('publishStatus', {
                            rules: [{ required: true, message: '请选择状态！' }],
                        })(
                          <Select placeholder="请选择状态" style={{ width: '100%' }}>
                            <Option value={1}>上架</Option>
                            <Option value={0}>下架</Option>
                          </Select>
                        )}
            </FormItem>
          </Col>
        </Row>
        <FormItem labelCol={{ span: 5 }} wrapperCol={{ span: 15 }} label="主图/轮播图">
          {/* 改这里 */}
          {/* {form.getFieldDecorator('dsads', {
                            rules: [{ required: true, message: '请选择状态！' }],
                        })( */}
          <PicturesWall type="mainPicture" />
          {/* )} */}
        </FormItem>
        <FormItem labelCol={{ span: 5 }} wrapperCol={{ span: 15 }} label="详情图">
          <PicturesWall type="detailPicture" />
        </FormItem>
      </Modal>
    );
});

@Form.create()
class UpdateForm extends PureComponent {
    static defaultProps = {
        handleUpdate: () => { },
        handleUpdateModalVisible: () => { },
        values: {},
        typeList: []
    };

    render() {
        const { updateModalVisible, handleUpdateModalVisible, handleUpdate, values, form, typeList } = this.props;
        const okHandle = () => {
            form.validateFields((err, fieldsValue) => {
                if (err) return;
                form.resetFields();
                if (values.id) {
                    handleUpdate(fieldsValue, values.id, values.pic, values.pictures);
                }
            });
        };
        return (
          <Modal
            maskClosable={false}
            width={820}
            bodyStyle={{ padding: '32px 40px 48px' }}
            destroyOnClose
            title="编辑商品"
            visible={updateModalVisible}
            onOk={okHandle}
            onCancel={() => handleUpdateModalVisible(false, values)}
            afterClose={() => handleUpdateModalVisible()}
          >
            <Row>
              <Col span={24} md={24} lg={12}>
                <FormItem labelCol={{ span: 5 }} wrapperCol={{ span: 15 }} label="商品名">
                  {form.getFieldDecorator('name', {
                                initialValue: values.name,
                                rules: [{ required: true, message: '请输入至多10个字符！', max: 10 }],
                            })(<Input placeholder="请输入" />)}
                </FormItem>
              </Col>
              <Col span={24} md={24} lg={12}>
                <FormItem labelCol={{ span: 5 }} wrapperCol={{ span: 15 }} label="商品货号">
                  {form.getFieldDecorator('productNo', {
                                initialValue: values.productNo,
                                rules: [{ required: true, pattern: /^[1-9]\d{0,4}$/, message: '最大五位数！' }],
                            })(<Input placeholder="请输入商品货号" />)}
                </FormItem>
              </Col>
            </Row>
            <Row>
              <Col span={24} md={24} lg={12}>
                <FormItem labelCol={{ span: 5 }} wrapperCol={{ span: 15 }} label="品牌名称">
                  {form.getFieldDecorator('brandName', {
                                initialValue: values.brandName,
                                rules: [{ required: true, message: '请输入至多10个字符！', max: 10 }],
                            })(<Input placeholder="请输入" />)}
                </FormItem>
              </Col>
              <Col span={24} md={24} lg={12}>
                <FormItem labelCol={{ span: 5 }} wrapperCol={{ span: 15 }} label="销售价格">
                  {form.getFieldDecorator('price', {
                                initialValue: values.price,
                                rules: [{ required: true, pattern: /^\d{1,4}(\.\d{1,2})?$/, message: '价格不超过4位数，且最多两位小数！', min: 5 }],
                            })(<Input placeholder="请输入价格（元）" type="text" />)}
                </FormItem>
              </Col>
            </Row>
            <Row>
              <Col span={24} md={24} lg={12}>
                <FormItem labelCol={{ span: 5 }} wrapperCol={{ span: 15 }} label="库存">
                  {form.getFieldDecorator('stock', {
                                initialValue: values.stock,
                                rules: [{ required: true, pattern: /^[1-9]\d{0,4}$/, message: '最大五位数！' }],
                            })(<Input placeholder="请输入库存" />)}
                </FormItem>
              </Col>
              <Col span={24} md={24} lg={12}>
                <FormItem labelCol={{ span: 5 }} wrapperCol={{ span: 15 }} label="分类">
                  {form.getFieldDecorator('productCategoryId', {
                                initialValue: values.productCategoryId,
                                rules: [{ required: true, message: '请选择分类！' }],
                            })(
                              <Select placeholder="请选择分类" style={{ width: '100%' }}>
                                {typeList && typeList.map(item => {
                                        return (
                                          <Option value={item.id} key={item.id}>{item.name}</Option>
                                        )
                                    })}
                              </Select>
                            )}
                </FormItem>
              </Col>
            </Row>
            <Row>
              <Col span={24} md={24} lg={12}>
                <FormItem labelCol={{ span: 5 }} wrapperCol={{ span: 15 }} label="状态">
                  {form.getFieldDecorator('publishStatus', {
                                initialValue: values.publishStatus,
                                rules: [{ required: true, message: '请选择状态！' }],
                            })(
                              <Select placeholder="请选择分类" style={{ width: '100%' }}>
                                <Option value={1}>上架</Option>
                                <Option value={0}>下架</Option>
                              </Select>
                            )}
                </FormItem>
              </Col>
            </Row>
            <FormItem labelCol={{ span: 5 }} wrapperCol={{ span: 15 }} label="主图/轮播图">
              <PicturesWall type="mainPicture" Picture={values.pictures} />
            </FormItem>
            <FormItem labelCol={{ span: 5 }} wrapperCol={{ span: 15 }} label="详情图">
              <PicturesWall type="detailPicture" Picture={values.pic} />
            </FormItem>
          </Modal>

        );
    }
}
// const statusMap = ['default', 'processing', 'success', 'error'];
const statusMap = ['error', 'processing'];
const status = ['下架', '上架中'];
const getValue = obj =>
    Object.keys(obj)
        .map(key => obj[key])
        .join(',');
/* eslint react/no-multi-comp:0 */
@connect(({ goods, loading }) => ({
    goods,
    loading: loading.models.rule,
}))
@Form.create()
class GoodsControl extends PureComponent {
    state = {
        modalVisible: false,
        updateModalVisible: false,
        selectedRows: [],
        formValues: {},
        updateFormValues: {},
        currentRecord: [],
        pageSize: 10,
        currentPage: 1
    };

    static defaultProps = {
        goods: {
            typeList: [],
            list: {},
        },
    };

    columns = [
        {
            title: '商品主图',
            dataIndex: 'pic',
            key: 'pic',
            render: path => <img src={imgUrl + path} style={{ height: "80px", width: "80px" }} alt="商品主图" />,
        },
        {
            title: '商品名',
            dataIndex: 'name',
            key: 'name',
            render: name => <a onClick={() => this.previewItem(name)}>{name}</a>,
        },
        {
            title: '销售价格（元）',
            dataIndex: 'price',
            key: 'price',
        },
        {
            title: '上下架',
            dataIndex: 'publishStatus',
            key: 'publishStatus',
            filters: [
                {
                    text: status[0],
                    value: 0,
                },
                {
                    text: status[1],
                    value: 1,
                },
            ],
            render(val) {
                return <Badge status={statusMap[val]} text={status[val]} />;
            },
        },
        {
            title: '创建时间 ',
            dataIndex: 'createTime',
            // sorter: true,
            render: val => val && <span>{moment(val).format('YYYY-MM-DD HH:mm:ss')}</span>,
        },
        {
            title: '库存',
            dataIndex: 'stock',
        },
        {
            title: '分类',
            dataIndex: 'productCategoryName',
        },
        {
            title: '操作',
            render: (text, record) => (
              <Fragment>
                <a onClick={() => this.handleUpdateModalVisible(true, record)}>编辑</a>
                <a style={{ marginLeft: "10px" }} onClick={() => this.handleShowModalVisible(true, record)}>查看</a>
              </Fragment>
            ),
        },
    ];

    componentDidMount() {
        const { dispatch } = this.props;
        dispatch({
            type: 'goods/fetchType',
            payload: {}
        });
        dispatch({
            type: 'goods/fetch',
            payload: {
                pageNo: 1,
                pageSize: 10
            }
        });
    }

    handleStandardTableChange = (pagination, filtersArg, sorter) => {
        const { dispatch } = this.props;
        const { formValues, pageSize } = this.state;

        const filters = Object.keys(filtersArg).reduce((obj, key) => {
            const newObj = { ...obj };
            newObj[key] = getValue(filtersArg[key]);
            return newObj;
        }, {});

        const params = {
            pageNo: pagination.current,
            pageSize,
            ...formValues,
            ...filters,
        };
        this.setState({
            currentPage: pagination.current
        });

        dispatch({
            type: 'goods/fetch',
            payload: params,
        });
    };

    previewItem = id => {
        router.push(`/profile/basic/${id}`);
    };

    handleFormReset = () => {
        const { form, dispatch } = this.props;
        const { pageSize } = this.state;
        form.resetFields();
        this.setState({
            formValues: {},
            currentPage: 1
        });
        dispatch({
            type: 'goods/fetch',
            payload: {
                pageNo: 1,
                pageSize,
            },
        });
    };


    handleMenuClick = e => {
        const { dispatch } = this.props;
        const { selectedRows } = this.state;
        if (selectedRows.length === 0) return;
        const payload = {
            ids: selectedRows.map(row => row.id),
        };
        switch (e.key) {
            case 'remove':
                payload.flag = "del";
                dispatch({
                    type: 'goods/deleteHideShow',
                    payload,
                    callback: () => {
                        this.setState({
                            selectedRows: [],
                        });
                    },
                });
                break;
            case 'up':
                payload.flag = "up";
                dispatch({
                    type: 'goods/deleteHideShow',
                    payload,
                    callback: () => {
                        this.setState({
                            selectedRows: [],
                        });
                    },
                });
                break;
            case 'down':
                payload.flag = "down";
                dispatch({
                    type: 'goods/deleteHideShow',
                    payload,
                    callback: () => {
                        this.setState({
                            selectedRows: [],
                        });
                    },
                });
                break;
            default:
                break;
        }
    };

    handleSelectRows = rows => {
        this.setState({
            selectedRows: rows,
        });
    };

    handleSearch = e => {
        e.preventDefault();
        const { dispatch, form } = this.props;
        const { pageSize } = this.state;

        form.validateFields((err, fieldsValue) => {
            if (err) return;

            const values = {
                ...fieldsValue,
            };

            this.setState({
                currentPage: 1,
                formValues: values,
            });

            dispatch({
                type: 'goods/fetch',
                payload: {
                    ...values,
                    "pageNo": 1,
                    "pageSize": pageSize,
                }
            });
        });
    };

    handleModalVisible = flag => {
        this.setState({
            modalVisible: !!flag,
        });
    };

    handleUpdateModalVisible = (flag, record) => {
        this.setState({
            updateModalVisible: !!flag,
            updateFormValues: record || {},
        });
    };

    handleShowModalVisible = (flag, record) => {
        this.setState({
            detailModalVisible: !!flag,
            currentRecord: record || {},
        });
    };

    handleAdd = (fields,form) => {
        const { dispatch, goods } = this.props;
        const mainPicture = goods.mainPicture ? goods.mainPicture.map((item) => {
            const path = item.response ? item.response.data.path : '';
            return path;
        }) : '';
        const detailPicture = goods.detailPicture ? goods.detailPicture[0].response.data.path : '';
        // 判断主图详情图是否存在
        if(mainPicture && detailPicture){
            dispatch({
                type: 'goods/add',
                payload: {
                    ...fields,
                    pictures: mainPicture,
                    pic: detailPicture,
                },
            }).then((res) => {
                if (res.code === "SUCCESS") {
                    form.resetFields();
                    this.handleModalVisible();
                }
            });
        }else{
            notification.error({
                message: "错误",
                description: "请上传商品图片",
              });
        }
        
    };

    handleUpdate = (fields, id, pic, pictures) => {
        const { dispatch, goods } = this.props;
        const payload = { id, ...fields };
        if (goods.mainPicture) {
            const mainPicture = goods.mainPicture.map((item) => {
                const path = item.response ? item.response.data.path : '';
                return path;
            })
            payload.pictures = mainPicture;
        } else {
            payload.pictures = pictures;
        }
        if (goods.detailPicture) {
            const detailPicture = goods.detailPicture[0].response ? goods.detailPicture[0].response.data.path : '';
            payload.pic = detailPicture;
        } else {
            payload.pic = pic;
        }
        dispatch({
            type: 'goods/update',
            payload
        });
        this.handleUpdateModalVisible();
    };

    renderForm() {
        const {
            form: { getFieldDecorator },
            goods: { typeList }
        } = this.props;
        return (
          <Form onSubmit={this.handleSearch} layout="inline">
            <Row gutter={{ md: 8, lg: 24, xl: 48 }}>
              <Col md={8} sm={24}>
                <FormItem label="商品名">
                  {getFieldDecorator('name')(<Input placeholder="请输入" />)}
                </FormItem>
              </Col>
              <Col md={8} sm={24}>
                <FormItem label="类型">
                  {getFieldDecorator('productCategoryId')(
                    <Select placeholder="请选择" style={{ width: '100%' }}>
                      {typeList && typeList.map(item => {
                                        return (
                                          <Option value={item.id} key={item.id}>{item.name}</Option>
                                        )
                                    })}

                    </Select>
                            )}
                </FormItem>
              </Col>
              <Col md={8} sm={24}>
                <FormItem label="商品状态">
                  {getFieldDecorator('publishStatus')(
                    <Select placeholder="请选择状态" style={{ width: '100%' }}>
                      <Option value={1}>上架</Option>
                      <Option value={0}>下架</Option>
                    </Select>
                            )}
                </FormItem>
              </Col>
            </Row>
            <Row>
              <Col sm={24}>
                <span className={styles.submitButtons}>
                  <Button type="primary" htmlType="submit">
                                查询
                  </Button>
                  <Button style={{ marginLeft: 8 }} onClick={this.handleFormReset}>
                                重置
                  </Button>
                </span>
              </Col>
            </Row>
          </Form>
        );
    }

    render() {
        const {
            goods: { typeList, list },
            loading,
        } = this.props;
        const { selectedRows, modalVisible, updateModalVisible, updateFormValues, detailModalVisible, currentRecord, currentPage, pageSize } = this.state;
        const menu = (
          <Menu onClick={this.handleMenuClick} selectedKeys={[]}>
            <Menu.Item key="remove">删除</Menu.Item>
            <Menu.Item key="up">上架</Menu.Item>
            <Menu.Item key="down">下架</Menu.Item>
          </Menu>
        );
        const pagination = {
            current: currentPage,
            pageSize,
            total: list.total,
        }

        const parentMethods = {
            handleAdd: this.handleAdd,
            handleModalVisible: this.handleModalVisible,
        };
        const updateMethods = {
            handleUpdateModalVisible: this.handleUpdateModalVisible,
            handleUpdate: this.handleUpdate,
        };
        return (
          <PageHeaderWrapper title="商品管理">
            <Card bordered={false}>
              <div className={styles.tableList}>
                <div className={styles.tableListForm}>{this.renderForm()}</div>
                <div className={styles.tableListOperator}>
                  <Button icon="plus" type="primary" onClick={() => this.handleModalVisible(true)}>
                                新建
                  </Button>
                  {selectedRows.length > 0 && (
                    <span>
                      <Button>批量操作</Button>
                      <Dropdown overlay={menu}>
                        <Button>
                                            更多操作 <Icon type="down" />
                        </Button>
                      </Dropdown>
                    </span>
                            )}
                </div>
                <StandardTable
                  rowKey='id'
                  rowClassName="textCenter"
                  selectedRows={selectedRows}
                  loading={loading}
                  data={list.rows}
                  pagination={pagination}
                  columns={this.columns}
                  onSelectRow={this.handleSelectRows}
                  onChange={this.handleStandardTableChange}
                />
              </div>
            </Card>
            <Modal
              maskClosable={false}
              destroyOnClose
              title="请求详情"
              visible={detailModalVisible}
              width={820}
              okText="确定"
              cancelText="取消"
              onCancel={() => this.handleShowModalVisible()}
              onOk={() => this.handleShowModalVisible()}
            >
              {currentRecord &&
                <DescriptionList col={2} layout="horizontal">
                  <Description term="商品名">{currentRecord.name}</Description>
                  <Description term="商品货号">{currentRecord.productNo}</Description>
                  <Description term="价格">{currentRecord.price}</Description>
                  <Description term="分类">{currentRecord.productCategoryName}</Description>
                  <Description term="上架状态">{currentRecord.publishStatus === 0 ? "下架" : "上架"}</Description>
                  <Description term="销量">{currentRecord.sale}</Description>
                  <Description term="数量 ">{currentRecord.stock}</Description>
                  <Description term="创建时间">{currentRecord.createTime}</Description>
                </DescriptionList>
                    }
            </Modal>
            <CreateForm {...parentMethods} modalVisible={modalVisible} typeList={typeList} />
            {updateFormValues && Object.keys(updateFormValues).length ? (
              <UpdateForm
                {...updateMethods}
                updateModalVisible={updateModalVisible}
                values={updateFormValues}
                typeList={typeList}
              />
                ) : null}
          </PageHeaderWrapper>
        );
    }
}

export default GoodsControl;
