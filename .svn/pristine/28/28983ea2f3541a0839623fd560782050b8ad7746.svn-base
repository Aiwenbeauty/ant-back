import React, { PureComponent, Fragment } from 'react';
import { connect } from 'dva';
import { formatMessage, FormattedMessage } from 'umi-plugin-react/locale';
import moment from 'moment';
import router from 'umi/router';
import {message, DatePicker,Popconfirm,Row, Col, Card, Form, Input, Select, Icon, Button, Dropdown, Menu, Modal, Tag,Table,TimePicker,Upload } from 'antd';
import StandardTable from '@/components/StandardTable';
import DescriptionList from '@/components/DescriptionList';
import PageHeaderWrapper from '@/components/PageHeaderWrapper';
import OperateTable from '@/components/OperateTable';
import Authorized from '@/utils/Authorized';
import CryptoJS from 'crypto-js';
import imgUrl from '@/global';

import styles from './payChannel.less';
const token = localStorage.getItem('token');
const FormItem = Form.Item;
const { TextArea } = Input;
const { confirm } = Modal;
const { Option } = Select;
const { RangePicker } = DatePicker;
const { Description } = DescriptionList;
const Modular = ['代理商管理','通道配置'];
const operateType = ['新增','编辑','删除','设置无效','设置有效'];

@Form.create()
@connect(({operate }) => ({
  operate,
}))
class CreateForm extends React.Component {
  // CreateForm 主件 传入
  constructor(props) {
    super(props)
    this.state = {
      previewVisible: false,

    }
  }

  render() {
    const { modalVisible, form, handleAdd, handleModalVisible,operate} = this.props;
    const { previewVisible } = this.state;
    const okHandle = () => {
      form.validateFields((err, fieldsValue) => {
        if (err) return;
        if (this.props.values) { // 编辑
          fieldsValue.id = this.props.values.id
        }

        form.resetFields();
        const addValue = {
          ...fieldsValue
        }
        handleAdd(addValue);
      });
    };
    const row = this.props.values ? this.props.values : { name: "", code: "", memo: "" }
    const title = this.props.values ? "编辑" : "新建";
    let operateRecordList;
    if(this.props.values){
       operateRecordList = operate.operateRecordList.data.rows;
    }
    return (
      <Modal maskClosable={false}
        destroyOnClose
        width={840}
        title={title}
        visible={modalVisible}
        onOk={okHandle}
        onCancel={() => handleModalVisible()}
      >
        <Form.Item labelCol={{ span: 5 }} wrapperCol={{ span: 15 }} label="通道名称">
          {form.getFieldDecorator('name', {
            initialValue: row.name,
            rules: [{ required: true, message: '请输入正确的通道名称!' }],
          })(
            <Input prefix={<Icon type="lock" style={{ color: 'rgba(0,0,0,.25)' }} />} type="text" placeholder="请输入正确的通道名称" />
          )}
        </Form.Item>

        <Form.Item labelCol={{ span: 5 }} wrapperCol={{ span: 15 }} label="通道编码">
          {form.getFieldDecorator('code', {
            initialValue: row.code,
            rules: [{ required: true, message: '请输入正确的通道编码!' }],
          })(
            <Input prefix={<Icon type="lock" style={{ color: 'rgba(0,0,0,.25)' }} />} type="text" placeholder="请输入正确的通道编码" />
          )}
        </Form.Item>

        <Form.Item labelCol={{ span: 5 }} wrapperCol={{ span: 15 }} label="费率">
          {form.getFieldDecorator('rate', {
            initialValue: row.rate,
            rules: [{ required: true, message: '请输入正确的费率!' }],
          })(
            <Input  type="text" placeholder="请输入正确的费率" />
          )}
        </Form.Item>

        <Form.Item labelCol={{ span: 5 }} wrapperCol={{ span: 15 }} label="代付手续费">
          {form.getFieldDecorator('withdrawFee', {
            initialValue: row.withdrawFee,
            rules: [{ required: true, message: '请输入正确的代付手续费!' }],
          })(
            <Input  type="text" placeholder="请输入正确的代付手续费" />
          )}
        </Form.Item>

        <Form.Item labelCol={{ span: 5 }} wrapperCol={{ span: 15 }} label="通道描述">
          {form.getFieldDecorator('memo', {
            initialValue: row.memo,
            rules: [{ required: true, message: '请输入正确的通道描述!' }],
          })(
            <TextArea rows={4} placeholder="请输入正确的通道描述" />
          )}
        </Form.Item>
        {
         this.props.values ? 
         <DescriptionList layout="horizontal" title="操作记录" style={{ marginTop: 20 }}>
         <OperateTable
           RecordList={operateRecordList}
           moduleName={Modular}
           operateType={operateType}
         />
       </DescriptionList>
         :
         null 

        }
      </Modal>
    );
  }
}

// 查看详情
@Form.create()
@connect(({ payChannel, loading,operate }) => ({
  payChannel,operate,
  loading: loading.models.rule,
}))
class DetailsForm extends PureComponent {
  static defaultProps = {
    seeChannel: () => { },
    values: {},
  };

  render() {
    const { seeChannelModalVisible, seeChannel, values, form } = this.props;
     const { operate} = this.props;
     const operateRecordList  = operate.operateRecordList.data.rows;
    const okHandle = () => {
      form.validateFields((err, fieldsValue) => {
        if (err) return;
        form.resetFields();
      });
    };

    return (
      <Modal
        maskClosable={false}
        width={1000}
        bodyStyle={{ padding: '32px 40px 48px' }}
        destroyOnClose
        title="查看通道配置详情"
        visible={seeChannelModalVisible}
        onOk={okHandle}
        footer={null}
        onCancel={() => seeChannel(false, values)}
        afterClose={() => seeChannel()}
      >
        <DescriptionList col={3} layout="horizontal" title="通道配置详情">
        <Description term="通道名称">{values.name}</Description>
        <Description term="通道编码">{values.code}</Description>
        <Description term="通道状态">{values.status === "1" ? "有效" : "无效"}</Description>
        <Description term="费率">{values.rate}</Description>
        <Description term="代付手续费">{values.withdrawFee}</Description>
        <Description term="描述">{values.memo}</Description>
        <Description term="创建时间">{moment(values.created).format('YYYY-MM-DD HH:mm:ss')}</Description>
        <Description term="更新时间">{moment(values.updateTime).format('YYYY-MM-DD HH:mm:ss')}</Description>
        
        </DescriptionList>
        <DescriptionList layout="horizontal" title="操作记录" style={{ marginTop: 20 }}>
          <OperateTable
            RecordList={operateRecordList}
            moduleName={Modular}
            operateType={operateType}
          />
        </DescriptionList> 
      </Modal>
    );
  }
}
/** ************************************************ */
// 编辑
@connect(({ payChannel,operate }) => ({
  payChannel,
  operate,
}))
@Form.create()
class AddForm extends PureComponent {
  constructor(props) {
    super(props)
    this.state = {

    };
  }
  static defaultProps = {
    modifyTrade: () => { },
    addPayChannelDetails: () => { },
    values: {}
  };

  render() {
    const { addModalVisible, addPayChannelDetails, modifyTrade, values, form,typeChannel,channeBankList } = this.props;
    const { getFieldDecorator } = this.props.form;
    let code = "";
    if(typeChannel === "upd"){
      code = values.channelNumber;
      // operateRecordList = operate.operateRecordList.data.rows;
    }else{
      code = values.code;
    }
    const okHandle = () => {
      form.validateFields((err, fieldsValue) => {
        if (err) return;
        form.resetFields();
        if (values.id) {
          modifyTrade(fieldsValue, values,typeChannel);
        }
      });
    };
    function handleChange(value) {
      console.log(`selected ${value.key}`);
    }
    return (
      <Modal maskClosable={false}
        width={1000}
        bodyStyle={{ padding: '32px 40px 48px' }}
        destroyOnClose
        title={typeChannel === "upd" ? "编辑" : "添加" }
        visible={addModalVisible}
        onOk={okHandle}
        onCancel={() => addPayChannelDetails(false, values)}
        afterClose={() => addPayChannelDetails()}
      >
        <Row gutter={{ md: 8, lg: 24, xl: 48 }}>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="通道编码">
              {form.getFieldDecorator('channelNumber', {
                rules: [],
                initialValue: code,
              })(<Input disabled />)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="业务类型">
              {form.getFieldDecorator('status', {
                rules: [],
                initialValue: values.status,
              })(
                <Select style={{ width: '100%' }}>
                  <Option value="0">请选择</Option>
                  <Option value="1">快捷支付</Option>
                  <Option value="2">网银支付</Option>
                  <Option value="3">支付宝扫码</Option>
                  <Option value="4">app支付</Option>
                </Select>
              )}
            </FormItem>
          </Col>
        </Row>
        <Row gutter={{ md: 8, lg: 24, xl: 48 }}>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="银行名称">
              {form.getFieldDecorator('bankName', {
                rules: [],
                initialValue: values.bankName,
              })(
                <Select placeholder="请选择" style={{ width: '100%' }}  showSearch={true} 
                onSelect={(value) => {
                  channeBankList.forEach(item => {
                    if (item.bankName === value) {
                       form.setFieldsValue({
                        bankCode:item.bankCode,
                      });
                      }
                    });
                }}>    
                {channeBankList && channeBankList.map(item => {
                  return (
                    <Option value={item.bankName} key={item.id}>{item.bankName}</Option>
                  )
                })}
              </Select>
              )}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="银行简称">
              {form.getFieldDecorator('bankCode', {
                rules: [],
                initialValue: values.bankCode,
              })(<Input disabled />)}
            </FormItem>
          </Col>
        </Row>
        <Row gutter={{ md: 8, lg: 24, xl: 48 }}>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="日交易限额">
              {form.getFieldDecorator('dayQuota', {
                rules: [],
                initialValue: values.dayQuota,
              })(<Input />)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="月累计限额">
              {form.getFieldDecorator('monthQuota', {
                rules: [],
                initialValue: values.monthQuota,
              })(<Input placeholder="请输入" />)}
            </FormItem>
          </Col>
        </Row>
        <Row gutter={{ md: 8, lg: 24, xl: 48 }}>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="交易费率%">
              {form.getFieldDecorator('transactionRate', {
                rules: [],
                initialValue: values.transactionRate,
              })(<Input />)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="单笔费率">
              {form.getFieldDecorator('singleRate', {
                rules: [],
                initialValue: values.singleRate,
              })(<Input placeholder="请输入" />)}
            </FormItem>
          </Col>
        </Row>
        <Row gutter={{ md: 8, lg: 24, xl: 48 }}>
        <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="单笔限额">
              {form.getFieldDecorator('singleQuota', {
                rules: [],
                initialValue: values.singleQuota,
              })(<Input placeholder="请输入" />)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="交易开始时间">
              {form.getFieldDecorator('startTime', {
                rules: [],
                // initialValue: values.startTime == null ? null :moment(values.startTime, 'YYYY/MM/DD')
                initialValue:values.startTime != null ? moment( values.startTime,'HH:mm:ss'):null,
              })( <TimePicker
                   placeholder = "开始时间"
                   onChange={onchange}/>)}~
               {form.getFieldDecorator('endTime', {
                rules: [],
                // initialValue: values.startTime == null ? null :moment(values.startTime, 'YYYY/MM/DD')
                initialValue:values.endTime != null ? moment( values.endTime,'HH:mm:ss'):null,
              })( <TimePicker
                   placeholder = "结束时间"
                   onChange={onchange}/>)}
            </FormItem>
          </Col>
          {/* <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="交易结束时间">
              {form.getFieldDecorator('endTime', {
                rules: [],
                initialValue: values.endTime == null ? null : moment(values.endTime, 'YYYY/MM/DD')
              })(<DatePicker />)}
            </FormItem>
          </Col> */}
        </Row>
      </Modal>

    );
  }
}



/**
 * 请求组件 需放在主class 上面
 */
@connect(({ payChannel,operate }) => ({
  payChannel,operate
}))
@Form.create()
class payChannel extends PureComponent {
  state = {
    modalVisible: false,
    addModalVisible: false,
    typeChannel :"",
    selectedRows: [],
    formValues: {},
    record: {},
    detailsList: [],
    a:[],
    channeBankList:[]
  };

  /**
   * 初始化数据
   */
  static defaultProps = {
    payChannel: {
      list: []
    },
  };

  columns = [
    {
      title: '通道名称',
      dataIndex: 'name',
      key: 'name',
      render: (item,record) => {
        return(
          item == null ? <a onClick={() => this.seeChannel(true, record)}> {record.username} </a>  :
          <a onClick={() => this.seeChannel(true, record)}> {item} </a> 
        )
      }
    },
    {
      title: '通道编码',
      dataIndex: 'code',
      key: 'code',
    },
    {
      title: '描述',
      dataIndex: 'memo',
      key: 'memo',
    },
    {
      title: '通道状态',
      dataIndex: 'status',
      key: 'status',
      render: val => val === "1" ? <Tag color='green'>有效</Tag> : <Tag color='red'>无效</Tag>

    },
    {
      title: '创建时间',
      dataIndex: 'created',
      key: 'created',
      render: val => val && <span>{moment(val).format('YYYY-MM-DD HH:mm:ss')}</span>
    },
    {
      title: '更新时间',
      dataIndex: 'updateTime',
      key: 'updateTime',
      render: val => val && <span>{moment(val).format('YYYY-MM-DD HH:mm:ss')}</span>
    },
    {
      title: '操作',
      render: (text, record) => (
        <Fragment>
          <a onClick={() => this.handleModalVisible(true, record)}>编辑</a>&nbsp;&nbsp;&nbsp;&nbsp;
          <a onClick={() => this.addPayChannelDetails(true, record,'save')}>添加子属性</a>
        </Fragment>
      ),
    },
  ];



  /**
   * 初始化加载数据
   */
  componentDidMount() {
    const { dispatch } = this.props;
    dispatch({
      type: 'payChannel/fetch',
      payload: {}
    });
  }

  /**
   * 选择行数据
   */
  handleSelectRows = rows => {
    this.setState({
      selectedRows: rows,
    });
  };

  /**
   * 删除数据
   */
  handleMenuClick = e => {
    const { dispatch } = this.props;
    const { selectedRows } = this.state;
    if (selectedRows.length === 0) return;
    const params = [];
    selectedRows.map(item => {
      const data = {
        id: item.id,
        status: e.key
      }
      params.push(data)
    })

    const title = e.key === "1" ? '你确定要设置该通道状态有效吗?' : '你确定要设置该通道状态无效吗?'

    confirm({
      title,
      onOk() {

        dispatch({
          type: 'payChannel/remove',
          payload: params,
          callback: () => {
            this.setState({
              selectedRows: [],
            });
          },
        }).then(result => {
        }).catch(err => {
        });
        // setTimeout(Math.random() > 0.5 ? resolve : reject, 1000);

      },
      onCancel() { },
    });

  };


  /**
   * 操作弹框
   */
  handleModalVisible = (flag, record) => {
    const { dispatch } = this.props;
    this.setState({
      modalVisible: !!flag,
      record
    });
    if(record){
      dispatch({
        type: 'operate/fetch',
        payload: {
          modularType:"1",
          dataId:record.id
        },
      })
    }
  };

  //下载模板
  download = (flag) =>{
    location.href = `${imgUrl}/download/子通道属性.xlsx`;
  }
  /**
   * 保存类别
   */
  handleAdd = fields => {
    const { dispatch } = this.props;
    dispatch({
      type: 'payChannel/add',
      payload: fields,
    });

    this.handleModalVisible();
  };


  /**
   * 分页查询动作
   */
  handleStandardTableChange = (pagination, sorter) => {
    const { dispatch } = this.props;
    const { formValues } = this.state;
    const params = {
      currentPage: pagination.current,
      pageSize: pagination.pageSize,
      ...formValues,
    };
    if (sorter.field) {
      params.sorter = `${sorter.field}_${sorter.order}`;
    }
    dispatch({
      type: 'payChannel/fetch',
      payload: params,
    });
  };

  // 添加通道子属性弹框
  addPayChannelDetails = (flag, record,Channel) => {
    const { dispatch } = this.props;
    dispatch({
      type: 'payChannel/bankALL',  
    })
    this.setState({
      addModalVisible: !!flag,
      addFormValues: record || {},
      typeChannel :Channel,
    });
  };

  // 编辑确定
  modifyTrade = (fields, values,Channel) => {
    const { dispatch } = this.props;
    let ids = null;
    let channelNumber = values.code; 
    debugger
    fields.startTime = fields.startTime != null ? fields.startTime.format('HH:mm:ss') : null;
    fields.endTime = fields.endTime != null ? fields.endTime.format('HH:mm:ss') : null;
    if(Channel === "upd"){
        ids = values.id;
        channelNumber = values.channelNumber;
    }
    dispatch({
      type: 'payChannel/addDetails',
      payload: {
        ...fields,
        channelId: values.channelId,
        id:ids,
        channelNumber: channelNumber
      }
    });
    this.addPayChannelDetails();
  };

  fetchDetailsList = (expanded, record) => {
    const { dispatch } = this.props;
    if(expanded){
      dispatch({
        type: 'payChannel/detailsList',
        payload: {
          channelNumber: record.code
        }
      }).then(()=>{ 
      });
    }
  }


  //禁用
  prohibit = (flag, record) => {
    const { dispatch } = this.props;
    if (flag) {
      dispatch({
        type: 'payChannel/updataType',
        payload: {
          id : record.id,
          type : "0",
          channelNumber:record.channelNumber
        }
      }).then(() => {
        // message.success('禁用成功');
      });
    }
  }
  //启用
  enable = (flag, record) => {
    const { dispatch } = this.props;
    if (flag) {
      dispatch({
        type: 'payChannel/updataType',
        payload: {
          id:record.id,
          type: "1",
          channelNumber:record.channelNumber
        }
      }).then(() => {
        
      });
    }
  }
  // 查看
  seeChannel = (flag, record) => {
    const { dispatch } = this.props;
    this.setState({
      seeChannelModalVisible: !!flag,
      seeChannelFormValues: record || {},
    });
    if(flag){
      dispatch({
        type: 'operate/fetch',
        payload: {
          modularType:"1",
          dataId:record.id
        },
      })
    }
  }
 //取消提示
 cancel = (e) => {
  // message.error('Click on No');
}

  expandedRowRender = (record, index, indent, expanded) => {
  const statusName = ['','快捷支付','网银支付','支付宝扫码','app支付'];
  const columns1 = [
    {
      title: '通道编号',
      dataIndex: 'channelNumber',
      key: 'channelNumber',
    },
    {
      title: '业务类型',
      dataIndex: 'status',
      key: 'record',
      render: (item) => {
        return(
          statusName[item]
        )
      }
    },
    {
      title: '银行名称',
      dataIndex: 'bankName',
      key: 'bankName',
    },
    {
      title: '银行简称',
      dataIndex: 'bankCode',
      key: 'bankCode',
    },
    {
      title: '单笔限额',
      dataIndex: 'singleQuota',
      key: 'singleQuota',
    },
    {
      title: '日交易限额',
      dataIndex: 'dayQuota',
      key: 'dayQuota',
    },
    {
      title: '月累计限额',
      dataIndex: 'monthQuota',
      key: 'monthQuota',
    },
    {
      title: '交易费率%',
      dataIndex: 'transactionRate',
      key: 'transactionRate',
    },
    {
      title: '单笔费率',
      dataIndex: 'singleRate',
      key: 'singleRate',
    },
    {
      title: '是否有效',
      dataIndex: 'type',
      key: 'type',
      render: val => val === "1" ? <Tag color='green'>有效</Tag> : <Tag color='red'>无效</Tag>
    },
    {
      title: '操作',
      render: (text, record) => (
        <Fragment>
          <a onClick={() => this.addPayChannelDetails(true, record,"upd")}>编辑</a>&nbsp;&nbsp;&nbsp;&nbsp;
          {
              record.type === "0" ?
                <Popconfirm
                  title="确定启用吗"
                  onConfirm={() => this.enable(true, record)}
                  onCancel={() => this.cancel(true, record)}
                  okText="确定"
                  cancelText="取消"
                >
                  <a href="#">启用</a>
                </Popconfirm>
                :
                <Popconfirm
                  title="确定禁用吗"
                  onConfirm={() => this.prohibit(true, record)}
                  onCancel={() => this.cancel(true, record)}
                  okText="确定"
                  cancelText="取消"
                >
                  <a href="#">禁用</a>
                </Popconfirm>
            }
        </Fragment>
      ),
    },
  ]
  const { payChannel } = this.props;
  const {payDetailsList} = payChannel;
    return <StandardTable columns={columns1} dataSource={payDetailsList}/>;
  }

  onExpandedRowsChange = (expandedRows) => {
    var a = [];
  if(expandedRows.length !== 0){
    a.push(expandedRows[expandedRows.length-1]);
  }
  this.setState({a});
  }

  render() {
    const {
      payChannel,
      dispatch,
    } = this.props;
    const payChannelList = payChannel.list;
    const channeBankList = payChannel.channeBankList;
    const { selectedRows, modalVisible, record, addModalVisible, addFormValues,typeChannel,seeChannelModalVisible,seeChannelFormValues} = this.state;
    const data1 = [];

    const parentMethods = {
      handleAdd: this.handleAdd,
      handleModalVisible: this.handleModalVisible,
    };
    
    // 添加通道
    const detailsMethods = {
      addPayChannelDetails: this.addPayChannelDetails,
      modifyTrade: this.modifyTrade,
    };
    const lookMethods = {
      seeChannel: this.seeChannel,
    };
    const menu = (
      <Menu onClick={this.handleMenuClick} selectedKeys={[]}>
        <Menu.Item key="1">设置有效</Menu.Item>
        <Menu.Item key="0">设置无效</Menu.Item>
      </Menu>
    );
    const props = {
      name: 'file',
      action: '/lazy-card/payChannel/uploadChannelDetails',
      headers: {
        Authorization: token
     },
     onChange(info) {
      const { status } = info.file;
      if (status === 'done') {
          message.success(`${info.file.name} 上传成功`);
      } else if (status === 'error') {
          message.error(`${info.file.name} 上传失败`);
      }
  },
    };
    return (
      <PageHeaderWrapper title="通道配置">
        <Card bordered={false}>
          <div className={styles.tableList}>
            <div className={styles.tableListOperator}>
              <Button icon="plus" type="primary" onClick={() => this.handleModalVisible(true)}>
                新建
              </Button>
              <Button icon="download" type="primary" onClick={()=> this.download(true)}>
                下载模板
              </Button>
              <Upload {...props}>
                <Icon type="upload" />导入excel子通道属性
              </Upload>
              {selectedRows.length > 0 && (
                <span>
                  <Dropdown overlay={menu}>
                    <Button> 更多操作 <Icon type="down" /></Button>
                  </Dropdown>
                </span>
              )}
            </div>
            <StandardTable
              rowKey='id'
              selectedRows={selectedRows}
              data={payChannelList}
              columns={this.columns}
              onSelectRow={this.handleSelectRows}
              expandedRowRender={this.expandedRowRender}
              onExpandedRowsChange = {this.onExpandedRowsChange}
              expandedRowKeys={this.state.a}
              onExpand={this.fetchDetailsList} 
              expandRowByClick
              onChange={this.handleStandardTableChange}
            />
          </div>
        </Card>
        {addFormValues && Object.keys(addFormValues).length ?
          <AddForm
            {...detailsMethods}
            addModalVisible={addModalVisible}
            typeChannel = {typeChannel}
            values={addFormValues}
            channeBankList={channeBankList}
          />
          : null}
        {record && Object.keys(record).length ?
          <CreateForm {...parentMethods} modalVisible={modalVisible} payChannelList={payChannelList} values={record} dispatch={dispatch} />
          : null}

        {record && Object.keys(record).length ?
          null
          : <CreateForm {...parentMethods} modalVisible={modalVisible} dispatch={dispatch} />}
        <DetailsForm
        //查看
          {...lookMethods}
          seeChannelModalVisible={seeChannelModalVisible}
          values={seeChannelFormValues}
        />
      </PageHeaderWrapper>
    );
  }

}

export default payChannel;