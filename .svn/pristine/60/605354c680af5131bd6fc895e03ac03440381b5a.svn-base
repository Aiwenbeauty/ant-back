import React, { PureComponent, Fragment, Popconfirm, } from 'react';
import { connect } from 'dva';
import {
    Table,
    Row,
    Col,
    Card,
    Form,
    Input,
    Select,
    Icon,
    Button,
    Dropdown,
    Menu,
    Modal,
    Badge,
} from 'antd';
import StandardTable from '@/components/StandardTable';
import PageHeaderWrapper from '@/components/PageHeaderWrapper';
import CryptoJS from 'crypto-js';

import styles from '../AuthorityControl/UserControl.less';

const FormItem = Form.Item;
const { Option } = Select;
const CreateForm = Form.create()(props => {
    const { modalVisible, form, handleAdd, handleModalVisible } = props;
    const okHandle = () => {
        form.validateFields((err, fieldsValue) => {
            if (err) return;
            form.resetFields();
            handleAdd(fieldsValue);
        });
    };
    return (
      <Modal maskClosable={false}
        destroyOnClose
        title="新建任务"
        visible={modalVisible}
        onOk={okHandle}
        onCancel={() => handleModalVisible()}
      >
        <FormItem labelCol={{ span: 5 }} wrapperCol={{ span: 15 }} label="任务名">
          {form.getFieldDecorator('jobName', {
                    rules: [{ required: true, message: '请输入至多12个字符！', max: 12 }],
                })(<Input placeholder="请输入" />)}
        </FormItem>
        <FormItem labelCol={{ span: 5 }} wrapperCol={{ span: 15 }} label="任务分组">
          {form.getFieldDecorator('jobGroup', {
                    rules: [{ required: true }],
                })(<Input placeholder="请输入" />)}
        </FormItem>
        <FormItem labelCol={{ span: 5 }} wrapperCol={{ span: 15 }} label="表达式">
          {form.getFieldDecorator('cron', {
                    rules: [{ required: true }],
                })(<Input placeholder="请输入" />)}
        </FormItem>
        <FormItem labelCol={{ span: 5 }} wrapperCol={{ span: 15 }} label="备注">
          {form.getFieldDecorator('remarks')(<Input placeholder="请输入" />)}
        </FormItem>
        <FormItem labelCol={{ span: 5 }} wrapperCol={{ span: 15 }} label="周期">
          {form.getFieldDecorator('timeToLive', )(
            <Select placeholder="请选择" style={{ width: '100%' }}>
              <Option value={'0'}>一周</Option>
              <Option value={'1'}>一个月</Option>
            </Select>)}
        </FormItem>
      </Modal>
    );
});

@Form.create()
class UpdateForm extends PureComponent {
    static defaultProps = {
        handleUpdate: () => { },
        handleUpdateModalVisible: () => { },
        values: {},
    };

    render() {
        const { updateModalVisible, handleUpdateModalVisible, handleUpdate, values, form, } = this.props;
        const okHandle = () => {
            form.validateFields((err, fieldsValue) => {
                if (err) return;
                form.resetFields();
                if (values.id) {
                    handleUpdate(fieldsValue, values.id);
                }
            });
        };
        return (
          <Modal maskClosable={false}
            width={640}
            bodyStyle={{ padding: '32px 40px 48px' }}
            destroyOnClose
            title="编辑任务"
            visible={updateModalVisible}
            onOk={okHandle}
            onCancel={() => handleUpdateModalVisible(false, values)}
            afterClose={() => handleUpdateModalVisible()}
          >
            <FormItem labelCol={{ span: 5 }} wrapperCol={{ span: 15 }} label="表达式">
              {form.getFieldDecorator('cron', {
                        initialValue: values.cron,
                        rules: [{ message: '最多30个字符！', max: 30 }],
                    })(<Input placeholder="请输入" />)}
            </FormItem>
            <FormItem labelCol={{ span: 5 }} wrapperCol={{ span: 15 }} label="备注">
              {form.getFieldDecorator('remarks', {
                        initialValue: values.remarks,
                        rules: [{ message: '最多30个字符！', max: 30 }],
                    })(<Input placeholder="请输入" />)}
            </FormItem>
            <FormItem labelCol={{ span: 5 }} wrapperCol={{ span: 15 }} label="周期">
              {form.getFieldDecorator('timeToLive',{
                 initialValue: values.timeToLive,
              })(
                <Select placeholder="请选择" style={{ width: '100%' }}>
                  <Option value={'0'}>一周</Option>
                  <Option value={'1'}>一个月</Option>
                </Select>)}
            </FormItem>
          </Modal>

        );
    }
}

/* eslint react/no-multi-comp:0 */
@connect(({ job, loading }) => ({
    job,
    loading: loading.models.rule,
}))
@Form.create()
class TimingTasks extends PureComponent {
    state = {
        modalVisible: false,
        updateModalVisible: false,
        selectedRows: [],
        formValues: {},
        updateFormValues: {},
    };

    static defaultProps = {
        job: {
            list: [],
        },
    };

    columns = [
        {
            title: '任务状态',
            dataIndex: 'isSuspend',
            render: status => {
                return (
                  <React.Fragment>
                    {status === "0" ? <Badge status="processing" text="执行中" /> : <Badge status="default" text="暂停" />}
                  </React.Fragment>
                )
            }
        },
        {
            title: '任务名',
            dataIndex: 'jobName',
        },
        {
            title: '任务所在组',
            dataIndex: 'jobGroup',
        },
        {
            title: '表达式',
            dataIndex: 'cron',
        },
        {
            title: '周期',
            dataIndex: 'timeToLive',
            render: item => {
                return (
                    item === "0" ? "一周" : "一个月"
                )
            }
        },
        {
          title: '备注',
          dataIndex: 'remarks',
          className:styles.overFlowHidden
        },
        {
            title: '操作',
            render: (record) => {
              
              return(
                <Fragment>
                  <a style={{ whiteSpace: "nowrap" }} onClick={() => this.handleUpdateModalVisible(true, record)}>编辑</a>&nbsp;&nbsp;
                  {record.isSuspend === "0" ?
                    <a onClick={() => this.handlePauseJob(record)}>暂停</a>
                :<a onClick={() => this.handleResumeJob(record)}>恢复</a>}
                  &nbsp;&nbsp;
                  <a onClick={()=>this.handleDeleteConfirm(record)}>删除</a>
                </Fragment>
            )},
        },
    ];

    componentDidMount() {
        const { dispatch } = this.props;
        dispatch({
            type: 'job/fetch',
            payload: {
              "pageNo":1,
              "pageSize":1
              },
        });
    }

    handleStandardTableChange = (pagination, filtersArg, sorter) => {
        const { dispatch } = this.props;
        const { formValues } = this.state;
        
        const params = {
            pageNo: pagination.current,
            pageSize: pagination.pageSize,
            ...formValues,
        };
        // if (sorter.field) {
        //   params.sorter = `${sorter.field}_${sorter.order}`;
        // }

        dispatch({
            type: 'job/fetch',
            payload: params,
        });
    };

    handleFormReset = () => {
        const { form, dispatch } = this.props;
        const params = {
          pageNo: 1,
          pageSize: 1,
      };
        form.resetFields();
        this.setState({
            formValues: {},
        }); 
        dispatch({
            type: 'job/fetch',
            payload: params,
        });
    };

    handleResumeJob = (record)=>{
      Modal.confirm({
        title: '提示',
        content: '确定恢复这条任务？',
        okText: '确认',
        cancelText: '取消',
        onOk:()=>{this.handleResumeJob2(record)}
      })
    }
    handleResumeJob2 = (record)=>{
      const { dispatch } = this.props;
      const { id } = record;
      dispatch({
          type:"job/resumejob",
          payload:id,
      })
    }

    handleDeleteJob = (record)=>{
      const { dispatch } = this.props;
      const { id } = record;
      dispatch({
          type:"job/remove",
          payload:id
      })
  }

  handleDeleteConfirm = (record)=>{
    Modal.confirm({
      title: 'Confirm',
      content: '确定删除这条任务？',
      okText: '确认',
      cancelText: '取消',
      onOk:()=>{this.handleDeleteJob(record)}
    })
    }
    handlePauseJob = (record)=>{
      Modal.confirm({
        title: '提示',
        content: '确定暂停这条任务？',
        okText: '确认',
        cancelText: '取消',
        onOk:()=>{this.handlePauseJob2(record)}
      })
  }
  handlePauseJob2 = (record)=>{
    const { dispatch } = this.props;
    const { id } = record;
    dispatch({
        type:"job/pausejob",
        payload:id,
    })
  }

    handleMenuClick = e => {
        const { dispatch } = this.props;
        const { selectedRows } = this.state;
        if (selectedRows.length === 0) return;
        switch (e.key) {
            case 'remove':
                dispatch({
                    type: 'job/remove',
                    payload: selectedRows.map(row => row.encryptionId),
                    callback: () => {
                        this.setState({
                            selectedRows: [],
                        });
                    },
                });
                break;
            default:
                break;
        }
    };

    handleSelectRows = rows => {
        this.setState({
            selectedRows: rows,
        });
    };

    handleSearch = e => {
        e.preventDefault();
        const { dispatch, form } = this.props;

        form.validateFields((err, fieldsValue) => {
            if (err) return;

            const values = {
                ...fieldsValue,
                pageNo:1,
                pageSize:1,
            };

            this.setState({
                formValues: values,
            });

            dispatch({
                type: 'job/fetch',
                payload: values,
            });
        });
    };

    handleModalVisible = flag => {
        this.setState({
            modalVisible: !!flag,
        });
    };

    handleUpdateModalVisible = (flag, record) => {
        this.setState({
            updateModalVisible: !!flag,
            updateFormValues: record || {},
        });
    };

    handleAdd = fields => {
        const { dispatch } = this.props;
        dispatch({
            type: 'job/add',
            payload: fields,
        });
        this.handleModalVisible();
    };

    handleUpdate = (fields, id) => {
        const { dispatch } = this.props;
        dispatch({
            type: 'job/update',
            payload: {
                id,
                ...fields,
            },
        });

        this.handleUpdateModalVisible();
    };

    renderForm() {
        const {
            form: { getFieldDecorator },
        } = this.props;
        return (
          <Form onSubmit={this.handleSearch} layout="inline">
            <Row gutter={{ md: 8, lg: 24, xl: 48 }}>
              <Col md={8} sm={24}>
                <FormItem label="任务名">
                  {getFieldDecorator('jobName')(<Input placeholder="请输入" />)}
                </FormItem>
              </Col>
              <Col md={8} sm={24}>
                <FormItem label="任务所在组">
                  {getFieldDecorator('jobGroup')(<Input placeholder="请输入" />)}
                </FormItem>
              </Col>
              <Col md={8} sm={24}>
                <span className={styles.submitButtons}>
                  <Button type="primary" htmlType="submit">
                                查询
                  </Button>
                  <Button style={{ marginLeft: 8 }} onClick={this.handleFormReset}>
                                重置
                  </Button>
                </span>
              </Col>
            </Row>
          </Form>
        );
    }

    render() {
        const {
            job: { list },
            loading,
        } = this.props;
        const { selectedRows, modalVisible, updateModalVisible, updateFormValues } = this.state;
        const menu = (
          <Menu onClick={this.handleMenuClick} selectedKeys={[]}>
            <Menu.Item key="remove">删除</Menu.Item>
            <Menu.Item key="approval">批量审批</Menu.Item>
          </Menu>
        );

        const parentMethods = {
            handleAdd: this.handleAdd,
            handleModalVisible: this.handleModalVisible,
        };
        const updateMethods = {
            handleUpdateModalVisible: this.handleUpdateModalVisible,
            handleUpdate: this.handleUpdate,
        };
        const pagination = {
          total:list.total,
          pageSize:list.size,
          defaultCurrent:1,
        };

        return (
          <PageHeaderWrapper title="定时任务">
            <Card bordered={false}>
              <div className={styles.tableList}>
                <div className={styles.tableListForm}>{this.renderForm()}</div>
                <div className={styles.tableListOperator}>
                  <Button icon="plus" type="primary" onClick={() => this.handleModalVisible(true)}>
                                新建
                  </Button>
                  {selectedRows.length > 0 && (
                    <span>
                      <Button>批量操作</Button>
                      <Dropdown overlay={menu}>
                        <Button>
                                            更多操作 <Icon type="down" />
                        </Button>
                      </Dropdown>
                    </span>
                            )}
                </div>
            <Table
              dataSource={list.records}
              rowKey="id"
              className="textCenter"
              rowClassName="textCenter"
              columns={this.columns}
              pagination={pagination}
              bordered={false}
              scroll={{ x: 'max-content' }}
              onChange={this.handleStandardTableChange}
            />
              </div>
            </Card>
            <CreateForm {...parentMethods} modalVisible={modalVisible} />
            {updateFormValues && Object.keys(updateFormValues).length ? (
              <UpdateForm
                {...updateMethods}
                updateModalVisible={updateModalVisible}
                values={updateFormValues}
              />
                ) : null}
          </PageHeaderWrapper>
        );
    }
}

export default TimingTasks;
