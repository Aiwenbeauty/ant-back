import React, { PureComponent, Fragment } from 'react';
import { formatMessage, FormattedMessage } from 'umi-plugin-react/locale';
import { connect } from 'dva';
import { Cascader, Radio, Row, Col, Avatar, Badge, Card, Table, Modal, Select, DatePicker, Carousel, Alert, Spin, Skeleton, Divider, Form, Input, Button, List, Progress } from 'antd';
import DescriptionList from '@/components/DescriptionList';
import PageHeaderWrapper from '@/components/PageHeaderWrapper';
import PropTypes from 'prop-types';
import moment from "moment";
import CryptoJS from 'crypto-js';
import styles from "./Agent.less";

const { Description } = DescriptionList;
const { Option } = Select;
const { RangePicker } = DatePicker;
const FormItem = Form.Item;



@connect(({agentinfo, loading }) => ({
    agentinfo,
  loading: loading.models.rule,
}))

// 编辑
@Form.create()
class ModifyForm extends PureComponent {
  constructor(props) {
    super(props)
    const { trade } = this.props;
    this.state = {
        pageSize: 10,
    };
  }

  static defaultProps = {
    modifyTrade: () => { },
    modifyByIdModalVisible: () => { },
    values: {},
  };

  render() {
    const { modifyModalVisible, modifyByIdModalVisible, modifyTrade, values, form,profitQueryList,columnsDetails } = this.props;
    const { getFieldDecorator } = this.props.form;
    const { TextArea } = Input;
    const okHandle = () => {
      form.validateFields((err, fieldsValue) => {
        if (err) return;
        form.resetFields();
        if (values.id) {
          modifyTrade(fieldsValue, values.id);
        }
      });
    };
    return (
      <Modal maskClosable={false}
        width={1000}
        bodyStyle={{ padding: '32px 40px 48px' }}
        destroyOnClose
        title="代理商分润"
        footer={null}
        visible={modifyModalVisible}
        onOk={okHandle}
        onCancel={() => modifyByIdModalVisible(false, values)}
        afterClose={() => modifyByIdModalVisible()}
      >
        <Form labelCol={{ span: 4, md: 4, lg: 8 }} wrapperCol={{ span: 19, md: 19, lg: 16 }}>
      <Row>
          <Col span={24} md={24} lg={8}>
            <FormItem label="交易时间">
              {getFieldDecorator('time',
                {
                  rules: []
                }
              )(<RangePicker />)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={8}>
            <FormItem label="分润类型">
              {getFieldDecorator('profitType',
                {
                  rules: []
                }
              )(
                <Select>
                  <Option value="">全部</Option>
                  <Option value="0">间接分润</Option>
                  <Option value="1">直接分润</Option>
                </Select>
              )}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={8} offset={16}>
            <FormItem className={styles.btnContainer}>
              <Button type="primary" onClick={() => this.handleSearchDes(values.agentId)}>
                查询
              </Button>
              <Button style={{ marginLeft: 20 }} onClick={() => this.handleFormResetDes(values.agentId)}>
                重置
              </Button>
            </FormItem>
          </Col>
        </Row>
    </Form>
        <Row>
        <Table
              dataSource={profitQueryList.rows}
              rowKey="id"
              columns={columnsDetails}
              pagination={profitQueryList.total}
            //   loading={agentinfo.loading}
              bordered={false}
              style={{ overflowX: "scroll" }}
              onChange={this.handlePageChange}
            // scroll={{ x: 1200}}
            />
      </Row>
      </Modal>

    );
  }

  // 查询
  handleSearchDes  = (agentId)  => {
    const { form, dispatch } = this.props;
    const { pageSize } = this.state;
    form.validateFields((err, fieldsValue) => { 
        const value = {
            startTime: fieldsValue.time[0].format('YYYY-MM-DD 00:00:00'),
            endTime: fieldsValue.time[1].format('YYYY-MM-DD 23:59:59'),
            profitType: fieldsValue.profitType,
          }
        dispatch({
          type: 'agentinfo/profitDetails',
          payload: {
            ...value,
            agentId,
            "pageNo": 1,
            "pageSize": pageSize,
          },
        });
    })

  }

    // 重置
    handleFormResetDes = (agentId)  => {
        const { form, dispatch } = this.props;
        const { pageSize } = this.state;
        form.resetFields();
        dispatch({
          type: 'agentinfo/profitDetails',
          payload: {
            agentId,
            "pageNo": 1,
            "pageSize": pageSize,
          },
        });
    }

}


/* eslint react/no-multi-comp:0 */
@connect(({  agentinfo, loading }) => ({
    agentinfo,
  loading: loading.models.rule,
}))

@Form.create()
class TradeList extends PureComponent {
  constructor(props) {
    super(props)
    this.state = {
      modalVisible: false,
      currentRecord: null,
      pageSize: 10,
    }
  }

  componentDidMount() {
    const { dispatch } = this.props;
    const { pageSize } = this.state;

    dispatch({
      type: 'agentinfo/profit',
      payload: {
        "pageNo": 1,
        "pageSize": pageSize,
      }
    });
  }

  // 查询
  handleSearch = (e) => {
    const { dispatch, form } = this.props;
    const { pageSize } = this.state;
    e.preventDefault();
    form.validateFields((err, fieldsValue) => {
      if (!err) {
        const value = {
          agentName: fieldsValue.agentName,
          mobile: fieldsValue.mobile,
        }
        dispatch({
          type: 'agentinfo/profit',
          payload: {
            ...value,
            "pageNo": 1,
            "pageSize": pageSize,
          }
        });
      }
    })
  }

  // 重置
  handleFormReset = () => {
    const { form, dispatch } = this.props;
    const { pageSize } = this.state;
    form.resetFields();
    dispatch({
      type: 'agentinfo/tradeInfoList',
      payload: {
        "pageNo": 1,
        "pageSize": pageSize,
      },
    });
  };

  handleEncrypt = beforePwd => {
    const secretKey = 'com.vcpay.foo.key';
    const afterEncrypt = CryptoJS.DES.encrypt(beforePwd, CryptoJS.enc.Utf8.parse(secretKey), {
      mode: CryptoJS.mode.ECB,
      padding: CryptoJS.pad.Pkcs7
    }).toString()
    return afterEncrypt;
  }

  renderForm = () => {
    const { getFieldDecorator } = this.props.form;
    const { form } = this.props;
    const FormItem = Form.Item;
    return (
      <Form labelCol={{ span: 4, md: 4, lg: 8 }} wrapperCol={{ span: 19, md: 19, lg: 16 }} onSubmit={this.handleSearch}>
        <Row>
          <Col span={24} md={24} lg={8}>
            <FormItem label="代理商名称">
              {getFieldDecorator('agentName',
                {
                  rules: []
                }
              )(<Input />)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={8}>
            <FormItem label="手机号">
              {getFieldDecorator('mobile',
                {
                  rules: []
                }
              )(<Input />)}
            </FormItem>
          </Col>
          
          <Col span={24} md={24} lg={8} offset={16}>
            <FormItem className={styles.btnContainer}>
              <Button type="primary" htmlType="submit">
                查询
              </Button>
              <Button style={{ marginLeft: 20 }} onClick={this.handleFormReset}>
                重置
              </Button>
            </FormItem>
          </Col>
        </Row>
      </Form>
    )
  }

  // 详情页面
  modifyByIdModalVisible = (flag, record) => {
    const { dispatch } = this.props;
    const { agentinfo } = this.props;
    debugger
    this.setState({
      modifyModalVisible: !!flag,
      modifyFormValues: record || {},
    });
    const { pageSize } = this.state;
    if(flag){
        dispatch({
            type: 'agentinfo/profitDetails',
            payload: {
              agentId: record.agentId,
              "pageNo": 1,
              "pageSize": pageSize,
            }
          });
    }
  };

  render() {
    const { agentinfo } = this.props;
    // const tradeDetail = trade.tradeDetail;
    // const areaList = trade.areaList;
    const { updateModalVisible, updateFormValues, modifyModalVisible, modifyFormValues } = this.state;
    const columns = [
      {
        title: '代理商名称',
        dataIndex: 'agentName',
        key: 'agentName',
      },
      {
        title: '用户名',
        dataIndex: 'loginName',
        key: 'loginName',
      },
      {
        title: '手机号',
        dataIndex: 'mobile',
        key: 'mobile',
      },
      {
        title: '分润总金额',
        dataIndex: 'traTotalAmount',
        key: 'traTotalAmount',
      },
      {
        title: '分润总笔数',
        dataIndex: 'profitNum',
        key: 'profitNum',
      },
      {
        title: '剩余可用',
        dataIndex: 'usableTotalAmount',
        key: 'usableTotalAmount',
      },
      {
        title: '已提现',
        dataIndex: 'cashMoney',
        key: 'cashMoney',
      },
      {
        title: '操作',
        render: (text, record) => (
          <Fragment>
            <a onClick={() => this.modifyByIdModalVisible(true, record)}>详情</a>&nbsp;&nbsp;&nbsp;&nbsp;
          </Fragment>
        ),
      },
    ];

    const columnsDetails = [
        {
          title: '交易时间',
          dataIndex: 'tranTime',
          key: 'tranTime',
        },
        {
          title: '分润类型',
          dataIndex: 'profitType',
          key: 'profitType',
        },
        {
          title: '分润金额(￥)',
          dataIndex: 'profitMoney',
          key: 'profitMoney',
        },
        {
          title: '结算费率(%)',
          dataIndex: 'traRate',
          key: 'traRate',
        },
        {
          title: '支付方式',
          dataIndex: 'payType',
          key: 'payType',
        },

      ];

    
    const {total} = agentinfo.profitList.data;
    const profitQueryList = agentinfo.profitQueryList.data;
    const pagination = {
      total
    }
    const updateMethods = {
      detailsModalVisible: this.detailsModalVisible,
      details: this.details,
    };

    // 编辑
    const detailsMethods = {
      modifyByIdModalVisible: this.modifyByIdModalVisible,
      modifyTrade: this.modifyTrade,
    };
    return (
      <PageHeaderWrapper title="">
        <Card>
          <Row>
            {this.renderForm()}
          </Row>
          <Row>
            <Table
              dataSource={agentinfo.profitList.data.rows}
              rowKey="id"
              columns={columns}
              pagination={pagination}
              loading={agentinfo.loading}
              bordered={false}
              style={{ overflowX: "scroll" }}
              onChange={this.handlePageChange}
            // scroll={{ x: 1200}}
            />
          </Row>
        </Card>
        <ModifyForm
          {...detailsMethods}
          modifyModalVisible={modifyModalVisible}
          profitQueryList={profitQueryList}
          columnsDetails={columnsDetails}
          values={modifyFormValues}
        />
      </PageHeaderWrapper>
    )
  }
}
export default TradeList;