import React, { Fragment } from 'react';
import { formatMessage, FormattedMessage } from 'umi-plugin-react/locale';
import { connect } from 'dva';
import { Row, Col, Avatar, Badge, Card, Table, Modal, Select, DatePicker, Carousel, Alert, Spin, Skeleton, Divider, Form, Input, Button, List, Progress } from 'antd';
import DescriptionList from '@/components/DescriptionList';
import PageHeaderWrapper from '@/components/PageHeaderWrapper';
import PropTypes from 'prop-types';
import moment from "moment";
import styles from "./Log.less";

const { Description } = DescriptionList;
const { Option } = Select;
const { RangePicker } = DatePicker;
@Form.create()
/* eslint react/no-multi-comp:0 */
@connect(({ log, loading }) => ({
  log,
  loading: loading.models.rule,
}))
class Log extends React.Component {
  constructor(props) {
    super(props)
    this.state = {
      modalVisible: false,
      currentRecord: null,
      pageSize: 10,
    }
  }

  componentDidMount() {
    const { dispatch } = this.props;
    const { pageSize } = this.state;
    dispatch({
      type: 'log/fetch',
      payload: {
        "currentPage": 1,
        "pageSize": pageSize,
      }
    });
  }

  handleSearch = (e) => {
    const { dispatch, form } = this.props;
    const { pageSize } = this.state;
    e.preventDefault();
    form.validateFields((err, fieldsValue) => {
      const startTime = fieldsValue.time ? fieldsValue.time[0].format('YYYY-MM-DD 00:00:00') : null;
      const endTime = fieldsValue.time ? fieldsValue.time[1].format('YYYY-MM-DD 00:00:00') : null;
      if (!err) {
          const value={
            requestURI: fieldsValue.requestURI,
            classMethod: fieldsValue.classMethod,
            method: fieldsValue.method,
            returnType:fieldsValue.returnType,
            startTime: startTime,
            endTime:endTime,
          }
          this.setState({
            formField:value
          });
        dispatch({
          type: 'log/fetch',
          payload: {
            ...value,
            "currentPage": 1,
            "pageSize": pageSize,
          }
        });
      }
    })
  }

  handleFormReset = () => {
    const { form, dispatch } = this.props;
    const { pageSize } = this.state;
    this.setState({
      formField:null
    });
    form.resetFields();
    dispatch({
      type: 'log/fetch',
      payload: {
        "currentPage": 1,
        "pageSize": pageSize,
      },
    });
  };

  renderForm = () => {
    const { getFieldDecorator } = this.props.form;
    const FormItem = Form.Item;
    return (
      <Form labelCol={{ span:4, md: 4 ,lg:8}} wrapperCol={{ span:19,md: 19,lg:16 }} onSubmit={this.handleSearch}>
        <Row>
          <Col span={24} md={24} lg={8}>
            <FormItem label="请求路径">
              {getFieldDecorator('requestURI',
                {
                  rules: []
                }
              )(<Input />)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={8}>
            <FormItem label="类和方法名">
              {getFieldDecorator('classMethod',
                {
                  rules: []
                }
              )(<Input />)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={8}>
            <FormItem label="请求方式">
              {getFieldDecorator('method',
                {
                  rules: []
                }
              )(
                <Select>
                  <Option value="GET">GET</Option>
                  <Option value="POST">POST</Option>
                </Select>
              )}
            </FormItem>
          </Col>
        </Row>
        <Row>
          {/* <Col span={24} md={24} lg={8}>
            <FormItem label="日志类型">
              {getFieldDecorator('returnType',
                {
                  rules: []
                }
              )(<Input />)}
            </FormItem>
          </Col> */}
          <Col span={24} md={24} lg={8}>
            <FormItem label="日志类型">
              {getFieldDecorator('returnType',
                {
                  rules: []
                }
              )(
                <Select>
                  <Option value="success">success</Option>
                  <Option value="error">error</Option>
                </Select>
              )}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={8}>
            <FormItem label="开始时间">
              {getFieldDecorator('time',
                {
                  rules: []
                }
              )(<RangePicker />)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={8}>
            <FormItem className={styles.btnContainer}>
              <Button type="primary" htmlType="submit">
                查询
              </Button>
              <Button style={{marginLeft:20}} onClick={this.handleFormReset}>
                重置
              </Button>
            </FormItem>
          </Col>
        </Row>
      </Form>
    )
  }

  renderCell = (text, width) => (
    <div style={{ width: `${width}`, overflow: "hidden", display: "inline-block", whiteSpace: 'nowrap', textOverflow: "ellipsis" }}>
      {text}
    </div>
  )

  handleModalVisible = (flag, record) => {
    this.setState({
      modalVisible: !!flag,
      currentRecord: record,
    });
  };

  handlePageChange = (pagination) => {
    const { dispatch,form } = this.props;
    const { pageSize,formField } = this.state;
    dispatch({
      type: 'log/fetch',
      payload: {
        ...formField,
        "currentPage": pagination.current,
        "pageSize": pageSize,
      }
    });
  }

  render() {
    const { log } = this.props;
    const { modalVisible, currentRecord } = this.state;
    const columns = [{
      title: '请求时间',
      dataIndex: 'insertTime',
      key: 'insertTime',
    }, {
      title: '请求路径',
      dataIndex: 'requestURI',
      key: 'requestURI',
    }, {
      title: '参数',
      dataIndex: 'queryString',
      key: 'queryString',
      render: (text) => this.renderCell(text, "80px"),
    }, {
      title: '请求方式',
      dataIndex: 'method',
      key: 'method',
    }, {
      title: '返回信息',
      dataIndex: 'response',
      key: 'response',
      render: (text) => this.renderCell(text, "50px"),
    }, {
      title: '日志类型',
      dataIndex: 'returnType',
      key: 'returnType',
      render: (text) => this.renderCell(text),
    }, {
      title: '错误',
      dataIndex: 'error',
      key: 'error',
      render: (text) => this.renderCell(text, "80px"),
    }, {
      title: '操作',
      render: (text, record) => (
        <Fragment>
          <a onClick={() => this.handleModalVisible(true, record)}>查看</a>
        </Fragment>
      ),
    },
    ];

    const total = log.list.totalCount;
    const pagination = {
      total
    }

    return (
      <PageHeaderWrapper title="日志查询">
        <Card>
          <Row>
            {this.renderForm()}
          </Row>
          <Row>
            <Table
              dataSource={log.list.rows}
              rowKey="id"
              rowClassName="textCenter"
              columns={columns}
              pagination={pagination}
              loading={log.loading}
              bordered={false}
              style={{ overflowX: "scroll" }}
              onChange={this.handlePageChange}
            />
          </Row>
          <Modal
            maskClosable={false}
            destroyOnClose
            title="请求详情"
            visible={modalVisible}
            width={700}
            okText="确定"
            cancelText="取消"
            onCancel={() => this.handleModalVisible()}
            onOk={() => this.handleModalVisible()}
          >
            {currentRecord &&
            <DescriptionList col={1} layout="vertical">
              <Description term="请求时间">{currentRecord.insertTime}</Description>
              <Description term="请求路径">{currentRecord.requestURI}</Description>
              <Description term="类和方法名">{currentRecord.classMethod}</Description>
              <Description term="参数">{currentRecord.queryString}</Description>
              <Description term="请求方式">{currentRecord.method}</Description>
              <Description term="日志类型">{currentRecord.returnType}</Description>
              <Description term="错误">{currentRecord.error}</Description>
              <Description term="返回信息">{currentRecord.response}</Description>
            </DescriptionList>
          }
          </Modal>
        </Card>
      </PageHeaderWrapper>
    )
  }
}

Log.propTypes = {
  log: PropTypes.object
};

Log.defaultProps = {
  log: {
    list: {
      rows: [],
      totalPage: 5
    }
  }
};

export default Log;