import React, { PureComponent } from 'react';
import Authorized from '@/utils/Authorized';
import { connect } from 'dva';
import { message, Popconfirm, Row, Col, Card, Table, Upload, Modal, Select, Tag, Checkbox, Badge, Divider, DatePicker, 
  InputNumber, Icon, Form, Input, Button, List,Switch, } from 'antd';
import DescriptionList from '@/components/DescriptionList';
import PageHeaderWrapper from '@/components/PageHeaderWrapper';
import PropTypes from 'prop-types';
import moment from "moment";
import OperateTable from '@/components/OperateTable';
import styles from "../Agent/Agent.less";
import imgUrl,{judgePageAuth} from '@/global';

const { Description } = DescriptionList;
const { Option } = Select;
const { RangePicker } = DatePicker;
const FormItem = Form.Item;
const Modular = ['代理商管理',"通道配置","商户管理"];
const operateType = ['新增','编辑','删除','禁用','启用'];
@connect(({ merchant}) => ({
  merchant,
}))
@Form.create()
class CreateForm extends React.Component {

  // componentDidUpdate(){
  //   const 
  //   if()
  // }

  handleChargeFeeChange = (value,id)=>{
    const { merchant,dispatch } = this.props;
    const {chsChannel} = merchant;
    // 查找是否该通道是否存入channel数组
    let haveIndex;
    function checkHaveChannel(item,index){
      if(item.id == id){
        haveIndex = index;
      }
      return item.id == id;
    }
    const haveItem = chsChannel.find(checkHaveChannel) || {};
    if(haveIndex !== undefined){
      chsChannel[haveIndex].rate = value;
    }else{
      haveItem.id = id;
      haveItem.rate = value;
      chsChannel.push(haveItem);
    }
    dispatch({
      type:'merchant/setChannel',
      payload:chsChannel
    });
  }

  handleWithdrawFeeChange = (value,id)=>{
    const { merchant,dispatch } = this.props;
    const {chsChannel} = merchant;
    // 查找是否该通道是否存入channel数组
    let haveIndex;
    function checkHaveChannel(item,index){
      if(item.id == id){
        haveIndex = index;
      }
      return item.id == id;
    }
    const haveItem = chsChannel.find(checkHaveChannel);
    if(haveIndex !== undefined){
      chsChannel[haveIndex].withdrawFee = value;
    }else{
      haveItem.id = id;
      haveItem.withdrawFee = value;
      chsChannel.push(haveItem);
    }
    dispatch({
      type:'merchant/setChannel',
      payload:chsChannel
    });
  }

    render() {
        const { modalVisible, form, handleAdd, handleModalVisible, channelList } = this.props;
        const okHandle = () => {
            form.validateFields((err, fieldsValue) => {
                if (err) return;
                handleAdd(fieldsValue, form);
            });
        };
        return (
          <Modal
            destroyOnClose
            title="添加商户"
            visible={modalVisible}
            onOk={okHandle}
            width={1000}
            onCancel={() => handleModalVisible()}
            // 点击遮罩不能关闭
            maskClosable={false}
          >
            <Row gutter={{ md: 8, lg: 24, xl: 48 }} className={styles.headerName}>
                    基本信息
            </Row>

            <Row gutter={{ md: 8, lg: 24, xl: 48 }}>
              <Col span={24} md={24} lg={12}>
                <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="邮箱">
                  {form.getFieldDecorator('mailbox', {
                                rules: [{ required: true, type: 'email', message: '请输入正确的邮箱' }],
                            })(<Input placeholder="请输入" />)}
                </FormItem>
              </Col>
              <Col span={24} md={24} lg={12}>
                <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="商户名称">
                  {form.getFieldDecorator('name', {
                                rules: [{ required: true, message: '请输入至多10个字符！', max: 10 }],
                            })(<Input placeholder="请输入" />)}
                </FormItem>
              </Col>
              <Col span={24} md={24} lg={12}>
                <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="商户法人">
                  {form.getFieldDecorator('legalPerson', {
                                rules: [{ required: true, message: '请输入至多10个字符！', max: 10 }],
                            })(<Input placeholder="请输入" />)}
                </FormItem>
              </Col>
              <Col span={24} md={24} lg={12}>
                <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="手机号">
                  {form.getFieldDecorator('phone', {
                                rules: [{ pattern: /^1[3-9]{2}\d{8}$/, message: '请输入正确的手机号' }],
                            })(<Input placeholder="请输入" />)}
                </FormItem>
              </Col>
              <Col span={24} md={24} lg={12}>
                <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="身份证号">
                  {form.getFieldDecorator('idCardNo', {
                                rules: [{ required: true, message: '请输入正确的身份证号！', min: 18, max: 18 }],
                            })(<Input placeholder="请输入" />)}
                </FormItem>
              </Col>
              <Col span={24} md={24} lg={12}>
                <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="类型">
                  {form.getFieldDecorator('type', {
                                rules: [{ required: true }],
                                initialValue: 0
                            })(
                              <Select placeholder="请选择" style={{ width: '100%' }} disabled>
                                <Option value={0} key={0}>主商户</Option>
                              </Select>)}
                </FormItem>
              </Col>
              <Col span={24} md={24} lg={12}>
                <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="营业执照">
                  {form.getFieldDecorator('busLicenseNo', {
                                rules: [{ required: true, message: '请输入正确的营业执照！', min: 8, max: 18 }],
                            })(<Input placeholder="请输入" />)}
                </FormItem>
              </Col>
            </Row>
            <Row gutter={{ md: 8, lg: 24, xl: 48 }} className={styles.headerName}>
                    通道配置
            </Row> 
            {channelList && channelList.map(item=>{
              return(
                <Row key={item.id} gutter={{ md: 8, lg: 24, xl: 48 }} style={{display:"flex",alignItems:"center",justifyContent:"space-around"}}>
                  {item.name}:
                  <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="交易费率" style={{margin:0,width:250}}>
                    <InputNumber
                      step={0.01}
                      min={0}
                      max={1}
                      formatter={value => `${value}`}
                      parser={value => {
                                        const val = value.replace('%', '');
                                        return val;
                  }}
                      onChange={(value)=>this.handleChargeFeeChange(value,item.id)}
                    />
                            
                  </FormItem>
                  <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="手续费率" style={{margin:0,width:250}}>
                    <InputNumber 
                      min={0} 
                      max={10} 
                      step={0.1} 
                      onChange={(value)=>this.handleWithdrawFeeChange(value,item.id)}
                    />
                  </FormItem>
                </Row>
              )
            })}

            <Row gutter={{ md: 8, lg: 24, xl: 48 }} className={styles.headerName}>
                      短信配置
            </Row> 

            <Row gutter={{ md: 8, lg: 24, xl: 48 }}>
              <Col span={24} md={24} lg={12}>
                <Form.Item labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="短信开关">
                  {form.getFieldDecorator('messageSwitch', {
                            valuePropName:"checked",
                        })(
                          <Switch checkedChildren="开通" unCheckedChildren="关闭" />
                        )}
                </Form.Item>
              </Col>
              <Col span={24} md={24} lg={12}>
                <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="可用条数:">
                  {form.getFieldDecorator('enableNum', {
                               initialValue:0
                            })(<Input type="number" disabled placeholder="请输入" />)}
                </FormItem>
              </Col>
            </Row>
            
            <Row gutter={{ md: 8, lg: 24, xl: 48 }} className={styles.headerName}>
                    结算信息
            </Row>
            <Row gutter={{ md: 8, lg: 24, xl: 48 }}>
              <Col span={24} md={24} lg={12}>
                <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label=" 开户名称">
                  {form.getFieldDecorator('openAccountName', {
                                rules: [{ required: true, message: '请输入至多10个字符！', max: 10 }],
                            })(<Input placeholder="请输入" />)}
                </FormItem>
              </Col>
              <Col span={24} md={24} lg={12}>
                <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="账户类型">
                  {form.getFieldDecorator('accountType', {
                                rules: [{ required: true, message: '请选择账户类型！', }],
                                initialValue: 0
                            })(
                              <Select placeholder="请选择" style={{ width: '100%' }}>
                                <Option value={0}>对公</Option>
                                <Option value={1}>对私</Option>
                              </Select>
                            )}
                </FormItem>
              </Col>
              <Col span={24} md={24} lg={12}>
                <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="银行账号">
                  {form.getFieldDecorator('bankCard', {
                                rules: [{ required: true, message: '请输入正确的银行卡号！', min: 17, max: 19 }],
                            })(<Input placeholder="请输入" />)}
                </FormItem>
              </Col>

              <Col span={24} md={24} lg={12}>
                <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="支行信息">
                  {form.getFieldDecorator('subBranch', {
                            })(<Input placeholder="请输入" />)}
                </FormItem>
              </Col>
              <Col span={24} md={24} lg={12}>
                <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="权限">
                  <Select placeholder="请选择" style={{ width: '100%' }} disabled value="商户">
                    <Option value="48">商户</Option>
                  </Select>
                </FormItem>
              </Col>
            </Row>
            <Row gutter={{ md: 8, lg: 24, xl: 48 }} className={styles.headerName}>
                    资质上传
            </Row>
            <Row gutter={{ md: 8, lg: 24, xl: 48 }}>
              <Col span={24} md={24} lg={12}>
                <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="法人身份证正面">
                  <PicturesWall type="idCardPhoto" />·
                </FormItem>
              </Col>
              <Col span={24} md={24} lg={12}>
                <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="法人身份证反面">
                  <PicturesWall type="idCardBackPhoto" />·
                </FormItem>
              </Col>
            </Row>
            <Row gutter={{ md: 8, lg: 24, xl: 48 }}>
              <Col span={24} md={24} lg={12}>
                <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="营业执照照片">
                  <PicturesWall type="busLicense" />·
                </FormItem>
              </Col>
              <Col span={24} md={24} lg={12}>
                <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="银行开户许可证">
                  <PicturesWall type="bankOpenPermit" />·
                </FormItem>
              </Col>
              <Col span={24} md={24} lg={12}>
                <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="手持身份证">
                  <PicturesWall type="personWithIdPhoto" />·
                </FormItem>
              </Col>
              <Col span={24} md={24} lg={12}>
                <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="结算卡">
                  <PicturesWall type="bankCardPhoto" />·
                </FormItem>
              </Col>
            </Row>

          </Modal>
        );
    }

}

function getBase64(file) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.readAsDataURL(file);
        reader.onload = () => resolve(reader.result);
        reader.onerror = error => reject(error);
    });
}
const statusMap = ['default', 'warning', 'error', 'success', 'processing'];
const status = ['审核中', '上游禁用', '禁用', '可交易不可提现', '正常',];
@connect(({ goods }) => ({
    goods,
}))
class PicturesWall extends React.Component {
    state = {
        previewVisible: false,
        previewImage: '',
        fileList: [],
        current:90,
        transStyle:''
    };

    componentDidMount() {
        const { Picture } = this.props;
        if (Picture && Array.isArray(Picture)) {
            const fileList = Picture.map((item, index) => {
                return ({
                    uid: index,
                    name: 'image.png',
                    status: 'done',
                    url: imgUrl + item,
                })
            })
            this.setState({
                fileList
            })
        } else if (Picture && !Array.isArray(Picture)) {
            this.setState({
                fileList: [{
                    uid: 1,
                    name: 'image.png',
                    status: 'done',
                    url: imgUrl + Picture,
                },]
            })
        }
    }

    handleCancel = () => this.setState({ previewVisible: false });

    handlePreview = async file => {
        if (!file.url && !file.preview) {
            file.preview = await getBase64(file.originFileObj);
        }

        this.setState({
            previewImage: file.url || file.preview,
            previewVisible: true,
        });
    };

    handleChange = ({ fileList }) => {
        const { dispatch, type } = this.props;
        this.setState({
            fileList
        });
        dispatch({
            type: `merchant/${type}`,
            payload: fileList
        });

    };

    cancelPreview= () => {
      this.setState({
          visible: false,
          previewVisible: false,
          current:90,
          transStyle:`rotate(${0}deg)`
      });
    }

    translate = () => {
      this.setState({
          current:(this.state.current+90)%360,
          transStyle:`rotate(${this.state.current}deg)`
      });
    }

    render() {
        const { previewVisible, previewImage, fileList } = this.state;
        const { disabled } = this.props;
        const content = (
          <div style={{textAlign:'center'}}>
            <Button 
              onClick={
                      // onClick:()=>{window.open(this.state.previewImage,'_blank')}
                      /**
                       * window.open此处是可以实现的，但是因为后台存储线上图片的格式更加安全，导致window.open打开的时候就直接下载了。
                       * 所以采用下面的方式实现
                       */
                      ()=> {
                          const str=`<!DOCTYPE html><html><body ><img src=${ this.state.previewImage } /></body></html>`;
                          const a=window.open("",'_blank')
                          a.document.write(str);
                      }
                  }
            >查看原图
            </Button>
            <span style={{marginLeft:6}}>
              <Button
                onClick={this.translate}
              >
                      旋转<Icon type="reload" theme="outlined" />
              </Button>
            </span>
          </div>
      )
        const uploadButton = (
          <div>
            <Icon type="plus" />
            <div className="ant-upload-text">Upload</div>
          </div>
        );
        const token = localStorage.getItem("token");
        return (
          <div className="clearfix">
            <Upload
              action="/lazy-card/sysUser/uploadUserImg"
              listType="picture-card"
              data={{ type: 'merchInfo' }}
              fileList={fileList}
              onPreview={this.handlePreview}
              onChange={this.handleChange}
              headers={{
                        Authorization: token
                    }}
              disabled={disabled}
            >
              {fileList.length >= 1 ? null : uploadButton}
            </Upload>
            <Modal visible={previewVisible} footer={content} onCancel={this.cancelPreview.bind(this)}>
              {/* <img alt="example" style={{ width: '100%' }} src={previewImage} /> */}
              <div style={{ marginTop:20,height:470, transform:this.state.transStyle, display:'flex', alignItems:'center'}}>
                <img
                  alt="example"
                  style={{width: '100%',height:'100%' }}
                  src={this.state.previewImage}
                />
              </div>
            </Modal>
          </div>
        );
    }
}

@connect(({ merchant, payChannel,operate}) => ({
    merchant,
    payChannel,
    operate
}))
@Form.create()
class UpdateForm extends PureComponent {
    static defaultProps = {
        handleUpdate: () => { },
        handleUpdateModalVisible: () => { },
        values: {},
    };

    componentDidMount() {
        const { dispatch,values } = this.props;
        dispatch({
            type:'merchant/fetchDetail',
            payload:{
                id:values.id
            }
        }).then(()=>{
          this.setRealChannel();
        })

    }

             // 比较当前通道列表和当前商户历史列表,得出编辑时真正需要遍历的通道列表
             setRealChannel(){
              const { payChannel ,merchant,dispatch } = this.props;
              const channelList = payChannel.list;
              const historyChannels = merchant.chsChannel;
              for(let i=0;i<historyChannels.length;i++){
                channelList.forEach((item,index)=>{
                  if(historyChannels[i].channelId === item.id){
                    channelList[index] = {
                      id:historyChannels[i].channelId,
                      name:historyChannels[i].channelName,
                      rate:historyChannels[i].transRate,
                      withdrawFee:historyChannels[i].withdrawFee,
                      status:historyChannels[i].status,
                    };
                  }
                });	
              }
              console.log('channelList',channelList)
              dispatch({
                type:'merchant/setChannel',
                payload:channelList
              });
            }

    // 用户编辑交易费率,将改变的值存入redux中的chsChannel,用于表单提交
    handleChargeFeeChange = (value,id)=>{
      const { merchant,dispatch } = this.props;
      const {chsChannel} = merchant;
      // 查找是否该通道是否存入channel数组
      let haveIndex;
      function checkHaveChannel(item,index){
      // 注意这里是item.id而不是item.channelId
        if(item.id == id){
          haveIndex = index;
        }
        return item.id == id;
      }
      chsChannel.find(checkHaveChannel);
      chsChannel[haveIndex].rate = value;
      dispatch({
        type:'merchant/setChannel',
        payload:chsChannel
      });
    }
  
    // 编辑手续费
    handleWithdrawFeeChange = (value,id)=>{
      const { merchant,dispatch } = this.props;
      const {chsChannel} = merchant;

      // 查找是否该通道是否存入channel数组
      let haveIndex;
      function checkHaveChannel(item,index){
        // 注意这里是item.id而不是item.channelId
        if(item.id == id){
          haveIndex = index;
        }
        return item.id == id;
      }
      chsChannel.find(checkHaveChannel);
      chsChannel[haveIndex].withdrawFee = value;
      dispatch({
        type:'merchant/setChannel',
        payload:chsChannel
      });
    }


    render() {
        const { updateModalVisible, handleUpdateModalVisible, handleUpdate, values, form,merchant,operate  } = this.props;
        const { getFieldDecorator } = form;
        const operateRecordList = operate.operateRecordList.data.rows;
        const { chsChannel } = merchant;
        const okHandle = () => {
            form.validateFields((err, fieldsValue) => {
                if (err) return;
                if (values.id) {
                    handleUpdate(fieldsValue, values.id, values.idCardPhoto, values.idCardBackPhoto, values.busLicense, values.bankOpenPermit, form);
                }
            });
        };
        return (
          <Modal
            width={1000}
            bodyStyle={{ padding: '32px 40px 48px' }}
            destroyOnClose
            title="编辑商户"
            visible={updateModalVisible}
            onOk={okHandle}
            onCancel={() => handleUpdateModalVisible(false, values)}
            afterClose={() => handleUpdateModalVisible()}
          >
            <Row gutter={{ md: 8, lg: 24, xl: 48 }} className={styles.headerName}>
                    基本信息
            </Row>

            <Row gutter={{ md: 8, lg: 24, xl: 48 }}>
              <Col span={24} md={24} lg={12}>
                <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="商户名称">
                  {form.getFieldDecorator('name', {
                                rules: [{ required: true, message: '请输入至多10个字符！', max: 10 }],
                                initialValue: values.name
                            })(<Input placeholder="请输入" />)}
                </FormItem>
              </Col>
              <Col span={24} md={24} lg={12}>
                <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="商户法人">
                  {form.getFieldDecorator('legalPerson', {
                                rules: [{ required: true, message: '请输入至多10个字符！', max: 10 }],
                                initialValue: values.legalPerson
                            })(<Input placeholder="请输入" />)}
                </FormItem>
              </Col>
            </Row>
            <Row gutter={{ md: 8, lg: 24, xl: 48 }}>
              <Col span={24} md={24} lg={12}>
                <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="手机号">
                  {form.getFieldDecorator('phone', {
                                rules: [{ required: true, pattern: /^1[3-9]{2}\d{8}$/, message: '请输入正确的手机号' }],
                                initialValue: values.phone
                            })(<Input placeholder="请输入" />)}
                </FormItem>
              </Col>
              <Col span={24} md={24} lg={12}>
                <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="身份证号">
                  {form.getFieldDecorator('idCardNo', {
                                rules: [{ required: true, message: '请输入正确的身份证号！', min: 18, max: 18 }],
                                initialValue: values.idCardNo
                            })(<Input placeholder="请输入" />)}
                </FormItem>
              </Col>
            </Row>
            <Row gutter={{ md: 8, lg: 24, xl: 48 }}>
              <Col span={24} md={24} lg={12}>
                <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="类型">
                  {form.getFieldDecorator('type', {
                                rules: [{ required: true }],
                                // initialValue: Number(values.type)
                                initialValue: values.merchNo.substr(0,4) == "9999" ? 0 : 1

                            })(
                              <Select placeholder="请选择" style={{ width: '100%' }} disabled>
                                <Option value={0} key={0}>主商户</Option>
                                <Option value={1} key={1}>子商户</Option>
                              </Select>)}
                </FormItem>
              </Col>
              <Col span={24} md={24} lg={12}>
                <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="营业执照">
                  {form.getFieldDecorator('busLicenseNo', {
                                rules: [{ required: true, message: '请输入正确的营业执照！', min: 8, max: 18 }],
                                initialValue: values.busLicenseNo
                            })(<Input placeholder="请输入" />)}
                </FormItem>
              </Col>
            </Row>
            <Row gutter={{ md: 8, lg: 24, xl: 48 }} className={styles.headerName}>
                    通道配置
            </Row>
            <Row gutter={{ md: 8, lg: 24, xl: 48 }}>
              {chsChannel && chsChannel.map((item,index)=>{
              return(
                <Row key={item.id} gutter={{ md: 8, lg: 24, xl: 48 }} style={{display:"flex",alignItems:"center",justifyContent:"space-around"}}>
                  {/* 此时chsItem中是name而不是channelName */}
                  {item.name + (item.status == '0' ? '(已失效)' : '')}:
                  <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="交易费率" style={{margin:0,width:250}}>
                    <InputNumber
                      disabled={item.status == 0}
                      defaultValue={item.rate}
                      step={0.01}
                      min={0}
                      max={1}
                      formatter={value => `${value}`}
                  //     parser={value => {
                  //                       const val = value.replace('%', '');
                  //                       return val;
                  // }}
                      onChange={(value)=>this.handleChargeFeeChange(value,item.id)}
                    />
                            
                  </FormItem>
                  <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="手续费率" style={{margin:0,width:250}}>
                    <InputNumber 
                      disabled={item.status == 0}
                      defaultValue={item.withdrawFee}
                      min={0} 
                      max={10} 
                      step={0.1} 
                      onChange={(value)=>this.handleWithdrawFeeChange(value,item.id)}
                    />
                  </FormItem>
                </Row>
              )
            })}
            </Row>

            <Row gutter={{ md: 8, lg: 24, xl: 48 }} className={styles.headerName}>
                    短信配置
            </Row>

            <Row gutter={{ md: 8, lg: 24, xl: 48 }}>
              <Col span={24} md={24} lg={12}>

                <Form.Item labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="短信开关">
                  {form.getFieldDecorator('messageSwitch', {
                          initialValue: values.messageSwitch == 1,
                            valuePropName:"checked",
                        })(
                          <Switch checkedChildren="开通" unCheckedChildren="关闭" />
                        )}
                </Form.Item>
            
                <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="可用条数:">
                  {form.getFieldDecorator('enableNum', {
                                initialValue: values.enableNum
                            })(<Input disabled type="number" placeholder="请输入" />)}
                </FormItem>
              </Col>
            </Row>
            <Row gutter={{ md: 8, lg: 24, xl: 48 }} className={styles.headerName}>
                    结算信息
            </Row>
            <Row gutter={{ md: 8, lg: 24, xl: 48 }}>
              <Col span={24} md={24} lg={12}>
                <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label=" 开户名称">
                  {form.getFieldDecorator('openAccountName', {
                                rules: [{ required: true, message: '请输入至多10个字符！', max: 10 }],
                                initialValue: values.openAccountName
                            })(<Input placeholder="请输入" />)}
                </FormItem>
              </Col>
              <Col span={24} md={24} lg={12}>
                <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="账户类型">
                  {form.getFieldDecorator('accountType', {
                                rules: [{ required: true, message: '请选择账户类型！', }],
                                initialValue: Number(values.accountType)
                            })(
                              <Select placeholder="请选择" style={{ width: '100%' }}>
                                <Option value={0}>对公</Option>
                                <Option value={1}>对私</Option>
                              </Select>
                            )}
                </FormItem>
              </Col>
              <Col span={24} md={24} lg={12}>
                <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="银行账号">
                  {form.getFieldDecorator('bankCard', {
                                rules: [{ required: true, message: '请输入至多19个字符！', min: 17, max: 19 }],
                                initialValue: values.bankCard
                            })(<Input placeholder="请输入" />)}
                </FormItem>
              </Col>

              <Col span={24} md={24} lg={12}>
                <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="支行信息">
                  {form.getFieldDecorator('subBranch', {
                                initialValue: values.subBranch
                            })(<Input placeholder="请输入" />)}
                </FormItem>
              </Col>
              <Col span={24} md={24} lg={12}>
                <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="权限">
                  <Select placeholder="请选择" style={{ width: '100%' }} disabled value="商户">
                    <Option value="48">商户</Option>
                  </Select>
                </FormItem>
              </Col>
            </Row>
            <Row gutter={{ md: 8, lg: 24, xl: 48 }} className={styles.headerName}>
                    资质上传
            </Row>
            <Row gutter={{ md: 8, lg: 24, xl: 48 }}>
              <Col span={24} md={24} lg={12}>
                <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="法人身份证正面">
                  <PicturesWall type="idCardPhoto" Picture={values.idCardPhoto} />
                </FormItem>
              </Col>
              <Col span={24} md={24} lg={12}>
                <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="法人身份证反面">
                  <PicturesWall type="idCardBackPhoto" Picture={values.idCardBackPhoto} />
                </FormItem>
              </Col>
            </Row>
            <Row gutter={{ md: 8, lg: 24, xl: 48 }}>
              <Col span={24} md={24} lg={12}>
                <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="营业执照照片">
                  <PicturesWall type="busLicense" Picture={values.busLicense} />
                </FormItem>
              </Col>
              <Col span={24} md={24} lg={12}>
                <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="银行开户许可证">
                  <PicturesWall type="bankOpenPermit" Picture={values.bankOpenPermit} />
                </FormItem>
              </Col>
              <Col span={24} md={24} lg={12}>
                <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="手持身份证">
                  <PicturesWall type="personWithIdPhoto" Picture={values.personWithIdPhoto} />·
                </FormItem>
              </Col>
              <Col span={24} md={24} lg={12}>
                <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="结算卡">
                  <PicturesWall type="bankCardPhoto" Picture={values.bankCardPhoto} />·
                </FormItem>
              </Col>
            </Row>
            <DescriptionList layout="horizontal" title="操作记录" style={{ marginTop: 20 }}>
              <OperateTable
                RecordList={operateRecordList}
                moduleName={Modular}
                operateType={operateType}
              />
            </DescriptionList>
          </Modal>

        );
    }
}

@connect(({ merchant,operate }) => ({
    merchant,operate
}))
class ShowForm extends PureComponent {
    static defaultProps = {
        values: {},
        handleShowModalVisible: () => { }
    };

    componentDidMount() {
        const { dispatch,values } = this.props;
        dispatch({
            type:'merchant/fetchDetail',
            payload:{
                id:values.id
            }
        })

    }

    render() {
        const { showModalVisible, handleShowModalVisible, values,operate } = this.props;
        const operateRecordList  = operate.operateRecordList.data.rows;
        return (
          <Modal
            width={1000}
            bodyStyle={{ padding: '32px 40px 48px' }}
            destroyOnClose
            title="商户详情"
            visible={showModalVisible}
            onCancel={() => handleShowModalVisible(false, values)}
            onOk={() => handleShowModalVisible(false, values)}
          >
            <DescriptionList size="large" title="基本信息">
              <Description term="商户名称">
                {values.name}
              </Description>
              <Description term="商户编号">
                {values.merchNo}
              </Description>
              <Description term="商户法人">
                {values.legalPerson}
              </Description>
              <Description term="所属上级">
                {values.sourceName}
              </Description>
              <Description term="创建时间">
                {moment(values.createDate).format('YYYY-MM-DD HH:mm:ss')}
              </Description>
              <Description term="邮箱">
                {values.mailbox}
              </Description>
              <Description term="手机号">
                {values.phone}
              </Description>
              <Description term="身份证号">
                {values.idCardNo}
              </Description>
              <Description term="类型">
                {/* {values.type == '1' ? '主商户' : '子商户'} */}
                {values.merchNo.substr(0,4) == "9999" ? '主商户' :'子商户'}
              </Description>
              <Description term="营业执照">
                {values.busLicenseNo}
              </Description>
            </DescriptionList>
            <Divider dashed />
            <DescriptionList size="large" title="通道配置" className={styles.channelList}>
              {values.merchChannelList.map(item => {
              let statusName = "";
               // 状态: 1:正常 0:可交易不可提现 -1 禁用 -2 上游禁用 
              if(item.status == 1){
                statusName = "正常"
              }else if(item.status == 0){
                statusName = "可交易不可提现"
              }else if(item.status == -1){
                statusName = "禁用"
              }else if(item.status == -2){
                statusName = "上游禁用"
              }
              return(
                <DescriptionList key={item.id} style={{}}>
                  <Description term="选择通道">
                    {item.channelName}
                  </Description>
                  <Description term="交易费率">
                    {item.transRate}
                  </Description>
                  <Description term="手续费">
                    {item.withdrawFee}
                  </Description>
                  <Description term="通道状态">
                    {
                    // 状态: 1:正常 0:可交易不可提现 -1 禁用 -2 上游禁用 
                  }
                    {statusName}
                  </Description>
                  <Description term="上游商户编号">
                    {item.customerNo}
                  </Description>
                </DescriptionList>
              )
            })}
            </DescriptionList>
            <Divider dashed />
            <DescriptionList size="large" title="结算信息">
              <Description term="开户名称">
                {values.openAccountName}
              </Description>
              <Description term="账户类型">
                {values.accountType == '0' ? '对公' : '对私'}
              </Description>
              <Description term="银行账号">
                {values.bankCard}
              </Description>
              <Description term="支行信息">
                {values.subBranch}
              </Description>
              <Description term="权限">
                        商户
              </Description>
            </DescriptionList>
            <Divider dashed />
            <DescriptionList size="large" title="资质信息">
              <Description term="法人身份证正面">
                <PicturesWall type="idCardPhoto" Picture={values.idCardPhoto} disabled />
              </Description>
              <Description term="法人身份证反面">
                <PicturesWall type="idCardBackPhoto" Picture={values.idCardBackPhoto} disabled />
              </Description>
              <Description term="营业执照照片">
                <PicturesWall type="busLicense" Picture={values.busLicense} disabled />
              </Description>
              <Description term="银行开户许可证">
                <PicturesWall type="bankOpenPermit" Picture={values.bankOpenPermit} disabled />
              </Description>
              <Description term="手持身份证">
                <PicturesWall type="personWithIdPhoto" Picture={values.personWithIdPhoto} disabled />
              </Description>
              <Description term="结算卡">
                <PicturesWall type="bankCardPhoto" Picture={values.bankCardPhoto} disabled />
              </Description>
            </DescriptionList>
            <DescriptionList layout="horizontal" title="操作记录" style={{ marginTop: 20 }}>
              <OperateTable
                RecordList={operateRecordList}
                moduleName={Modular}
                operateType={operateType}
              />
            </DescriptionList>
          </Modal>

        );
    }
}


/* eslint react/no-multi-comp:0 */
// 页面权限
@connect(({ merchant, payChannel, loading,operate,menu: { pagePermissions }}) => ({
    merchant,
    payChannel,
    operate,
    pagePermissions,
    loading: loading.models.rule,
}))
@Form.create()
class MerchantInfo extends PureComponent {
    constructor(props) {
        super(props)
        this.state = {
            modalVisible: false,
            showModalVisible: false,
            updateModalVisible: false,
            pageSize: 10,
            currentPage: 1,
            formValues: {},
            current:90,
            transStyle:''
        }
    }

    componentDidMount() {
        const { dispatch } = this.props;
        const { pageSize } = this.state;
        // 页面权限
        dispatch({
          type: 'menu/fetchButton',
        });
        dispatch({
            type: 'merchant/fetch',
            payload: {
                "pageNo": 1,
                "pageSize": pageSize,
            }
        });
        dispatch({
            type: 'payChannel/fetch',
            payload: {
              
            }
        });
    }

    // from表单确认事件
    handleSearch = (e) => {
        const { dispatch, form } = this.props;
        const { pageSize } = this.state;
        e.preventDefault();
        form.validateFields((err, fieldsValue) => {
            this.setState({
                formValues: fieldsValue,
                currentPage: 1
            });
            if (!err) {
              let dateStart = null;
              let dateEnd = null;
              if (fieldsValue.time != undefined) {
                dateStart = fieldsValue.time[0].format('YYYY-MM-DD 00:00:00');
                dateEnd = fieldsValue.time[1].format('YYYY-MM-DD 23:59:59');
              }
                dispatch({
                    type: 'merchant/fetch',
                    payload: {
                        ...fieldsValue,
                        dateStart,
                        dateEnd,
                        "pageNo": 1,
                        "pageSize": pageSize,
                    }
                });
            }
        })
    }

    // 点击所属上级
    handleClickDad = (e) =>{
        e.preventDefault();
        const { dispatch } = this.props;
        const { pageSize } = this.state;
        dispatch({
          type: 'merchant/fetch',
          payload: {
              "name":'vcmall',
              "pageNo": 1,
              "pageSize": pageSize,
          }
      });
    }

    // 重置
    handleFormReset = () => {
        const { form, dispatch } = this.props;
        const { pageSize } = this.state;
        this.setState({
            currentPage: 1,
            formValues: {}
        });
        form.resetFields();
        dispatch({
            type: 'merchant/fetch',
            payload: {
                "pageNo": 1,
                "pageSize": pageSize,
            },
        });
    };

    renderForm = () => {
        const { getFieldDecorator } = this.props.form;
        const { pagePermissions } = this.props;
        const auth = sessionStorage.getItem("auth");
        const title = judgePageAuth("subMerchant", pagePermissions) ? '子商户编号' : '商户编号';
        return (
          <Form labelCol={{ span: 4, md: 4, lg: 4 }} wrapperCol={{ span: 19, md: 19, lg: 19 }} onSubmit={this.handleSearch}>
            <Row>
              <Col span={24} md={24} lg={12}>
                
                {/* <FormItem label={auth === "root" || auth === "yunying" ? "商户编号" : "子商户编号"}> */}
                <FormItem label={title}>
                  {getFieldDecorator('merchNo',
                                {
                                    rules: []
                                }
                            )(<Input />)}
                </FormItem>
              </Col>
              <Col span={24} md={24} lg={12}>
                <FormItem label="手机号码">
                  {getFieldDecorator('phone',
                                {
                                    rules: []
                                }
                            )(<Input />)}
                </FormItem>
              </Col>
            </Row>
            <Row>
              <Col span={24} md={24} lg={12}>
                <FormItem label="商户类型">
                  {getFieldDecorator('type',
                                {
                                    rules: []
                                }
                            )(
                              <Select placeholder="请选择" style={{ width: '100%' }}>
                                <Option value="0">主商户</Option>
                                <Option value="1">子商户</Option>
                              </Select>
                            )}
                </FormItem>
              </Col>                     
              <Col span={24} md={24} lg={12}>
                <FormItem label="开通时间">
                  {getFieldDecorator('time',
                                {
                                    rules: []
                                }
                            )(<RangePicker />)}
                </FormItem>
              </Col>                 
            </Row>
            <Row>
              <Col span={24} md={24} lg={12}>
                <FormItem label={judgePageAuth("subMerchant", pagePermissions) ? "子商户法人" : "商户法人"}>
                  {getFieldDecorator('legalPerson',
                                {
                                    rules: []
                                }
                            )(<Input />)}
                </FormItem>
              </Col>
              <Col span={24} md={24} lg={12}>
                <FormItem label="通道状态">
                  {getFieldDecorator('merchChanneStatus',
                                {
                                    rules: []
                                }
                            )(
                              <Select placeholder="请选择" style={{ width: '100%' }}>
                                <Option value={1}>正常</Option>
                                <Option value={-2}>上游禁用</Option>
                              </Select>
                            )}
                </FormItem>
              </Col>
            </Row>
            <Row> 
              <Col span={24} md={24} lg={12} />
              <Col span={24} md={24} lg={12}>
                <FormItem className={styles.btnContainer}>
                  <Button type="primary" htmlType="submit">
                                  查询
                  </Button>
                  <Button style={{ marginLeft: 20 }} onClick={this.handleFormReset}>
                                  重置
                  </Button>
                </FormItem>
              </Col>
            </Row>
          </Form>
        )
    }

    renderCell = (text, width) => (
      <div style={{ width: `${width}`, overflow: "hidden", display: "inline-block", whiteSpace: 'nowrap', textOverflow: "ellipsis" }}>
        {text}
      </div>
    )


    handleUpdateModalVisible = (flag, record) => {
      const { dispatch } = this.props;
        this.setState({
            updateModalVisible: !!flag,
            updateFormValues: record || {},
        });
        if (flag) {
          dispatch({
            type: 'operate/fetch',
            payload: {
              modularType: "2",
              dataId: record.id
            },
          })
        }
    };

           
    handleShowModalVisible = (flag, record) => {
      const { dispatch } = this.props;
        this.setState({
            showModalVisible: !!flag,
            showFormValues: record || {},
        });
        if(flag){
          dispatch({
            type: 'operate/fetch',
            payload: {
              modularType:"2",
              dataId:record.id
            },
          })
        }
    };

    // 禁用
    prohibit = (flag, record) => {
        const { dispatch } = this.props;
        if (flag) {
            dispatch({
                type: 'merchant/statusAgent',
                payload: {
                    id: record.id,
                    type: 1
                }
            }).then(() => {
                message.success('禁用成功');
            });
            this.setState({
                currentPage: 1,
                formValues: {}
            });
        }
    }

    // 启用
    enable = (flag, record) => {
        const { dispatch } = this.props;
        if (flag) {
            dispatch({
                type: 'merchant/statusAgent',
                payload: {
                    id: record.id,
                    type: 0
                }
            }).then(() => {
                message.success('启用成功');
            });
        }
    }

    // 取消提示
    cancel = (e) => {
        // message.error('Click on No');
    }

    handleModalVisible = (flag, record) => {
        const { dispatch } = this.props;
        this.setState({
            modalVisible: !!flag,
            currentRecord: record,
        });
        if(!!flag === false){
          // 清空通道配置
          dispatch({
            type:'merchant/setChannel',
            payload:[]
          });
        }
    };

    handleAdd = (fields, form) => {
        const { dispatch, merchant } = this.props;
        const idCardPhoto = merchant.idCardPhoto ? merchant.idCardPhoto[0].response.data.path : '';
        const idCardBackPhoto = merchant.idCardBackPhoto ? merchant.idCardBackPhoto[0].response.data.path : '';
        const busLicense = merchant.busLicense ? merchant.busLicense[0].response.data.path : '';
        const bankOpenPermit = merchant.bankOpenPermit ? merchant.bankOpenPermit[0].response.data.path : '';
        // 判断通道配置中是否清空了某条填写值,如果清空,则不传该条数据
        function checkChannelData(item) {
          return item.channelId !== null  && item.tranRate !== null && item.withdrawFee !== null;
        }
        const channels = merchant.chsChannel.map(item=>{
          return({
            channelId:item.id,
            transRate:item.rate,
            withdrawFee:item.withdrawFee
          })
        })
        const realChannel = channels.filter(checkChannelData);
        if(realChannel.length === 0){
          message.error('请填写完整的通道信息！');
          return;
        }

        if (idCardPhoto && idCardBackPhoto && busLicense && bankOpenPermit) {
          fields.messageSwitch = fields.messageSwitch == true?1:0;
            dispatch({
                type: 'merchant/add',
                payload: {
                    ...fields,
                    merchChannelList:realChannel,
                    idCardPhoto:'',
                    idCardBackPhoto:'',
                    busLicense:'',
                    bankOpenPermit:''
                },
            }).then((res)=>{
              if(res.code === "SUCCESS"){
                this.handleModalVisible();  
                this.setState({
                  currentPage: 1,
                  formValues: {}
                });
                form.resetFields();
              }
            });

        } else {
            message.error('请完整上传商户资质图片！');
        }
    };

    handleUpdate = (fields, encryptionId, oldIdCardPhoto, oldIdCardBackPhoto, oldBusLicense, oldBankOpenPermit, form) => {
        const { dispatch, merchant } = this.props;
        const idCardPhoto = merchant.idCardPhoto ? merchant.idCardPhoto[0].response.data.path : oldIdCardPhoto;
        const idCardBackPhoto = merchant.idCardBackPhoto ? merchant.idCardBackPhoto[0].response.data.path : oldIdCardBackPhoto;
        const busLicense = merchant.busLicense ? merchant.busLicense[0].response.data.path : oldBusLicense;
        const bankOpenPermit = merchant.bankOpenPermit ? merchant.bankOpenPermit[0].response.data.path : oldBankOpenPermit;

        // 检查通道配置是否填写完整
        function checkChannelFormat (item){
          return item.status !== '0' && item.id !== null && item.transRate !== null && item.withdrawFee !== null;
        }
        const channels = merchant.chsChannel.map(item=>{
          return({
            channelId:item.id,
            transRate:item.rate,
            withdrawFee:item.withdrawFee,
            status:item.status
          });
        });
        const realChannel = channels.filter(checkChannelFormat);
        if(realChannel.length === 0){
          message.error('请填写完整的通道信息！');
          return;
        }
        if (idCardPhoto && idCardBackPhoto && busLicense && bankOpenPermit) {
          fields.messageSwitch = fields.messageSwitch == true?1:0;
            dispatch({
                type: 'merchant/update',
                payload: {
                    ...fields,
                    merchChannelList:realChannel,
                    id: encryptionId,
                    idCardPhoto,
                    idCardBackPhoto,
                    busLicense,
                    bankOpenPermit
                },
            })
            this.setState({
                currentPage: 1,
                formValues: {}
            });
            this.handleUpdateModalVisible();
            form.resetFields();

        } else {
            message.error('请完整上传商户资质图片！');
        }
    };

    handlePageChange = (pagination) => {
        const { dispatch } = this.props;
        const { pageSize, formValues } = this.state;
        this.setState({
            currentPage: pagination.current
        });
        dispatch({
            type: 'merchant/fetch',
            payload: {
                ...formValues,
                "pageNo": pagination.current,
                "pageSize": pageSize,
            }
        });
    }

    render() {
        const { merchant, payChannel,pagePermissions } = this.props;
        const { modalVisible, currentPage } = this.state;
        const channelList = payChannel.list.filter(item=>{
          return item.status == '1';
        });
        const auth = sessionStorage.getItem("auth");
        const { updateModalVisible, updateFormValues, showFormValues, showModalVisible } = this.state;
        const columns = [
            {
                title: judgePageAuth("subMerchant", pagePermissions) ? '子商户名称' : '商户名称',
                dataIndex: 'name',
                key: 'name',
                render: (item,record) => {     
                  return(
                    // item == null ? <a onClick={() => this.handleShowModalVisible(true, record)}> {record.username} </a>  :
                    // <a onClick={() => this.handleShowModalVisible(true, record)}> {item} </a> 
                    // 页面权限
                    judgePageAuth("detailMerchant", pagePermissions)  ?
                    ( item == null ? <a onClick={() => this.handleShowModalVisible(true, record)}> {record.username} </a>  :
                    <a onClick={() => this.handleShowModalVisible(true, record)}> {item} </a> )
                     :
                     ( item == null ?  record.username  : item )
                  )
                }
            },
            {
                title: judgePageAuth("subMerchant", pagePermissions) ? '子商户编号' : '商户编号',
                dataIndex: 'merchNo',
                key: 'merchNo',
            },
            {
              title: '商户类型',
              dataIndex: 'type',
              key: 'type',
              // render(data){
              //   return (
              //       {merchNo.substr(0,4) == "9999" ? '主商户' :'子商户'}
              //   )
              // }
              render: (text, record) => (
                record.merchNo.substr(0,4) == "9999" ? '主商户' :'子商户'
              ),
             
          },
            {
                title: '所属上级',
                dataIndex: 'sourceName',
                key: 'sourceName',
                render: (text) => (
                    judgePageAuth("subMerchant", pagePermissions) ? text :
                      (<a
                        style={{ whiteSpace: "noWrap" }}
                        onClick={this.handleClickDad}
                      >
                        {text}
                      </a> )
                ),
            },
            {
                title: '手机号码',
                dataIndex: 'phone',
                key: 'phone',
            },
            {
                title: '商户法人',
                dataIndex: 'legalPerson',
                key: 'legalPerson',
            },
            {
                title: '开通时间',
                dataIndex: 'createDate',
                key: 'createDate',
                render: val => val && <span>{moment(val).format('YYYY-MM-DD HH:mm:ss')}</span>,
            },

            {
                title: '通道',
                dataIndex: 'merchChannelList',
                key: 'merchChannelList',
                render: list =>
                  <div style={{ whiteSpace: "noWrap" }}>{list.map(item => {
                        return (
                          <Tag color={item.status == '1' ? 'green' : 'red'} className="textOverflow" style={{ maxWidth: '4rem' }} key={item.id}>
                            {item.channelName}
                          </Tag>
                        )
                    })}
                  </div>
            },
            {
                title: '状态',
                dataIndex: 'status',
                key: 'status',
                render: item => {
                    const value = Number(item) + 3;
                    return (
                      <div style={{ whiteSpace: "noWrap" }}><Badge status={statusMap[value]} text={status[value]} /></div>
                    )
                }

            },

            // {
            //     title: '操作',
            //     render: (text, record) => (
            //       <div style={{ whiteSpace: "noWrap" }}>
            //         <Authorized authority={["root", "yunying"]}>
            //           <a onClick={() => this.handleUpdateModalVisible(true, record)}>编辑</a>&nbsp;&nbsp;&nbsp;&nbsp;
            //         </Authorized>
            //         {
            //                 record.status == "-1" ?
            //                   <Popconfirm
            //                     title="确定启用吗"
            //                     onConfirm={() => this.enable(true, record)}
            //                     onCancel={() => this.cancel(true, record)}
            //                     okText="确定"
            //                     cancelText="取消"
            //                   >
            //                     <a href="#">启用</a>&nbsp;&nbsp;&nbsp;&nbsp;
            //                   </Popconfirm>
            //                     :
            //                   <Popconfirm
            //                     title="确定禁用吗"
            //                     onConfirm={() => this.prohibit(true, record)}
            //                     onCancel={() => this.cancel(true, record)}
            //                     okText="确定"
            //                     cancelText="取消"
            //                   >
            //                     <a href="#">禁用</a>&nbsp;&nbsp;&nbsp;&nbsp;
            //                   </Popconfirm>
            //             }
            //         {/* <a onClick={() => this.handleShowModalVisible(true, record)}>查看</a> */}
            //       </div>
            //     ),
            // },
        ];
         // 页面权限  是否展示表格操作列
        judgePageAuth("operateTableMerchant", pagePermissions) && columns.push({
          title: '操作',
          render: (text, record) => (
            <div style={{ whiteSpace: "noWrap" }}>
              {/* <Authorized authority={["root", "yunying"]}>
                <a onClick={() => this.handleUpdateModalVisible(true, record)}>编辑</a>&nbsp;&nbsp;&nbsp;&nbsp;
              </Authorized> */}
              {
                // 页面权限
                 judgePageAuth("editMerchant", pagePermissions) &&
                 (
                 <a onClick={() => this.handleUpdateModalVisible(true, record)}>编辑&nbsp;&nbsp;&nbsp;&nbsp;</a>
                 )
              }
              {
                  // 页面权限
                  judgePageAuth("openBtnMerchant", pagePermissions) &&
                  (
                    record.status == "-1" ?
                      <Popconfirm
                        title="确定启用吗"
                        onConfirm={() => this.enable(true, record)}
                        onCancel={() => this.cancel(true, record)}
                        okText="确定"
                        cancelText="取消"
                      >
                        <a href="#">启用</a>&nbsp;&nbsp;&nbsp;&nbsp;
                      </Popconfirm>
                      :
                      <Popconfirm
                        title="确定禁用吗"
                        onConfirm={() => this.prohibit(true, record)}
                        onCancel={() => this.cancel(true, record)}
                        okText="确定"
                        cancelText="取消"
                      >
                        <a href="#">禁用</a>&nbsp;&nbsp;&nbsp;&nbsp;
                      </Popconfirm> 
                  )
              }
              {/* <a onClick={() => this.handleShowModalVisible(true, record)}>查看</a> */}
            </div>
          ),
         },)
        const { total } = merchant.list;
        const pagination = {
            current: currentPage,
            pageSize: 10,
            total,
        }
        const parentMethods = {
            handleAdd: this.handleAdd,
            handleModalVisible: this.handleModalVisible,
        };
        const updateMethods = {
            handleUpdateModalVisible: this.handleUpdateModalVisible,
            handleUpdate: this.handleUpdate,
        };
        const showMethods = {
            handleShowModalVisible: this.handleShowModalVisible,
        };
        // const title = auth === "root" || auth === "yunying" ? '商户列表' : '子商户列表';
        // 页面权限
        const title = judgePageAuth("subMerchant", pagePermissions) ? '子商户列表' : '商户列表';
        return (
          <PageHeaderWrapper title={title}>
            <Card>
              <Row>
                {this.renderForm()}
              </Row>
              <Row>
                {/* <Authorized authority={["yunying", "root"]}>
                  <Button icon="plus" type="primary" onClick={() => this.handleModalVisible(true)}>
                                添加
                  </Button>
                </Authorized> */}
                {
                  // 页面权限
                   judgePageAuth("addMerchant", pagePermissions) &&
                   (
                   <Button icon="plus" type="primary" onClick={() => this.handleModalVisible(true)}>
                    添加
                   </Button>
                   )

                }
                <Table
                  dataSource={merchant.list.rows}
                  rowKey="id"
                  rowClassName="textCenter"
                  columns={columns}
                  pagination={pagination}
                  loading={merchant.loading}
                  bordered={false}
                  scroll={{ x: 'max-content' }}
                  onChange={this.handlePageChange}
                />
              </Row>
            </Card>
            <CreateForm {...parentMethods} modalVisible={modalVisible} channelList={channelList} />
            {updateFormValues && Object.keys(updateFormValues).length ? (
              <UpdateForm
                {...updateMethods}
                updateModalVisible={updateModalVisible}
                values={updateFormValues}
                channelList={channelList}
              />
                ) : null}
            {showFormValues && Object.keys(showFormValues).length ? (
              <ShowForm
                {...showMethods}
                showModalVisible={showModalVisible}
                values={showFormValues}
              />
                ) : null}
          </PageHeaderWrapper>
        )
    }
}
MerchantInfo.propTypes = {
    merchant: PropTypes.object
};

MerchantInfo.defaultProps = {
    merchant: {
        list: {
            rows: [],
            totalPage: 5
        }
    }
};
export default MerchantInfo;