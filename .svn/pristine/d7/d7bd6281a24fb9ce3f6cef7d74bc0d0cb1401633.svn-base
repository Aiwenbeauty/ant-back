import {
    query as queryMember, queryAllMember, saveOrUpdateMember, queryMemberType,
    saveOrUpdateAgentInfo, modifyMemberOrMemberCard, isProhibitOrEnable, inviteRecordList,
    seMemberRate, queryMemberNum, queryParentDetails, levelList, memberDetalis, examineIsAuth,
    queryMemberChannelList, toExamineAuth
} from '@/services/member';
import { notification } from 'antd';

export default {
    namespace: 'member',

    state: {
        loading: false,
        channelLoading:false,
        list: {
            rows: [],
            total: 0
        },
        inviteList: {
            data: {
                total: 0,
                rows: [],
                totalPage: 5
            }
        },
        typeList: [],

        memberNumDetailsList: [],
        parentMemberDateilsItem: { data: {} },
        memberLevelList: [],
        memberDetalisItem: { data: {} },
    },

    effects: {
        *fetch({ payload }, { call, put }) {
            const response = yield call(queryMember, payload);
            yield put({
                type: 'save',
                payload: response.data,
            });
        },
        *fetchAll({ payload }, { call, put }) {
            const response = yield call(queryAllMember, payload);
            yield put({
                type: 'save',
                payload: response.data,
            });
        },
        *fetchType(_, { call, put }) {
            const response = yield call(queryMemberType);
            yield put({
                type: 'saveType',
                payload: response.data,
            });
        },
        *saveOrUpdate({ payload }, { call, put }) {
            const response = yield call(saveOrUpdateMember, payload);
            if (response.code === 'SUCCESS') {
                const newFetch = yield call(queryMember, {
                    pageNo: 1,
                    pageSize: 10
                });
                yield put({
                    type: 'save',
                    payload: newFetch.data,
                });
                notification.success({
                    message: response.code,
                    description: response.msg,
                });
            } else {
                notification.error({
                    message: response.code,
                    description: response.msg,
                });
            }
        },
        *addAgentInfo({ payload }, { call, put }) {
            const response = yield call(saveOrUpdateAgentInfo, payload);
            if (response.code === 'SUCCESS') {
                const newFetch = yield call(queryMember, {
                    pageNo: 1,
                    pageSize: 10
                });
                yield put({
                    type: 'save',
                    payload: newFetch.data,
                });
                notification.success({
                    message: response.code,
                    description: response.msg,
                });
            } else {
                notification.error({
                    message: response.code,
                    description: response.msg,
                });
            }
        },

        *update({ payload }, { call, put }) {
            const response = yield call(modifyMemberOrMemberCard, payload);
            if (response.code === 'SUCCESS') {
                const newFetch = yield call(queryMember, {
                    pageNo: 1,
                    pageSize: 10
                });
                yield put({
                    type: 'save',
                    payload: newFetch.data,
                });
                notification.success({
                    message: response.code,
                    description: response.msg,
                });
            } else {
                notification.error({
                    message: response.code,
                    description: response.msg,
                });
            }
        },
        *statusMember({ payload }, { call, put }) {
            const response = yield call(isProhibitOrEnable, payload);
            if (response.code === 'SUCCESS') {
                const newFetch = yield call(queryMember, {
                    pageNo: 1,
                    pageSize: 10
                });
                yield put({
                    type: 'save',
                    payload: newFetch.data,
                });
            } else {
                notification.error({
                    message: response.code,
                    description: response.msg,
                });
            }
        },
        *invite({ payload }, { call, put }) {
            const response = yield call(inviteRecordList, payload);
            yield put({
                type: 'inviteSave',
                payload: response,
            });
        },
        *seMemberRate({ payload }, { call, put }) {
            const response = yield call(seMemberRate, payload);
            if (response.code === 'SUCCESS') {
                const newFetch = yield call(queryMember, {
                    pageNo: 1,
                    pageSize: 10
                });
                yield put({
                    type: 'save',
                    payload: newFetch.data,
                });
            } else {
                notification.error({
                    message: response.code,
                    description: response.msg,
                });
            }
        },
        //获取下级会员数  下级商户数  下级店主数
        *queryMemberNum({ payload }, { call, put }) {
            const response = yield call(queryMemberNum, payload);
            yield put({
                type: 'memberNumDetails',
                payload: response
            });
        },
        //获取上级 代理 会员详情
        *queryParentDetails({ payload }, { call, put }) {
            const response = yield call(queryParentDetails, payload);
            yield put({
                type: 'parentMemberDateils',
                payload: response
            });
        },
        //会员等级列表
        *levelLists({ payload }, { call, put }) {
            const response = yield call(levelList, payload);
            yield put({
                type: 'memberLevelList',
                payload: response
            });
        },

        //会员详情
        *memberDetalis({ payload }, { call, put }) {
            const response = yield call(memberDetalis, payload);
            if (response.code === 'SUCCESS') {
                yield put({
                    type: 'memberDetalisItem',
                    payload: response
                });
            } else {
                notification.error({
                    message: response.code,
                    description: response.msg,
                });
            }
        },

        // 操作会员资质审核
        *examineIsAuth({ payload }, { call, put }) {
            const response = yield call(examineIsAuth, payload);
            if (response.code === 'SUCCESS') {
                notification.success({
                    message: response.code,
                    description: response.msg,
                });
            } else {
                notification.error({
                    message: response.code,
                    description: response.msg,
                });
            }
            return response;
        },

        // 获取会员通道信息
        *queryMemberChannelList({ payload }, { call, put }) {
            yield put({
                type: 'setChannelLoading',
            });
            const response = yield call(queryMemberChannelList, payload);
            yield put({
                type: 'getMemberChannelList',
                payload: response.data
            });
            return response;

        },

        //会员资质提交通道审核
        *toExamineAuth({ payload }, { call, put }) {
            yield put({
                type: 'setChannelLoading',
                payload:true,
            });
            const response = yield call(toExamineAuth, payload);
            if (response.code === 'SUCCESS') {
                notification.success({
                    message: response.code,
                    description: response.msg,
                });

                const res = yield call(queryMemberChannelList, {id:payload.memberId});
                yield put({
                    type: 'getMemberChannelList',
                    payload: res.data
                });
            } else {
                notification.error({
                    message: response.code,
                    description: response.msg,
                });
            }
            yield put({
                type: 'setChannelLoading',
                payload:false,
            });
            // const test = [{
            //     channelCode: "YEEPAY",
            //     channelId: null,
            //     channelName: "易宝支付",
            //     createTime: null,
            //     examineStatus: 3,
            //     id: null,
            //     isSetrate: null,
            //     memberId: 119,
            //     pageNo: null,
            //     pageSize: null,
            //     reason: null
            // }]
            // yield put({
            //     type: 'getMemberChannelList',
            //     payload: test
            // });
            return response;
        },




    },

    reducers: {
        loading(state) {
            return {
                ...state,
                loading: true
            };
        },
        save(state, action) {
            return {
                ...state,
                list: action.payload,
            };
        },
        inviteSave(state, action) {
            return {
                ...state,
                inviteList: action.payload,
            };
        },
        saveType(state, action) {
            return {
                ...state,
                typeList: action.payload,
            };
        },
        memberNumDetails(state, action) {
            return {
                ...state,
                memberNumDetailsList: action.payload,
            }
        },
        parentMemberDateils(state, action) {
            return {
                ...state,
                parentMemberDateilsItem: action.payload,
            }
        },
        memberLevelList(state, action) {
            return {
                ...state,
                memberLevelList: action.payload
            }
        },
        memberDetalisItem(state, action) {
            return {
                ...state,
                memberDetalisItem: action.payload
            }
        },
        getMemberChannelList(state, action) {
            return {
                ...state,
                memberChannelList: action.payload
            }
        },
        setChannelLoading(state,action) {
            return {
                ...state,
                channelLoading: action.payload
            }
        },

    }
};
