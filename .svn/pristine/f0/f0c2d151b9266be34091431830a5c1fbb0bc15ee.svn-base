import {  queryLogs,downloadTransactionRecord,sumTransactionRecord ,transactionRecordSum,handlErepairOdd} from '@/services/TransactionRecord';

export default {
  namespace: 'tran',

  state: {
    list: [],
    downloadList:[],
    sumTransactionRecord:[],
    loading:false,
    transactionItem: {},
  },

  effects: {
    *fetch({ payload }, { call, put } ,) {
      yield put({
        type: 'loading',
      });
      const response =  yield call(queryLogs,payload);
      yield put({
        type: 'save',
        payload:response
      });
    },
    *download({ payload }, { call, put } ,) {
      yield put({
        type: 'loading',
      });
      const response =  yield call(downloadTransactionRecord,payload);
      yield put({
        type: 'downloadsave',
        payload:response
      });
    },

    *sum({ payload }, { call, put } ,) {
      yield put({
        type: 'loading',
      });
      const response =  yield call(sumTransactionRecord,payload);
      yield put({
        type: 'sumsave',
        payload:response
      });
    },
    // 交易汇总
    *sumTransaction({ payload }, { call, put }, ) {
      const response = yield call(transactionRecordSum, payload);
      yield put({
        type: 'sumTransactionItem',
        payload: response.data
      });
    },
    *handlErepairOdd({ payload }, { call, put } ,) {
      yield put({
        type: 'loading',
      });
      const response =  yield call(queryLogs,payload);
      yield put({
        type: 'save',
        payload:response
      });
    },

    *handlErepairOdd({ payload }, { call, put }) {
      const response = yield call(handlErepairOdd, payload);
      if (response.code === 'SUCCESS') {

        const newFetch = yield call(queryLogs, {
          pageNo: 1,
          pageSize: 10
      });
      yield put({
          type: 'save',
          payload: newFetch,
      });
      } else {
          notification.error({
              message: response.code,
              description: response.msg,
          });
      }
  },
  },

  reducers: {
    loading(state){
      return {
        ...state,
        loading:true
      };
    },

    save(state, action) {
      return {
        ...state,
        list: action.payload,
        loading:false
      };
    },
    downloadsave(state, action) {
      return {
        ...state,
        downloadList: action.payload.data,
        loading:false
      };
    },
    sumsave(state, action) {
      return {
        ...state,
        sumTransactionRecord: action.payload.data,
        loading:false
      };
    },
    sumTransactionItem(state, action) {
      return {
        ...state,
        transactionItem: action.payload,
        loading:false
      };
    },
}
};
