import React, { PureComponent, Fragment } from 'react';
import { connect } from 'dva';
import { Card, Form, Input, Select, Button, Modal, } from 'antd';
import StandardTable from '@/components/StandardTable';
import PageHeaderWrapper from '@/components/PageHeaderWrapper';

import styles from './productCategory.less';

const FormItem = Form.Item;

@Form.create()
class CreateForm extends PureComponent {
  // CreateForm 主件 传入
  constructor(props) {
    super(props)
    this.state = {
      checkedKeys: [],
      halfCheckedKeys: [],
    }
  }

  render() {
    const { modalVisible, form, handleAdd, handleModalVisible } = this.props;
    const okHandle = () => {
      form.validateFields((err, fieldsValue) => {
        if (err) return;
        if (this.props.values) {
          fieldsValue.id = this.props.values.id
        }
        const addValue = {
          ...fieldsValue
        }
        handleAdd(addValue,form);
      });
    };

    const row = this.props.values ? this.props.values : { name: "", sort: "", description: "" }
    const title = this.props.values ? "编辑分类" : "新建分类";
    return (
      <Modal
        maskClosable={false}
        destroyOnClose
        width={840}
        title={title}
        visible={modalVisible}
        onOk={okHandle}
        onCancel={() => handleModalVisible()}
      >
        <FormItem labelCol={{ span: 5 }} wrapperCol={{ span: 15 }} label="分类名称">
          {form.getFieldDecorator('name', {
            initialValue: row.name,
            rules: [{ required: true, message: '请输入分类名称！' }],
          })(<Input placeholder="请输入分类名称" />)}
        </FormItem>
        <FormItem labelCol={{ span: 5 }} wrapperCol={{ span: 15 }} label="排序">
          {form.getFieldDecorator('sort', {
            initialValue: row.sort,
            rules: [{ required: true, message: '请输入排序！' }],
          })(<Input placeholder="请输入排序！" type="number" />)}
        </FormItem>
        <FormItem labelCol={{ span: 5 }} wrapperCol={{ span: 15 }} label="描述">
          {form.getFieldDecorator('description', {
            initialValue: row.description,
            rules: [{ required: true, message: '请输入描述！' }],
          })(<Input placeholder="请输入描述" />)}
        </FormItem>
      </Modal>
    );
  }
}
/**
 * 请求组件 需放在主class 上面
 */
@connect(({ productCategory }) => ({
  productCategory,
}))
@Form.create()
class productCategory extends PureComponent {

  state = {
    modalVisible: false,
    updateModalVisible: false,
    selectedRows: [],
    formValues: {},
    record: {},
  };

  /**
   * 初始化数据
   */
  static defaultProps = {
    productCategory: {
      list: []
    },
  };


  columns = [
    {
      title: '分类名称',
      dataIndex: 'name',
      key: 'name',
    },
    {
      title: '排序',
      dataIndex: 'sort',
      key: 'sort',
    },
    {
      title: '分类描述',
      dataIndex: 'description',
      key: 'description',
    },
    {
      title: '操作',
      render: (text, record) => (
        <Fragment>
          <a onClick={() => this.handleModalVisible(true, record)}>编辑</a>
        </Fragment>
      ),
    },
  ];


  /**
   * 初始化加载数据
   */
  componentDidMount() {
    const { dispatch } = this.props;
    dispatch({
      type: 'productCategory/fetch',
      payload: {}
    });
  }

  /**
   * 选择行数据
   */
  handleSelectRows = rows => {
    this.setState({
      selectedRows: rows,
    });
  };


  /**
   * 删除分类数据
   */
  handleMenuClick = e => {
    const { dispatch } = this.props;
    const { selectedRows } = this.state;
    if (selectedRows.length === 0) return;
    const selectedRowKeys = selectedRows.map(item => {
      return item.id
    })
    dispatch({
      type: 'productCategory/remove',
      payload: selectedRowKeys,
      callback: () => {
        this.setState({
          selectedRows: [],
        });
      },
    });
  };

  /**
   * 操作弹框
   */
  handleModalVisible = (flag, record) => {
    this.setState({
      modalVisible: !!flag,
      record
    });
  };

  /**
   * 保存类别
   */
  handleAdd = (fields,form) => {
    const { dispatch } = this.props;
    dispatch({
      type: 'productCategory/add',
      payload: fields,
    }).then((res) => {
      if (res.code === "SUCCESS") {
        form.resetFields();
        this.handleModalVisible();
      }
    });

  };


  /**
   * 分页查询动作
   */
  handleStandardTableChange = (pagination, sorter) => {
    const { dispatch } = this.props;
    const { formValues } = this.state;
    const params = {
      currentPage: pagination.current,
      pageSize: pagination.pageSize,
      ...formValues,
    };
    if (sorter.field) {
      params.sorter = `${sorter.field}_${sorter.order}`;
    }
    dispatch({
      type: 'productCategory/fetch',
      payload: params,
    });
  };


  render() {
    const {
      productCategory,
      dispatch,
    } = this.props;
    const productCategoryList = productCategory.list;
    const { selectedRows, modalVisible, record } = this.state;

    const parentMethods = {
      handleAdd: this.handleAdd,
      handleModalVisible: this.handleModalVisible,
    };
    return (
      <PageHeaderWrapper title="商品分类">
        <Card bordered={false}>
          <div className={styles.tableList}>
            <div className={styles.tableListOperator}>
              <Button icon="plus" type="primary" onClick={() => this.handleModalVisible(true)}>
                新建
              </Button>
              {selectedRows.length > 0 && (
                <span>
                  <Button onClick={this.handleMenuClick}>批量删除</Button>
                </span>
              )}
            </div>
            <StandardTable
              rowKey='id'
              rowClassName="textCenter"
              selectedRows={selectedRows}
              data={productCategoryList}
              columns={this.columns}
              onSelectRow={this.handleSelectRows}
              onChange={this.handleStandardTableChange}
            />
          </div>
        </Card>
        <CreateForm {...parentMethods} modalVisible={modalVisible} productCategoryList={productCategoryList} values={record} dispatch={dispatch} />
      </PageHeaderWrapper>
    );
  }

}

export default productCategory;
