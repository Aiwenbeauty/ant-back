import React, { PureComponent, Fragment } from 'react';
import { connect } from 'dva';
import { formatMessage, FormattedMessage } from 'umi-plugin-react/locale';
import moment from 'moment';
import router from 'umi/router';
import {Row,Col,Card,Form,Input,Select,Icon,Button,Dropdown,Menu, Modal,Switch,TimePicker,Alert, InputNumber,Tag,Radio,Collapse,} from 'antd';
import StandardTable from '@/components/StandardTable';
import PageHeaderWrapper from '@/components/PageHeaderWrapper';
import Authorized from '@/utils/Authorized';
import CryptoJS from 'crypto-js';
import agentStyles from "../Agent/Agent.less";

import styles from './SystemSetting.less';
const { Panel } = Collapse;
const FormItem = Form.Item;
const { Option } = Select;
const customPanelStyle = {
  background: '#f7f7f7',
  borderRadius: 4,
  marginBottom: 24,
  border: 0,
  overflow: 'hidden',
};

/**
 * 接口请求
 */
@connect(({ systemSetting, loading }) => ({
  systemSetting,
  loading: loading.models.rule,
}))

@Form.create()
class SystemSetting extends PureComponent {
  /**
   * 初始化数据
   */
  static defaultProps = {
    systemSetting: {
      list: {
        phone:''
      },
    },
    
  };

  state = { open: false };

  /**
   * 保存
   */
  handleSubmit = e => {
    const { dispatch, form,systemSetting } = this.props;
    e.preventDefault();
    form.validateFieldsAndScroll((err, values) => {
      if (!err) {
        if(systemSetting.list){
          values.id = systemSetting.list.id;
        }
      
        values.mallSwitch =  values.mallSwitch ? 1:0;
        values.tradeSwitch =  values.tradeSwitch ? 1:0;
        values.memberWithdrawSwitch =  values.memberWithdrawSwitch ? 1:0;
        values.agentWithdrawSwitch =  values.agentWithdrawSwitch ? 1:0;
        values.agentAuthSwitch =  values.agentAuthSwitch ? 1:0;
        values.tradeStartTime = values.tradeStartTime.format('HH:mm:ss')
        values.tradeEndTime = values.tradeEndTime.format('HH:mm:ss')
        console.log("起始时间：" + values.tradeStartTime);
        console.log("结束时间：" + values.tradeEndTime);
        dispatch({
          type: 'systemSetting/add',
          payload: values,
        });
      }
    });
  };

  /**
   * 初始化加载数据
   */
  componentDidMount() {
    const { dispatch } = this.props;
    dispatch({
      type: 'systemSetting/fetch',
    });
  }

  
  handleOpenChange = open => {
    this.setState({ open });
  };

  handleClose = () => this.setState({ open: false });

  onchange(time, timeString) {
    console.log(time, timeString);
  }
  

  render(){
    const { values, form,submitting,systemSetting} = this.props;
    //手机号码初始加载
    const row = systemSetting.list ? systemSetting.list : {"phone":"","picUrl":"","mallSwitch" : ""};

    // function onChange(time, timeString) {
    //   console.log(time, timeString);
    // }
    return(
      <PageHeaderWrapper title="系统基础配置">
      <Card>
      <Row>
        <Form layout='horizontal' labelCol={{ span: 4 }} wrapperCol={{ span: 14 }} onSubmit={this.handleSubmit}>
        <Collapse>
          <Panel header="基础配置" key="1" style={customPanelStyle}>   
          <Form.Item label="客服号码">
            {form.getFieldDecorator('phone', {
                          initialValue: row.phone,
                          rules: [{ required: true, message: '请输入正确的手机号码!' }],
                      })(
                        <Input prefix={<Icon type="lock" style={{ color: 'rgba(0,0,0,.25)' }} />} type="number" placeholder="请输入客服号码" />
                      )}
          </Form.Item>

          <Form.Item wrapperCol={{ offset: 4 }}>
            <Button type='primary' htmlType="submit">提交</Button>
          </Form.Item>


          <Form.Item label="图片服务器Url">
            {form.getFieldDecorator('picUrl', {
                          initialValue: row.picUrl,
                          rules: [{ required: true, message: '请输入正确的url!' }],
                      })(
                        <Input prefix={<Icon type="lock" style={{ color: 'rgba(0,0,0,.25)' }} />} type="text" placeholder="请输入正确的url" />
                      )}
          </Form.Item>

          <Form.Item label="身份证ocr次数">
            {form.getFieldDecorator('idcardOcrNum', {
                          initialValue: row.idcardOcrNum,
                          rules: [{ required: true, message: '请输入正确的值!' }],
                      })(
                        <Input style={{width : 150}} type="number" placeholder="请输入正确的值" />
                      )}
          </Form.Item>


          <Form.Item label="银行卡ocr次数">
            {form.getFieldDecorator('bankCardOcrNum', {
                          initialValue: row.idcardOcrNum,
                          rules: [{ required: true, message: '请输入正确的值!' }],
                      })(
                        <Input style={{width : 150}} type="number" placeholder="请输入正确的值" />
                      )}
          </Form.Item>

          <Form.Item wrapperCol={{ offset: 4 }}>
            <Button type='primary' htmlType="submit">提交</Button>
          </Form.Item>
          </Panel>

          <Panel header="商城购物配置" key="2" style={customPanelStyle}> 
            <Form.Item label="商城购物开关">
              {form.getFieldDecorator('mallSwitch', {
                          initialValue: row.mallSwitch == 1?true:false,
                            valuePropName:"checked",
                        })(
                          <Switch checkedChildren="允许交易" unCheckedChildren="关闭交易" />
                        )}
            </Form.Item>

            <Form.Item wrapperCol={{ offset: 4 }}>
              <Button type='primary' htmlType="submit">提交</Button>
            </Form.Item>
          </Panel>  

          <Panel header="商城进货配置" key="3" style={customPanelStyle}>
          <Form.Item label="商城进货开关">
            {form.getFieldDecorator('tradeSwitch', {
                        initialValue: row.tradeSwitch == 1?true:false,
                          valuePropName:"checked",
                      })(
                        <Switch checkedChildren="允许交易" unCheckedChildren="关闭交易" />
                      )}
          </Form.Item>

          <Form.Item label="进货交易时间">
          
            {form.getFieldDecorator('tradeStartTime', {
                        initialValue: moment(row.tradeStartTime,'HH:mm:ss'),
                      })(
                        <TimePicker
                        placeholder = "开始时间"
                        onChange={onchange}/>
                      )}
                 <span> &nbsp; &nbsp;</span>
              {form.getFieldDecorator('tradeEndTime', {
                                      initialValue:moment( row.tradeEndTime,'HH:mm:ss'),
                                    })(
                                      <TimePicker
                                      placeholder = "结束时间"
                                         onChange={onchange}/>
                                    )}

                                &nbsp; &nbsp;   &nbsp;   
                            <Tag color="red">当前交易时间 : {row.tradeStartTime} ~ {row.tradeEndTime}</Tag>
          </Form.Item>
            <Form.Item wrapperCol={{ offset: 4 }}>
              <Button type='primary' htmlType="submit">提交</Button>
            </Form.Item>
          </Panel> 

          <Panel header="会员提现配置" key="4" style={customPanelStyle}>
          <Form.Item label="提现开关">
            {form.getFieldDecorator('memberWithdrawSwitch', {
                        initialValue: row.memberWithdrawSwitch == 1?true:false,
                          valuePropName:"checked",
                      })(
                        <Switch checkedChildren="允许提现" unCheckedChildren="关闭提现" />
                      )}
          </Form.Item>
        
          <Form.Item label="会员提现限额" >
           <span>最低提现额度：</span>
            {form.getFieldDecorator('memberMinAmount', {
                          initialValue: row.memberMinAmount,
                          rules: [{ required: true, message: '请输入正确的值!' }],
                      })(
                        <Input style={{width : 150}} prefix={<Icon style={{ color: 'rgba(0,0,0,.25)' }} />} type="number" placeholder="最低提现额度"   />
                      )}
          &nbsp;<span>最高提现额度：</span>
          {form.getFieldDecorator('memberMaxAmount', {
                          initialValue: row.memberMaxAmount,
                          rules: [{ required: true, message: '请输入正确的值!' }],
                      })(
                        <Input style={{width : 150}} prefix={<Icon style={{ color: 'rgba(0,0,0,.25)' }} />} type="number"placeholder="最高提现额度"    />
                      )}

                &nbsp; &nbsp;   
                <Tag color="red">当前值 : {row.memberMinAmount} ~ {row.memberMaxAmount}</Tag>
          </Form.Item>

          <Form.Item label="会员提现手续费" >
           
            {form.getFieldDecorator('memberWithdrawAmount', {
                          initialValue: row.memberWithdrawAmount,
                          rules: [{ required: true, message: '请输入正确的值!' }],
                      })(
                        <Input style={{width : 150}} prefix={<Icon style={{ color: 'rgba(0,0,0,.25)' }} />} type="number" placeholder="最低提现额度"   />
                      )}
    
                &nbsp;&nbsp;<Tag color="red">当前值 : {row.memberWithdrawAmount}</Tag>
          </Form.Item>

          <Form.Item wrapperCol={{ offset: 4 }}>
            <Button type='primary' htmlType="submit">提交</Button>
          </Form.Item>
          </Panel>

          <Panel header="代理提现配置" key="5" style={customPanelStyle}>
          <Form.Item label="提现开关">
            {form.getFieldDecorator('agentWithdrawSwitch', {
                        initialValue: row.agentWithdrawSwitch == 1?true:false,
                          valuePropName:"checked",
                      })(
                        <Switch checkedChildren="允许提现" unCheckedChildren="关闭提现" />
                      )}
          </Form.Item>
          

          <Form.Item label="代理提现限额" >
           

          <span>最低提现额度：</span>
           {form.getFieldDecorator('agentMinAmount', {
                         initialValue: row.agentMinAmount,
                         rules: [{ required: true, message: '请输入正确的值!' }],
                     })(
                       <Input style={{width : 150}} prefix={<Icon style={{ color: 'rgba(0,0,0,.25)' }} />} type="number" placeholder="最低提现额度"   />
                     )}
         &nbsp; <span>最高提现额度：</span>
         {form.getFieldDecorator('agentMaxAmount', {
                         initialValue: row.agentMaxAmount,
                         rules: [{ required: true, message: '请输入正确的值!' }],
                     })(
                       <Input style={{width : 150}} prefix={<Icon style={{ color: 'rgba(0,0,0,.25)' }} />} type="number"placeholder="最高提现额度"    />
                     )}

                &nbsp; &nbsp;   
                <Tag color="red">当前值 : {row.agentMinAmount} ~ {row.agentMaxAmount}</Tag>
         </Form.Item>

         <Form.Item wrapperCol={{ offset: 4 }}>
            <Button type='primary' htmlType="submit">提交</Button>
          </Form.Item>
          </Panel>

          <Panel header="代理税率配置" key="6" style={customPanelStyle}>
          <Form.Item >
           
           <span>提现税率(%)：</span>
            {form.getFieldDecorator('processFee', {
                          initialValue: row.processFee,
                          rules: [{ required: true, message: '请输入正确的值!' }],
                      })(
                        <Input style={{width : 150}}  placeholder="提现税率(%)"   />
                      )}
          &nbsp; <span>提现手续费：</span>
          {form.getFieldDecorator('withdrawFee', {
                          initialValue: row.withdrawFee,
                          rules: [{ required: true, message: '请输入正确的值!' }],
                      })(
                        <Input style={{width : 150}}  placeholder="提现手续费"    />
                      )}
 
          </Form.Item>
          <Form.Item wrapperCol={{ offset: 4 }}>
             <Button type='primary' htmlType="submit">提交</Button>
           </Form.Item>
 
          <Row gutter={{ md: 8, lg: 24, xl: 48 }} className={agentStyles.headerName}>代理鉴权配置</Row>
 
           <Form.Item label="代理鉴权开关">
             {form.getFieldDecorator('agentAuthSwitch', {
                         initialValue: row.agentAuthSwitch == 1?true:false,
                           valuePropName:"checked",
                       })(
                         <Switch checkedChildren="允许鉴权" unCheckedChildren="关闭鉴权" />
                       )}
           </Form.Item>
           <Form.Item wrapperCol={{ offset: 4 }}>
             <Button type='primary' htmlType="submit">提交</Button>
           </Form.Item>
            </Panel> 

            <Panel header="开店审核配置" key="7" style={customPanelStyle}>
                <Form.Item label="开店审核">
                {form.getFieldDecorator('examineSwitch', {
                            initialValue: row.examineSwitch
                          })(
                            <Radio.Group >
                              <Radio value={0}>人工审核</Radio>
                              <Radio value={1}>系统审核</Radio>
                            </Radio.Group>
                          )}
              </Form.Item>
              <Form.Item wrapperCol={{ offset: 4 }}>
                <Button type='primary' htmlType="submit">提交</Button>
              </Form.Item>
            </Panel>

            <Panel header="APP基础配置" key="8" style={customPanelStyle}>
                <Form.Item label="开店是否显示系统相册">
                {form.getFieldDecorator('photoSwitch', {
                            initialValue: row.photoSwitch
                          })(
                            <Radio.Group >
                              <Radio value={0}>关闭</Radio>
                              <Radio value={1}>开启</Radio>
                            </Radio.Group>
                          )}
              </Form.Item>
              <Form.Item wrapperCol={{ offset: 4 }}>
                <Button type='primary' htmlType="submit">提交</Button>
              </Form.Item>
            </Panel>
      </Collapse>
          
      
      
          
        </Form>
      </Row>
    </Card></PageHeaderWrapper>)

  }

}

export default SystemSetting;
