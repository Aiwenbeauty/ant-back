import React, { Fragment } from 'react';
import { formatMessage, FormattedMessage } from 'umi-plugin-react/locale';
import ReactHTMLTableToExcel from 'react-html-table-to-excel';
import { connect } from 'dva';
import { Row, Col, Card, Table, Modal, Select, DatePicker, Form, Input, Button, Divider, InputNumber } from 'antd';
import DescriptionList from '@/components/DescriptionList';
import PropTypes from 'prop-types';
import moment from "moment";
import styles from "../Log/Log.less";

const { Description } = DescriptionList;
const { Option } = Select;
const { RangePicker } = DatePicker;
@Form.create()
/* eslint react/no-multi-comp:0 */
@connect(({ log, loading }) => ({
  log,
  loading: loading.models.rule,
}))
class SettlementList extends React.Component {
  constructor(props) {
    super(props)
    this.state = {
      modalVisible: false,
      currentRecord: null,
      pageSize: 10,
    }
  }

  componentDidMount() {
    const { dispatch } = this.props;
    const { pageSize } = this.state;
    dispatch({
      type: 'log/fetch',
      payload: {
        "currentPage": 1,
        "pageSize": pageSize,
      }
    });
    const table = document.getElementsByTagName('table')[0];
    table.setAttribute('id', 'realtime-trans-table');
  }

  handleSearch = (e) => {
    const { dispatch, form } = this.props;
    const { pageSize } = this.state;
    e.preventDefault();
    form.validateFields((err, fieldsValue) => {
      if (!err) {
        const value = {
          requestURI: fieldsValue.requestURI,
          classMethod: fieldsValue.classMethod,
          method: fieldsValue.method,
          returnType: fieldsValue.returnType,
          startTime: fieldsValue.time[0].format('YYYY-MM-DD 00:00:00'),
          endTime: fieldsValue.time[1].format('YYYY-MM-DD 23:59:59'),
        }
        dispatch({
          type: 'log/fetch',
          payload: {
            ...value,
            "currentPage": 1,
            "pageSize": pageSize,
          }
        });
      }
    })
  }

  handleFormReset = () => {
    const { form, dispatch } = this.props;
    const { pageSize } = this.state;
    form.resetFields();
    dispatch({
      type: 'log/fetch',
      payload: {
        "currentPage": 1,
        "pageSize": pageSize,
      },
    });
  };

  renderForm = () => {
    const { getFieldDecorator } = this.props.form;
    const FormItem = Form.Item;
    return (
      <Form labelCol={{ span: 4, md: 4, lg: 8 }} wrapperCol={{ span: 19, md: 19, lg: 16 }} onSubmit={this.handleSearch}>
        <Row>
          <Col span={24} md={24} lg={8}>
            <FormItem label="商户号">
              {getFieldDecorator('num')(<Input placeholder="请输入" />)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={8}>
            <FormItem label="终端号">
              {getFieldDecorator('name')(<Input placeholder="请输入" />)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={8}>
            <FormItem label="结算日期">
              {getFieldDecorator('date')(
                <RangePicker style={{ width: '100%' }} />
              )}
            </FormItem>
          </Col>
        </Row>
        <Row>
          <Col span={24} md={24} lg={8}>
            <FormItem label="汇总类型">
              {getFieldDecorator('status4')(
                <Select placeholder="按商户号" style={{ width: '100%' }}>
                  <Option value="0">按商户号</Option>
                  <Option value="1">按终端号</Option>
                </Select>
              )}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={8}>
            <FormItem className={styles.btnContainer}>
              <Button type="primary" htmlType="submit">
                查询
              </Button>
              <Button style={{ marginLeft: 20 }} onClick={this.handleFormReset}>
                重置
              </Button>
            </FormItem>
          </Col>
        </Row>

      </Form>
    )
  }

  renderCell = (text, width) => (
    <div style={{ width: `${width}`, overflow: "hidden", display: "inline-block", whiteSpace: 'nowrap', textOverflow: "ellipsis" }}>
      {text}
    </div>
  )

  handleModalVisible = (flag, record) => {
    this.setState({
      modalVisible: !!flag,
      currentRecord: record,
    });
  };

  handlePageChange = (pagination) => {
    const { dispatch } = this.props;
    const { pageSize } = this.state;
    dispatch({
      type: 'log/fetch',
      payload: {
        "currentPage": pagination.current,
        "pageSize": pageSize,
      }
    });
  }

  render() {
    const { log } = this.props;
    const { modalVisible, currentRecord } = this.state;
    const columns = [
      {
        title: '序号',
        dataIndex: 'num',
      },
      {
        title: '商户号',
        dataIndex: 'num1',
      },
      {
        title: '商户名称',
        dataIndex: 'desc1',
      },
      {
        title: '结算日期',
        dataIndex: 'date2',
        render: val => <span>{moment(val).format('YYYY-MM-DD HH:MM')}</span>
      },
      {
        title: '结算交易金额',
        dataIndex: 'num2',
      },
      {
        title: '结算交易手续费',
        dataIndex: 'desc3'
      },
      {
        title: '结算调账金额',
        dataIndex: 'num4'
      },
      {
        title: '退货交易金额',
        dataIndex: 'num5'
      },
      {
        title: 'D+1服务费',
        dataIndex: 'num5'
      },
      {
        title: '结算金额',
        dataIndex: 'num5'
      },
      {
        title: '操作',
        render: (text, record) => (
          <Fragment>
            <a onClick={() => this.handleModalVisible(true, record)}>查看</a>
          </Fragment>
        ),
      },
    ];

    const total = log.list.totalCount;
    const pagination = {
      total
    }

    return (
      <Card>
        <Row>
          {this.renderForm()}
        </Row>
        <Divider />
        <Row>
          <ReactHTMLTableToExcel
            className={`ant-btn ant-btn-primary ${styles.marginBottom}`}
            table="realtime-trans-table"
            filename="实时交易"
            sheet="实时交易"
            buttonText="导出"
          />
          <Table
            className='realTimeTable'
            dataSource={log.list.rows}
            rowKey="id"
            columns={columns}
            pagination={pagination}
            loading={log.loading}
            bordered={false}
            style={{ overflowX: "scroll" }}
            onChange={this.handlePageChange}
          />
        </Row>
        <Modal maskClosable={false}
          destroyOnClose
          title="请求详情"
          visible={modalVisible}
          width={700}
          okText="确定"
          cancelText="取消"
          onCancel={() => this.handleModalVisible()}
          onOk={() => this.handleModalVisible()}
        >
          {currentRecord &&
            <DescriptionList col={1} layout="vertical">
              <Description term="请求时间">{currentRecord.insertTime}</Description>
              <Description term="请求路径">{currentRecord.requestURI}</Description>
              <Description term="查询字符串">{currentRecord.queryString}</Description>
              <Description term="请求方式">{currentRecord.method}</Description>
              <Description term="日志类型">{currentRecord.returnType}</Description>
              <Description term="错误">{currentRecord.error}</Description>
              <Description term="返回信息">{currentRecord.response}</Description>
            </DescriptionList>
          }
        </Modal>
      </Card>
    )
  }
}

SettlementList.propTypes = {
  log: PropTypes.object
};

SettlementList.defaultProps = {
  log: {
    list: {
      rows: [],
      totalPage: 5
    }
  }
};

export default SettlementList;