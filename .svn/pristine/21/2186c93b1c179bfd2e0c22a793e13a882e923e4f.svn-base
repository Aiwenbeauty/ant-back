import React from 'react';
import { Row, Col, Avatar, Card, Button, Tree,DatePicker,Form } from 'antd';
import { connect } from 'dva';
// import { Chart, Geom, Axis, Tooltip } from "bizcharts";
import router from 'umi/router';
import Yuan from "@/utils/Yuan";
// import EditableLinkGroup from '@/components/EditableLinkGroup';
import PageHeaderWrapper from '@/components/PageHeaderWrapper';
import moment from 'moment';
import styles from "./General.less";
import { judgePageAuth } from '@/global.js';
const NotUser = null;
const { Meta } = Card;
const { TreeNode } = Tree;
const linkToSetting = () => {
  router.push('/account/settings/security');
}
const Description = (props) => {
  return (
    <div>
      <p>上次登录时间：{moment(props.time).format('YYYY-MM-DD HH:mm:ss')}</p>

      <Button type="primary" onClick={linkToSetting}>安全设置</Button>
      <Button
        type="primary"
        style={{ marginLeft: "20px" }}
        onClick={props.onLogout}
      >退出
      </Button>
    </div>
  )
}
const tabList = [{
  key: 'money',
  tab: '按金额',
}, {
  key: 'number',
  tab: '按笔数',
}];

let salesData = [];
for (let i = 0; i < 30; i += 1) {
  salesData.push({
    day: moment().subtract('days', i).format('MM-DD'),
    value: Math.floor(Math.random() * 1000) + 200,
  });
}
salesData = salesData.reverse();

// 页面权限
@connect(({ login, menu,user,menu:{ pagePermissions },loading }) => ({
  login,
  menu,
  user,
}))
class General extends React.PureComponent {
  state = {
    loading: false,
    Key: 'money',
    DrawerVisible: false,
    links: [
      {
        title: '修改密码',
        href: '/EditPassword',
      },
      {
        title: '个人设置',
        href: '/account/settings/base',
      },
    ]
    // checkedKeys: [],
  }

  static defaultProps = {
    user: {},
    merchant: {
      generalMerchInfo: {}
    }
  }

  componentDidMount() {
    const { dispatch } = this.props;
    // 页面权限
    dispatch({
      type: 'menu/fetchButton',
    })
  }
    
  onTabChange = (key, type) => {
    this.setState({ [type]: key });
  }

  handleLogout = () => {
    const { dispatch } = this.props;
    dispatch({
      type: "login/logout",
    })
  }

  renderTreeNodes = data => {
    return data.map(item => {

      if (item.children) {
        return (
          <TreeNode title={item.name} key={item.id} dataRef={item}>
            {this.renderTreeNodes(item.children)}
          </TreeNode>
        );
      }
      return <TreeNode title={item.name} key={item.id} dataRef={item} />;
    });
  }

  onClose = () => {
    this.setState({
      DrawerVisible: false
    })
  }


  render() {
    const { loading, Key, DrawerVisible, links } = this.state;
    const { user  } = this.props;
    const { currentUser } = user;
    return (
      <PageHeaderWrapper title="今日概况">
        <Row gutter={16}>
          <Col xl={8} lg={24}>
            <Card
              style={{ height: "210px", minWidth: '320px' }}
              loading={loading}
            >
              <Row className={styles.myInfoHeader} />
              <Meta
                avatar={<Avatar size={64} src='https://gw.alipayobjects.com/zos/antfincdn/XAosXuNZyF/BiazfanxmamNRoxxVxka.png' style={{ "backgroundColor": '#87d068' }} />}
                title='你好!'
                description={<Description onLogout={this.handleLogout} time={currentUser.loginDate} />}
              />
            </Card>
          </Col>
        </Row>
      </PageHeaderWrapper>)
  }
}
export default General;