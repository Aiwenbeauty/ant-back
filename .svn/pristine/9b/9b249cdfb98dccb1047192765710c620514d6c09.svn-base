/* eslint-disable */
import React, { PureComponent, Fragment, Suspense } from 'react';
import { connect } from 'dva';
import moment from 'moment';
import router from 'umi/router';
import {
    Row,
    Col,
    Card,
    Form,
    Input,
    Select,
    Icon,
    Button,
    Dropdown,
    Menu,
    Modal,
    Badge,
    Checkbox,
} from 'antd';
// import ReactQuill from 'react-quill';
import 'react-quill/dist/quill.snow.css';
import StandardTable from '@/components/StandardTable';
import DescriptionList from '@/components/DescriptionList';
import PageHeaderWrapper from '@/components/PageHeaderWrapper';
import styles from '../AuthorityControl/UserControl.less';

const ReactQuill = React.lazy(() => import('react-quill'));
const { Description } = DescriptionList;

const FormItem = Form.Item;
const { Option } = Select;
@connect(({ news }) => ({
    news,
}))
@Form.create()
class CreateForm extends PureComponent {
    constructor(props) {
        super(props);
        this.state = {
            showLevel: false
        };
    }

    handleChange = value => {
        const { dispatch } = this.props;
        dispatch({
            type: 'news/saveRichText',
            payload: { richText: value }
        });

    };

    setType = (val) => {
        if (val === 0) {
            this.setState({ showLevel: true })
        } else {
            this.setState({ showLevel: false })
        }
    }

    render() {
        const { modalVisible, form, handleAdd, handleModalVisible, typeList, news } = this.props;
        const { showLevel } = this.state;
        const okHandle = () => {
            form.validateFields((err, fieldsValue) => {
                if (err) return;
                handleAdd(fieldsValue, form);
            });
        };
        // const ReactQuill = React.lazy(() => import('react-quill'));


        return (
            <Modal maskClosable={false}
                destroyOnClose
                width={1020}
                title="新增商品"
                visible={modalVisible}
                onOk={okHandle}
                onCancel={() => handleModalVisible()}
            >
                <Row>
                    <Col span={24} md={24} lg={12}>
                        <FormItem labelCol={{ span: 4 }} wrapperCol={{ span: 14 }} label="公告标题">
                            {form.getFieldDecorator('title', {
                                rules: [{ required: true, message: '请输入至多10个字符！', max: 10 }],
                            })(<Input placeholder="请输入" />)}
                        </FormItem>
                    </Col>
                    <Col span={24} md={24} lg={12}>
                        <FormItem labelCol={{ span: 4 }} wrapperCol={{ span: 14 }} label="类型">
                            {form.getFieldDecorator('type', {
                                rules: [{ required: true, message: '请选择类型！' }],
                            })(
                                <Select placeholder="请选择类型" style={{ width: '100%' }} onSelect={this.setType}>
                                    <Option value={1}>平台公告</Option>
                                    <Option value={0}>指定会员</Option>
                                </Select>
                            )}
                        </FormItem>
                    </Col>
                </Row>
                {showLevel && <Row>
                    <Col span={24}>
                        <FormItem labelCol={{ span: 4, lg: 2 }} wrapperCol={{ span: 20 }} label="类型">
                            {form.getFieldDecorator('memberLevelIds', {
                                rules: [{ required: true, message: '请选择分类！' }],
                            })(
                                <Checkbox.Group style={{ width: '100%' }}>
                                    <Row>
                                        {typeList && typeList.map(item => {
                                            return (
                                                <Col span={8}>
                                                    <Checkbox value={item.id}>{item.name}</Checkbox>
                                                </Col>
                                            )
                                        })}
                                    </Row>
                                </Checkbox.Group>
                            )}
                        </FormItem>
                    </Col>
                </Row>
                }
                <Row style={{ height: "300px" }} >
                    <Suspense fallback={<div>Loading...</div>}>
                        <ReactQuill
                            onChange={this.handleChange}
                            style={{ height: "250px" }}
                            modules={modules}
                            formats={formats}
                        />
                    </Suspense>

                </Row>
            </Modal >
        );
    }
};

@connect(({ member }) => ({
    member
}))
@Form.create()
class UpdateForm extends PureComponent {
    constructor(props) {
        super(props);
        this.state = {
            showLevel: Number(this.props.values.type) === 0,
            richText: this.props.values.content
        };
    }
    static defaultProps = {
        handleUpdate: () => { },
        handleUpdateModalVisible: () => { },
        values: {},
    };

    handleChange = content => {
        const { dispatch } = this.props;
        this.setState({
            richText: content
        })

    };

    setType = (val) => {
        if (val === 0) {
            this.setState({ showLevel: true })
        } else {
            this.setState({ showLevel: false })
        }
    }

    render() {
        const { updateModalVisible, handleUpdateModalVisible, handleUpdate, values, form, member } = this.props;
        const { showLevel, richText } = this.state;
        const { content, id } = values;
        const okHandle = () => {
            form.validateFields((err, fieldsValue) => {
                if (err) return;
                form.resetFields();
                const params = {
                    id,
                    content: richText,
                    ...fieldsValue,
                }
                if (id) {
                    handleUpdate(params);
                }
            });
        };
        return (
            <Modal maskClosable={false}
                width={1020}
                bodyStyle={{ padding: '32px 40px 48px' }}
                destroyOnClose
                title="编辑商品"
                visible={updateModalVisible}
                onOk={okHandle}
                onCancel={() => handleUpdateModalVisible(false, values)}
                afterClose={() => handleUpdateModalVisible()}
            >
                <Row>
                    <Col span={24} md={24} lg={12}>
                        <FormItem labelCol={{ span: 4 }} wrapperCol={{ span: 14 }} label="公告标题">
                            {form.getFieldDecorator('title', {
                                initialValue: values.title,
                                rules: [{ required: true, message: '请输入至多10个字符！', max: 10 }],
                            })(<Input placeholder="请输入" />)}
                        </FormItem>
                    </Col>
                    <Col span={24} md={24} lg={12}>
                        <FormItem labelCol={{ span: 4 }} wrapperCol={{ span: 14 }} label="类型">
                            {form.getFieldDecorator('type', {
                                initialValue: Number(values.type),
                                rules: [{ required: true, message: '请选择类型！' }],
                            })(
                                <Select placeholder="请选择类型" style={{ width: '100%' }} onSelect={this.setType}>
                                    <Option value={1}>平台公告</Option>
                                    <Option value={0}>指定会员</Option>
                                </Select>
                            )}
                        </FormItem>
                    </Col>
                </Row>
                {showLevel && <Row>
                    <Col span={24}>
                        <FormItem labelCol={{ span: 4, lg: 2 }} wrapperCol={{ span: 20 }} label="类型">
                            {form.getFieldDecorator('memberLevelIds', {
                                initialValue: values.memberLevelIds,
                                rules: [{ required: true, message: '请选择分类！' }],
                            })(
                                <Checkbox.Group style={{ width: '100%' }}>
                                    <Row>
                                        {member && member.typeList.map(item => {
                                            return (
                                                <Col span={8}>
                                                    <Checkbox value={item.id}>{item.name}</Checkbox>
                                                </Col>
                                            )
                                        })}
                                    </Row>
                                </Checkbox.Group>
                            )}
                        </FormItem>
                    </Col>
                </Row>
                }
                <Row style={{ height: "300px" }} >
                    <Suspense fallback={<div>Loading...</div>}>
                        <ReactQuill
                            value={richText}
                            onChange={(content) => { this.handleChange(content) }}
                            style={{ height: "250px" }}
                            modules={modules}
                            formats={formats}
                        />
                    </Suspense>
                </Row>
            </Modal>

        );
    }
}
// const statusMap = ['default', 'processing', 'success', 'error'];
const statusMap = ['error', 'processing'];
const status = ['下架', '上架中'];
const getValue = obj =>
    Object.keys(obj)
        .map(key => obj[key])
        .join(',');
const modules = {
    toolbar: [
        [{ 'header': [1, 2, false] }],
        ['bold', 'italic', 'underline', 'strike', 'blockquote'],
        [{ 'align': [] }],
        [{ 'list': 'ordered' }, { 'list': 'bullet' }, { 'indent': '-1' }, { 'indent': '+1' }],
        ['link', 'image'],
        ['clean']
    ],
}

const formats = [
    'header',
    'bold', 'italic', 'underline', 'strike', 'blockquote',
    'align',
    'list', 'bullet', 'indent',
    'link', 'image'
]
/* eslint react/no-multi-comp:0 */
@connect(({ news, member }) => ({
    news,
    member
}))
@Form.create()
class NewsControl extends PureComponent {
    state = {
        modalVisible: false,
        updateModalVisible: false,
        selectedRows: [],
        formValues: {},
        updateFormValues: {},
        currentRecord: [],
        richText: ''
    };

    static defaultProps = {
        news: {
            typeList: [],
            list: {},
        },
    };

    columns = [
        {
            title: '公告标题',
            dataIndex: 'title',
        },
        {
            title: '创建时间 ',
            dataIndex: 'created',
            // sorter: true,
            render: val => val && <span>{moment(val).format('YYYY-MM-DD HH:mm:ss')}</span>,
        },
        {
            title: '类型',
            dataIndex: 'type',
            render: val => val === '0' ? '指定会员' : '平台公告',
        },
        {
            title: '操作',
            render: (text, record) => (
                <Fragment>
                    <a onClick={() => this.handleUpdateModalVisible(true, record)}>编辑</a>
                    {/* <a style={{ marginLeft: "10px" }} onClick={() => this.handlePreview(record)}>查看</a> */}
                </Fragment>
            ),
        },
    ];

    componentDidMount() {
        const { dispatch } = this.props;
        dispatch({
            type: 'news/fetch',
            payload: {
                pageNo: 1,
                pageSize: 10
            }
        });
        dispatch({
            type: 'member/fetchType',
        });
    }

    handleStandardTableChange = (pagination, filtersArg, sorter) => {
        const { dispatch } = this.props;
        const { formValues } = this.state;

        const filters = Object.keys(filtersArg).reduce((obj, key) => {
            const newObj = { ...obj };
            newObj[key] = getValue(filtersArg[key]);
            return newObj;
        }, {});

        const params = {
            currentPage: pagination.current,
            pageSize: pagination.pageSize,
            ...formValues,
            ...filters,
        };

        dispatch({
            type: 'news/fetch',
            payload: params,
        });
    };

    previewItem = id => {
        router.push(`/profile/basic/${id}`);
    };

    handleFormReset = () => {
        const { form, dispatch } = this.props;
        form.resetFields();
        this.setState({
            formValues: {},
        });
        dispatch({
            type: 'news/fetch',
            payload: {
                pageNo: 1,
                pageSize: 10,
            },
        });
    };


    handleMenuClick = e => {
        const { dispatch } = this.props;
        const { selectedRows } = this.state;
        if (selectedRows.length === 0) return;
        const payload = selectedRows.map(row => row.id);
        switch (e.key) {
            case 'remove':
                dispatch({
                    type: 'news/delete',
                    payload: payload,
                    callback: () => {
                        this.setState({
                            selectedRows: [],
                        });
                    },
                });
                break;
            default:
                break;
        }
    };

    handleSelectRows = rows => {
        this.setState({
            selectedRows: rows,
        });
    };

    handleSearch = e => {
        e.preventDefault();
        const { dispatch, form } = this.props;

        form.validateFields((err, fieldsValue) => {
            if (err) return;

            const values = {
                ...fieldsValue,
                pageNo: 1,
                pageSize: 10,
            };

            this.setState({
                formValues: values,
            });

            dispatch({
                type: 'news/fetch',
                payload: values,
            });
        });
    };

    handleModalVisible = flag => {
        this.setState({
            modalVisible: !!flag,
        });
    };

    handleUpdateModalVisible = (flag, record) => {
        this.setState({
            updateModalVisible: !!flag,
            updateFormValues: record || {},
        });
    };

    handlePreview = (record) => {

    };

    handleAdd = (fields, form) => {
        const { dispatch, news } = this.props;
        dispatch({
            type: 'news/saveOrUpdate',
            payload: {
                ...fields,
                content: news.richText,
            },
        }).then((res) => {
            if (res.code === "SUCCESS") {
                form.resetFields();
                this.handleModalVisible();
            }
        });
    };

    handleUpdate = (payload) => {
        const { dispatch } = this.props;
        dispatch({
            type: 'news/saveOrUpdate',
            payload
        });
        this.handleUpdateModalVisible();
    };

    renderForm() {
        const {
            form: { getFieldDecorator },
        } = this.props;
        return (
            <Form onSubmit={this.handleSearch} layout="inline">
                <Row gutter={{ md: 8, lg: 24, xl: 48 }}>
                    <Col md={12} sm={24}>
                        <FormItem label="公告标题">
                            {getFieldDecorator('title')(<Input placeholder="请输入" />)}
                        </FormItem>
                    </Col>
                    <Col md={12} sm={24}>
                        <span className={styles.submitButtons}>
                            <Button type="primary" htmlType="submit">
                                查询
                      </Button>
                            <Button style={{ marginLeft: 8 }} onClick={this.handleFormReset}>
                                重置
                      </Button>
                        </span>
                    </Col>
                </Row>
            </Form>
        );
    }

    render() {
        const {
            news: { list },
            member: { typeList },
        } = this.props;
        const { selectedRows, modalVisible, updateModalVisible, updateFormValues, currentRecord } = this.state;
        const menu = (
            <Menu onClick={this.handleMenuClick} selectedKeys={[]}>
                <Menu.Item key="remove">删除</Menu.Item>
            </Menu>
        );
        const pagination = {
            total: list.total
        }

        const parentMethods = {
            handleAdd: this.handleAdd,
            handleModalVisible: this.handleModalVisible,
        };
        const updateMethods = {
            handleUpdateModalVisible: this.handleUpdateModalVisible,
            handleUpdate: this.handleUpdate,
        };
        return (
            <PageHeaderWrapper title="公告管理">
                <Card bordered={false}>
                    <div className={styles.tableList}>
                        <div className={styles.tableListForm}>{this.renderForm()}</div>
                        <div className={styles.tableListOperator}>
                            <Button icon="plus" type="primary" onClick={() => this.handleModalVisible(true)}>
                                新建
                            </Button>
                            {selectedRows.length > 0 && (
                                <span>
                                    <Button>批量操作</Button>
                                    <Dropdown overlay={menu}>
                                        <Button>
                                            更多操作 <Icon type="down" />
                                        </Button>
                                    </Dropdown>
                                </span>
                            )}
                        </div>
                        <StandardTable
                            rowKey='id'
                            rowClassName="textCenter"
                            selectedRows={selectedRows}
                            // loading={loading}
                            data={list.rows}
                            pagination={pagination}
                            columns={this.columns}
                            onSelectRow={this.handleSelectRows}
                            onChange={this.handleStandardTableChange}
                        />
                    </div>
                </Card>
                <CreateForm {...parentMethods} modalVisible={modalVisible} typeList={typeList} />
                {updateFormValues && Object.keys(updateFormValues).length ? (
                    <UpdateForm
                        {...updateMethods}
                        updateModalVisible={updateModalVisible}
                        values={updateFormValues}
                    />
                ) : null}
            </PageHeaderWrapper>
        );
    }
}

export default NewsControl;
