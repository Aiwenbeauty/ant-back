import React, { Component, Fragment, PureComponent } from 'react';
import { connect } from 'dva';
import moment from 'moment';
import {
    Card,
    Form,
    Input,
    Icon,
    Button,
    Select,
    Modal,
    message,
    Upload
} from 'antd';
import StandardTable from '@/components/StandardTable';
import PageHeaderWrapper from '@/components/PageHeaderWrapper';
import styles from '../AuthorityControl/UserControl.less';
import imgUrl from "@/global";

const { Option } = Select;
const { Dragger } = Upload;
const token = localStorage.getItem('token');
@Form.create()
@connect(({ seting }) => ({
    seting,
}))
class CreateForm extends PureComponent {
    constructor(props) {
        super(props)
        this.state = {

        }
    }

    render() {
        const { modalVisible, form, handleAdd, handleModalVisible, dispatch } = this.props;
        const { getFieldDecorator } = form;
        const okHandle = () => {
            form.validateFields((err, fieldsValue) => {
                if (err) return;
                const addValue = {
                    ...fieldsValue,
                }
                handleAdd(addValue, form);
            });
        };
        const props = {
            name: 'file',
            action: '/lazy-card/edition/uploadAppApkOrIpa',
            headers: {
                Authorization: token
            },
            onChange(info) {
                const { status } = info.file;
                // if (status !== 'uploading') {
                //     console.log(info.file, info.fileList);
                // }
                if (status === 'done') {
                    message.success(`${info.file.name} 上传成功`);
                    dispatch({
                        type: 'seting/saveNewAppUrl',
                        payload: {
                            url: info.file.response.data.url
                        }
                    });
                } else if (status === 'error') {
                    message.error(`${info.file.name} 上传失败`);
                }
            },
        };

        return (
          <Modal
            maskClosable={false}
            destroyOnClose
            width={840}
            title="上传更新"
            visible={modalVisible}
            onOk={okHandle}
            onCancel={() => handleModalVisible()}
          >
            <Form.Item label="类型" labelCol={{ span: 5 }} wrapperCol={{ span: 15 }}>
              {getFieldDecorator('appType', {
                        rules: [{ required: true, message: '请选择app类型，如100' }],
                    })(
                      <Select placeholder="请选择" style={{ width: '100%' }}>
                        <Option value='android'>安卓</Option>
                        <Option value='ios'>ios</Option>
                      </Select>
                    )}
            </Form.Item>
            <Form.Item label="更新类型" labelCol={{ span: 5 }} wrapperCol={{ span: 15 }}>
              {getFieldDecorator('isUpdate', {
                        rules: [{ required: true, message: '请选择app更新类型' }],
                    })(
                      <Select placeholder="请选择" style={{ width: '100%' }}>
                        <Option value='0'>功能更新</Option>
                        <Option value='1'>整包更新</Option>
                      </Select>
                    )}
            </Form.Item>
            <Form.Item label="版本号" labelCol={{ span: 5 }} wrapperCol={{ span: 15 }}>
              {getFieldDecorator('appEdition', {
                        rules: [{ required: true, pattern: /^\d+\.\d+\.\d+$/, message: '请输入正确的版本号，如1.0.0', max: 10 }],
                    })(
                      <Input type="text" placeholder="请输入版本号，如1.0.0" />
                    )}
            </Form.Item>
            <Form.Item label="版本描述" labelCol={{ span: 5 }} wrapperCol={{ span: 15 }}>
              {getFieldDecorator('appDescribe', {
                        rules: [{ required: true, message: '请输入版本描述', max: 10 }],
                    })(
                      <Input type="text" placeholder="请输入" />
                    )}
            </Form.Item>
            <Form.Item label="安装包上传" labelCol={{ span: 5 }} wrapperCol={{ span: 15 }}>
              <Dragger {...props}>
                  <p className="ant-upload-drag-icon">
                      <Icon type="inbox" />
                    </p>
                  <p className="ant-upload-text">Click or drag file to this area to upload</p>
                  <p className="ant-upload-hint">
                            Support for a single or bulk upload. Strictly prohibit from uploading company data or other
                            band files
                    </p>
                </Dragger>
            </Form.Item>
          </Modal>
        );
    }
}


@Form.create()

/* eslint react/no-multi-comp:0 */
@connect(({ seting, loading }) => ({
    seting,
    loading: loading.models.rule,
}))
@Form.create()
class AppUpdate extends Component {
    state = {
        modalVisible: false,
    };

    static defaultProps = {

    };

    columns = [
        {
            title: '版本号',
            dataIndex: 'appEdition',
        },
        {
            title: '版本描述',
            dataIndex: 'appDescribe',
        },
        {
            title: '类型',
            dataIndex: 'appType',
        },
        {
            title: '更新类型',
            dataIndex: 'updateType',
            render: (data, item) => {
                return item.wgtUrl ? "功能更新" : "整包更新"
            }
        },
        {
            title: '地址',
            dataIndex: 'url',
            render: (data, item) => {
                return item.wgtUrl ? imgUrl + item.wgtUrl : imgUrl + item.pkgUrl;
            }
        },
        {
            title: '上传时间',
            dataIndex: 'insTime',
            render: (time) => {
                return moment(time).format('YYYY-MM-DD HH:MM');
            }
        },
    ];

    componentDidMount() {
        const { dispatch } = this.props;
        dispatch({
            type: 'seting/fetchAppList',
            payload: {}
        });
    }

    handleStandardTableChange = (pagination, sorter) => {
        const { dispatch } = this.props;

        const params = {
            currentPage: pagination.current,
            pageSize: pagination.pageSize,
        };
        if (sorter.field) {
            params.sorter = `${sorter.field}_${sorter.order}`;
        }

        // dispatch({
        //     type: 'role/fetch',
        //     payload: params,
        // });
    };



    handleModalVisible = flag => {
        this.setState({
            modalVisible: !!flag,
        });
    };


    handleAdd = (fields, form) => {
        const { dispatch, seting } = this.props;
        const { appUrl, appList } = seting;
        // 校验版本号是否大于上个版本
        // const currentEdition = appList.rows[0];
        // if(currentEdition){
        //     const newEditionArr = fields.appEdition.split('.');
        //     const currentEditionArr = currentEdition.appEdition.split('.');
        //     for (let i = 0; i < 3; i++) {
        //         if (newEditionArr[i] < currentEditionArr[i]) {
        //             message.error("版本号必须大于上一版本");
        //             return;
        //         }
        //     }
        // }
        
        dispatch({
            type: 'seting/sendNewApp',
            payload: {
                ...fields,
                url: appUrl,
            },
            callBack: () => {
                this.handleModalVisible();
                form.resetFields();
            }
        });


    };


    render() {
        const {
            loading,
            dispatch,
            seting,
        } = this.props;
        const { modalVisible } = this.state;
        const { appList } = seting;

        const parentMethods = {
            handleAdd: this.handleAdd,
            handleModalVisible: this.handleModalVisible,
        };
        const pagination = {
            pageSize: 10,
        }
        return (
          <PageHeaderWrapper title="APP更新">
            <Card bordered={false}>
              <div className={styles.tableList}>
                  <div className={styles.tableListOperator}>
                      <Button icon="up" type="primary" onClick={() => this.handleModalVisible(true)}>
                                升级
                        </Button>
                    </div>
                  <StandardTable
                      rowKey='index'
                      loading={seting.loading}
                      data={appList.rows}
                      columns={this.columns}
                      pagination={pagination}
                      onChange={this.handleStandardTableChange}
                    />
                </div>
            </Card>
            <CreateForm {...parentMethods} modalVisible={modalVisible} dispatch={dispatch} />
          </PageHeaderWrapper>
        );
    }
}

export default AppUpdate;
