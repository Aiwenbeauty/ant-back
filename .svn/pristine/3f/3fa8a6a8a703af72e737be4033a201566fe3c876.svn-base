import React, { PureComponent } from 'react';
import { connect } from 'dva';
import { Row, Col, Card, Table, Form, Input, Button } from 'antd';
import PageHeaderWrapper from '@/components/PageHeaderWrapper';
import OperateTable from '@/components/OperateTable';
import styles from "./MemberAddressList.less";

/* eslint react/no-multi-comp:0 */
@connect(({ address, loading }) => ({
  address,
  loading: loading.models.rule,
}))

@Form.create()
class MemberAddressList extends PureComponent {
  constructor(props) {
    super(props)
    this.state = {
      pageSize: 10,
      currentPage: 1,
      formValues: {}
    }
  }

  componentDidMount() {
    const { dispatch } = this.props;
    const { pageSize } = this.state;

    dispatch({
      type: 'address/fetch',
      payload: {
        "pageNo": 1,
        "pageSize": pageSize,
      }
    });
    // const value={
    //   pid:"0",
    // }
    // dispatch({
    //     type: 'address/area',
    //     payload: {
    //       pid:"0",
    //     }
    //   });
  }

  //
  handleSearch = (e) => {
    const { dispatch, form } = this.props;
    const { pageSize } = this.state;
    e.preventDefault();
    form.validateFields((err, fieldsValue) => {
      if (!err) {
        const value = {
          mobile: fieldsValue.mobile,
          zip: fieldsValue.zip,
        }
        this.setState({
          currentPage: 1,
          formValues: value
        });
        dispatch({
          type: 'address/fetch',
          payload: {
            ...value,
            "pageNo": 1,
            "pageSize": pageSize,
          }
        });
      }
    })
  }

  // 重置
  handleFormReset = () => {
    const { form, dispatch } = this.props;
    const { pageSize } = this.state;
    form.resetFields();
    this.setState({
      formValues: {},
      currentPage: 1
    });
    dispatch({
      type: 'address/fetch',
      payload: {
        "pageNo": 1,
        "pageSize": pageSize,
      },
    });
  };

  handlePageChange = (pagination) => {
    const { dispatch } = this.props;
    const { pageSize, formValues } = this.state;
    this.setState({
      currentPage: pagination.current
    });
    dispatch({
      type: 'address/fetch',
      payload: {
        ...formValues,
        "pageNo": pagination.current,
        "pageSize": pageSize,
      }
    });
  }

  renderForm = () => {
    const { form } = this.props;
    const { getFieldDecorator } = form;
    const FormItem = Form.Item;
    return (
      <Form labelCol={{ span: 4, md: 4, lg: 8 }} wrapperCol={{ span: 19, md: 19, lg: 16 }} onSubmit={this.handleSearch}>
        <Row>
          {/* <Col span={24} md={24} lg={8}>
        <FormItem labelCol={{ span: 5 }} wrapperCol={{ span: 15 }} label="省">
          {form.getFieldDecorator('id', {
            rules: [],
          })(
            <Select 
              placeholder="请选择" style={{ width: '100%' }}
              onChange={() => this.onChange()}
             >
              {areaList && areaList.map(item => {
                return (
                  <Option value={item.id} key={item.id}>{item.name}</Option>
                )
              })}
            </Select>
            )}
        </FormItem>
          </Col>
          <Col span={24} md={24} lg={8}>
            <FormItem label="市">
              {getFieldDecorator('id',
                {
                  rules: []
                }
              )(<Input />)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={8}>
            <FormItem label="区">
              {getFieldDecorator('id',
                {
                  rules: []
                }
              )(
                <Select>
                  <Option value="">全部</Option>
                  <Option value="0">正常</Option>
                  <Option value="1">冻结</Option>
                </Select>
              )}
            </FormItem>
          </Col> */}
          <Col span={24} md={24} lg={8}>
            <FormItem label="手机号">
              {getFieldDecorator('mobile',
                {
                  rules: []
                }
              )(<Input />)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={8}>
            <FormItem label="邮编">
              {getFieldDecorator('zip',
                {
                  rules: []
                }
              )(<Input />)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={8} offset={16}>
            <FormItem className={styles.btnContainer}>
              <Button type="primary" htmlType="submit">
                查询
              </Button>
              <Button style={{ marginLeft: 20 }} onClick={this.handleFormReset}>
                重置
              </Button>
            </FormItem>
          </Col>
        </Row>
      </Form>
    )
  }

  render() {
    const { address } = this.props;
    const { currentPage, pageSize } = this.state;
    const columns = [
      {
        title: '姓名',
        dataIndex: 'name',
        key: 'name',
      },
      {
        title: '手机号',
        dataIndex: 'mobile',
        key: 'mobile',
      },
      {
        title: '省',
        dataIndex: 'state',
        key: 'state',
      },
      {
        title: '市',
        dataIndex: 'city',
        key: 'city',
      },
      {
        title: '区',
        dataIndex: 'district',
        key: 'district',
      },
      {
        title: '详细地址',
        dataIndex: 'address',
        key: 'address',
      },
      {
        title: '邮编',
        dataIndex: 'zip',
        key: 'zip',
      },
      // {
      //   title: '操作',
      //   render: (text, record) => (
      //     <Fragment>
      //       <a onClick={() => this.handleUpdateModalVisible(true, record)}>编辑</a>&nbsp;&nbsp;&nbsp;&nbsp;
      //       {record.status === "0" ?
      //             <a onClick={() => this.isProhibit(record.encryptionId)}>禁用</a>
      //             :<a onClick={() => this.isEnable(record.encryptionId)}>启用</a>}
      //     </Fragment>
      //   ),
      // },
    ];
    const { total } = address.list.data;
    const pagination = {
      current: currentPage,
      pageSize,
      total,
    }
    return (
      <PageHeaderWrapper title="">
        <Card>
          <Row>
            {this.renderForm()}
          </Row>
          <Row>
            <Table
              dataSource={address.list.data.rows}
              rowKey="id"
              columns={columns}
              pagination={pagination}
              loading={address.loading}
              bordered={false}
              style={{ overflowX: "scroll" }}
              onChange={this.handlePageChange}
            />
          </Row>
        </Card>
      </PageHeaderWrapper>
    )
  }
}
export default MemberAddressList;