import React, { PureComponent, Fragment } from 'react';
import { connect } from 'dva';
import moment from 'moment';
import { Card, Form, Input, Select, Icon, Button, Dropdown, Menu, Modal, Tag, } from 'antd';
import StandardTable from '@/components/StandardTable';
import PageHeaderWrapper from '@/components/PageHeaderWrapper';

import styles from './MemberLevelList.less';

const FormItem = Form.Item;
const { confirm } = Modal;
const { Option } = Select;

@Form.create()
class CreateForm extends React.Component {
  // CreateForm 主件 传入
  constructor(props) {
    super(props)
    this.state = {
    }
  }

  render() {
    const { modalVisible, form, handleAdd, handleModalVisible,values  } = this.props;
    const okHandle = () => {
      form.validateFields((err, fieldsValue) => {
        if (err) return;
        if (values) { // 编辑
          fieldsValue.id = values.id
        }

        const addValue = {
          ...fieldsValue
        }
        handleAdd(addValue,form);
      });
    };
    const row = values || { name: "", levelNo: "", freeRate: "", withdrawalRate: "", developmentNum: "", type: "" }
    const title = values ? "编辑" : "新建";

    return (
      <Modal
        maskClosable={false}
        destroyOnClose
        width={840}
        title={title}
        visible={modalVisible}
        onOk={okHandle}
        onCancel={() => handleModalVisible()}
      >
        <Form.Item labelCol={{ span: 5 }} wrapperCol={{ span: 15 }} label="等级名称">
          {form.getFieldDecorator('name', {
            initialValue: row.name,
            rules: [{ required: true, message: '请输入正确的等级名称!' }],
          })(
            <Input type="text" placeholder="请输入正确的等级名称" />
          )}
        </Form.Item>

        <Form.Item labelCol={{ span: 5 }} wrapperCol={{ span: 15 }} label="等级编码">
          {form.getFieldDecorator('levelNo', {
            initialValue: row.levelNo,
            rules: [{ required: true, message: '请输入正确的等级编码!' }],
          })(
            <Input type="number" placeholder="请输入正确的等级编码" />
          )}
        </Form.Item>

        <Form.Item labelCol={{ span: 5 }} wrapperCol={{ span: 15 }} label="结算费率">
          {form.getFieldDecorator('freeRate', {
            initialValue: row.freeRate,
            rules: [{ required: true, message: '请输入正确的结算费率!' }],
          })(
            <Input type="number" placeholder="请输入正确的支付费率" addonAfter="%" />
          )}
        </Form.Item>

        <Form.Item labelCol={{ span: 5 }} wrapperCol={{ span: 15 }} label="结算手续费">
          {form.getFieldDecorator('withdrawalRate', {
            initialValue: row.withdrawalRate,
            rules: [{ required: true, message: '请输入正确的结算手续费!' }],
          })(
            <Input type="text" placeholder="请输入正确的结算手续费" addonAfter="元" />
          )}
        </Form.Item>

        <Form.Item labelCol={{ span: 5 }} wrapperCol={{ span: 15 }} label="升级人数">
          {form.getFieldDecorator('developmentNum', {
            initialValue: row.developmentNum,
            rules: [{ required: true, message: '请输入正确的升级人数!' }],
          })(
            <Input type="number" placeholder="请输入正确的升级人数" />
          )}
        </Form.Item>

        <FormItem labelCol={{ span: 5 }} wrapperCol={{ span: 15 }} label="类型">
          {form.getFieldDecorator('type', {
            initialValue: row.type,
            rules: [{ required: true, message: '请选择类型！' }],
          })(
            <Select style={{ width: 120 }}>
              <Option value="member">会员</Option>
              <Option value="agent">代理</Option>
            </Select>)}
        </FormItem>
      </Modal>
    );
  }
}


/**
 * 请求组件 需放在主class 上面
 */
@connect(({ memberLevel }) => ({
  memberLevel
}))
@Form.create()
class memberLevel extends PureComponent {
  state = {
    modalVisible: false,
    selectedRows: [],
    record: {},
    a: []
  };

  /**
   * 初始化数据
   */
  static defaultProps = {
    memberLevel: {
      list: []
    },
  };

  columns = [
    {
      title: '等级名称',
      dataIndex: 'name',
      key: 'name',
    },
    {
      title: '等级编号',
      dataIndex: 'levelNo',
      key: 'levelNo',
    },
    {
      title: '结算费率',
      dataIndex: 'freeRate',
      key: 'freeRate',
      render: val => <Tag color='cyan'>{val}%</Tag>
    },
    {
      title: '结算手续费',
      dataIndex: 'withdrawalRate',
      key: 'withdrawalRate',
      // render: val => <Tag color='blue'>{parseFloat(val) / 100} 元</Tag> 
      render: val => <Tag color='blue'>{val} 元</Tag>
    },
    {
      title: '等级类型',
      dataIndex: 'type',
      key: 'type',
      render: val => val === "member" ? <Tag color='green'>会员</Tag> : <Tag color='red'>代理</Tag>
    },
    {
      title: '升级人数',
      dataIndex: 'developmentNum',
      key: 'developmentNum',
      render: val => <Tag color='purple'>{val}</Tag>
    },
    {
      title: '状态',
      dataIndex: 'status',
      key: 'status',
      render: val => val === 1 ? <Tag color='green'>有效</Tag> : <Tag color='red'>无效</Tag>
    },
    {
      title: '创建时间',
      dataIndex: 'createTime',
      key: 'createTime',
      render: val => val && <span>{moment(val).format('YYYY-MM-DD HH:mm:ss')}</span>
    },
    {
      title: '更新时间',
      dataIndex: 'updateTime',
      key: 'updateTime',
      render: val => val && <span>{moment(val).format('YYYY-MM-DD HH:mm:ss')}</span>
    },
    {
      title: '操作',
      render: (text, record) => (
        <Fragment>
          <a onClick={() => this.handleModalVisible(true, record)}>编辑</a>&nbsp;&nbsp;&nbsp;&nbsp;
        </Fragment>
      ),
    },
  ];



  /**
   * 初始化加载数据
   */
  componentDidMount() {
    const { dispatch } = this.props;
    dispatch({
      type: 'memberLevel/fetch',
      payload: {}
    });
  }

  /**
   * 选择行数据
   */
  handleSelectRows = rows => {
    this.setState({
      selectedRows: rows,
    });
  };

  /**
   * 删除数据
   */
  handleMenuClick = e => {
    const { dispatch } = this.props;
    const { selectedRows } = this.state;
    if (selectedRows.length === 0) return;
    const params = [];
    selectedRows.forEach(item => {
      const data = {
        id: item.id,
        status: e.key
      }
      params.push(data)
    })

    const title = e.key === "1" ? '你确定要设置等级状态有效吗?' : '你确定要设置等级状态无效吗?'

    confirm({
      title,
      onOk() {
        dispatch({
          type: 'memberLevel/remove',
          payload: params,
          callback: () => {
            this.setState({
              selectedRows: [],
            });
          },
        })

      },
      onCancel() { },
    });

  };


  /**
   * 操作弹框
   */
  handleModalVisible = (flag, record) => {
    this.setState({
      modalVisible: !!flag,
      record
    });
  };

  /**
   * 保存类别
   */
  handleAdd = (fields,form) => {
    const { dispatch } = this.props;
    dispatch({
      type: 'memberLevel/add',
      payload: fields,
    }).then((res) => {
      if (res.code === "SUCCESS") {
        form.resetFields();
        this.handleModalVisible();
      }
    });

  };

  render() {
    const {
      dispatch,
      memberLevel,
    } = this.props;
    const memberLevelList = memberLevel.list;
    const { selectedRows, modalVisible, record } = this.state;

    const parentMethods = {
      handleAdd: this.handleAdd,
      handleModalVisible: this.handleModalVisible,
    };


    const menu = (
      <Menu onClick={this.handleMenuClick} selectedKeys={[]}>
        <Menu.Item key="1">设置有效</Menu.Item>
        <Menu.Item key="0">设置无效</Menu.Item>
      </Menu>
    );
    return (
      <PageHeaderWrapper title="会员等级配置">
        <Card bordered={false}>
          <div className={styles.tableList}>
            <div className={styles.tableListOperator}>
              <Button icon="plus" type="primary" onClick={() => this.handleModalVisible(true)}>
                新建
              </Button>
              {selectedRows.length > 0 && (
                <span>
                  <Dropdown overlay={menu}>
                    <Button> 更多操作 <Icon type="down" /></Button>
                  </Dropdown>
                </span>
              )}
            </div>
            <StandardTable
              rowKey='id'
              selectedRows={selectedRows}
              data={memberLevelList}
              columns={this.columns}
              onSelectRow={this.handleSelectRows}
              expandedRowRender={this.expandedRowRender}
              onExpandedRowsChange={this.onExpandedRowsChange}
              expandedRowKeys={this.state.a}
              onExpand={this.fetchDetailsList}
              expandRowByClick
            />
          </div>
        </Card>
        {record && Object.keys(record).length ?
          <CreateForm {...parentMethods} modalVisible={modalVisible} memberLevelList={memberLevelList} values={record} dispatch={dispatch} />
          : null}

        {record && Object.keys(record).length ?
          null
          : <CreateForm {...parentMethods} modalVisible={modalVisible} dispatch={dispatch} />}

      </PageHeaderWrapper>
    );
  }

}

export default memberLevel;