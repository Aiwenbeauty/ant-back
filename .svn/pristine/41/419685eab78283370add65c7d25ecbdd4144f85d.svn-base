import { query as queryGoods, queryGoodsType, addGoods, updateGoods, deleteHideShowGoods } from '@/services/goods';
import { notification } from 'antd';

export default {
  namespace: 'goods',

  state: {
    list: {},
    typeList: []
  },

  effects: {
    *fetch({ payload }, { call, put }) {
      const response = yield call(queryGoods, payload);
      yield put({
        type: 'save',
        payload: response.data,
      });
    },
    *fetchType({ payload }, { call, put }) {
      const response = yield call(queryGoodsType, payload);
      yield put({
        type: 'saveType',
        payload: response,
      });
    },
    *add({ payload }, { call, put }) {
      const response = yield call(addGoods, payload);
      if (response.code === 'SUCCESS') {
        const newFetch = yield call(queryGoods, {
          pageNo: 1,
          pageSize: 10
        });
        yield put({
          type: 'save',
          payload: newFetch.data,
        });
        notification.success({
          message: response.code,
          description: response.msg,
        });
      } else {
        notification.error({
          message: response.code,
          description: response.msg,
        });
      }
      return response;
    },


    *deleteHideShow({ payload }, { call, put }) {
      const response = yield call(deleteHideShowGoods, payload);
      if (response.code === 'SUCCESS') {
        const newFetch = yield call(queryGoods, {
          pageNo: 1,
          pageSize: 10
        });
        yield put({
          type: 'save',
          payload: newFetch.data,
        });
        notification.success({
          message: response.code,
          description: response.msg,
        });
      } else {
        notification.error({
          message: response.code,
          description: response.msg,
        });
      }
    },
    *update({ payload, callback }, { call, put }) {
      const response = yield call(updateGoods, payload);
      if (response.code === 'SUCCESS') {
        const newFetch = yield call(queryGoods, {
          pageNo: 1,
          pageSize: 10
        });
        yield put({
          type: 'save',
          payload: newFetch.data,
        });
        notification.success({
          message: response.code,
          description: response.msg,
        });
      } else {
        notification.error({
          message: response.code,
          description: response.msg,
        });
      }
      if (callback) callback();
    },
    // 商品轮播图片改变
    *mainPicture({ payload, callback }, { put }) {
      yield put({
        type: 'saveMainPicture',
        payload,
      });
      if (callback) callback();
    },
    // 商品详情图片改变
    *detailPicture({ payload, callback }, { put }) {
      yield put({
        type: 'saveDetailPicture',
        payload,
      });
      if (callback) callback();
    }
  },

  reducers: {
    save(state, action) {
      return {
        ...state,
        list: action.payload,
      };
    },
    saveMainPicture(state, action) {
      return {
        ...state,
        mainPicture: action.payload,
      };
    },
    saveDetailPicture(state, action) {
      return {
        ...state,
        detailPicture: action.payload,
      };
    },
    saveType(state, action) {
      return {
        ...state,
        typeList: action.payload,
      };
    },
  },
};
