import React, { Fragment } from 'react';
import { formatMessage, FormattedMessage } from 'umi-plugin-react/locale';
import { Row, Col, Avatar, Badge, Card, Table, Carousel, Alert, Spin, Skeleton, Divider, Form, Input, Button, List, Progress } from 'antd';
import styles from "./test.less";
import moment from "moment";

const dataSource = [{
  key: '1',
  name: '胡彦斌',
  age: 32,
  address: '西湖区湖底公园1号'
}, {
  key: '2',
  name: '胡彦祖',
  age: 42,
  address: '西湖区湖底公园1号'
}];

@Form.create()

class Test extends React.Component {
  constructor(props) {
    super(props)
    this.state = {
      filteredInfo: null,
      sortedInfo: null,
      selectedRows: [],
    }
  }

  handleChange = (pagination, filters, sorter) => {
    console.log(sorter)
    console.log(filters)
    this.setState({
      filteredInfo: filters,
      sortedInfo: sorter,
    });
  }

  onSelectChange = (selectedRowKeys, selectedRows) => {
    console.log('selectedRowKeys changed: ', selectedRowKeys);
    console.log('selectedRows changed: ', selectedRows);
    this.setState({ selectedRows });
  }

  handleSearch = (e) => {
    e.preventDefault();
    this.props.form.validateFields((err,value)=>{
      if(!err){
        console.log(value)
      }
    })
  }

  renderForm = () => {
    const { getFieldDecorator } = this.props.form;
    const FormItem = Form.Item;
    return (
      <Form labelCol={{ span: 8 }} wrapperCol={{ span: 16 }} onSubmit={this.handleSearch}>
        <Col span={8} >
          <FormItem label="筛选姓名">
            {getFieldDecorator('name',
              {
                rules: [{ required: true, message: "请输入姓名！" }]
              }
            )(<Input />)}
          </FormItem>
        </Col>
        <Col span={8} >
          <FormItem label="筛选年龄">
            {getFieldDecorator('age',
              {
                rules: [{ required: true, message: "请输入年龄！" }]
              }
            )(<Input />)}
          </FormItem>
        </Col>
        <Col span={8}>
          <Row type="flex" justify="end">
            <FormItem>
              <Button type='primary' htmlType="submit">搜索</Button>
            </FormItem>
          </Row>
        </Col>
      </Form>
    )
  }

  submit = () => {
    console.log(this.state.selectedRows)
  }

  render() {
    let { sortedInfo, filteredInfo, selectedRowKeys } = this.state;
    sortedInfo = sortedInfo || {};
    filteredInfo = filteredInfo || {};
    const columns = [{
      title: '姓名',
      dataIndex: 'name',
      key: 'name',
    }, {
      title: '年龄',
      dataIndex: 'age',
      key: 'age',
      sorter: (a, b) => a.age - b.age,
      sortOrder: sortedInfo.columnKey === 'age' && sortedInfo.order,
      filtered: true,
      filters: [
        { text: 32, value: 32 },
        { text: 42, value: 42 },
      ],
      onFilter: (value, record) => record.age === value,
      filteredValue: filteredInfo.age || null
    }, {
      title: '住址',
      dataIndex: 'address',
      key: 'address',
    }];

    const rowSelection = {
      // selectedRowKeys,
      onChange: this.onSelectChange,
      // hideDefaultSelections: true,
      // selections: [{
      //   key: 'all-data',
      //   text: 'Select All Data',
      //   onSelect: () => {
      //     this.setState({
      //       selectedRowKeys: ['1'], // 0...45
      //     });
      //   },
      // }, {
      //   key: 'odd',
      //   text: 'Select Odd Row',
      //   onSelect: (changableRowKeys) => {
      //     let newSelectedRowKeys = [];
      //     newSelectedRowKeys = changableRowKeys.filter((key, index) => {
      //       if (index % 2 !== 0) {
      //         return false;
      //       }
      //       return true;
      //     });
      //     this.setState({ selectedRowKeys: newSelectedRowKeys });
      //   },
      // }, {
      //   key: 'even',
      //   text: 'Select Even Row',
      //   onSelect: (changableRowKeys) => {
      //     let newSelectedRowKeys = [];
      //     newSelectedRowKeys = changableRowKeys.filter((key, index) => {
      //       if (index % 2 !== 0) {
      //         return true;
      //       }
      //       return false;
      //     });
      //     this.setState({ selectedRowKeys: newSelectedRowKeys });
      //   },
      // }],
    };
    return (
      <Card>
        <Row>
          {this.renderForm()}
        </Row>
        <Row>
          <Table
            onRow={(record) => {
              return {
                onClick: () => {
                  console.log(record)
                }
              }
            }}
            dataSource={dataSource}
            rowSelection={rowSelection}
            columns={columns}
            onChange={this.handleChange}
            bordered />
        </Row>
        <Row type="flex" justify="end"><Button onClick={this.submit}>提交</Button></Row>
      </Card>
    )
  }
}

export default Test;