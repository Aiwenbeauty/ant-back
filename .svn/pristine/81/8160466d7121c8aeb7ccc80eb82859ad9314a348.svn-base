import React, { Fragment } from 'react';
import { formatMessage, FormattedMessage } from 'umi-plugin-react/locale';
import ReactHTMLTableToExcel from 'react-html-table-to-excel';
import { connect } from 'dva';
import { Row, Col, Card, Table, Modal, Select, DatePicker, Form, Input, Button, Divider,InputNumber } from 'antd';
import DescriptionList from '@/components/DescriptionList';
import PropTypes from 'prop-types';
import moment from "moment";
import styles from "../Log/Log.less";

const { Description } = DescriptionList;
const { Option } = Select;
const { RangePicker } = DatePicker;
@Form.create()
/* eslint react/no-multi-comp:0 */
@connect(({ log, loading }) => ({
  log,
  loading: loading.models.rule,
}))
class RealTime extends React.Component {
  constructor(props) {
    super(props)
    this.state = {
      modalVisible: false,
      currentRecord: null,
      pageSize: 10,
    }
  }

  componentDidMount() {
    const { dispatch } = this.props;
    const { pageSize } = this.state;
    dispatch({
      type: 'log/fetch',
      payload: {
        "currentPage": 1,
        "pageSize": pageSize,
      }
    });
    const table = document.getElementsByTagName('table')[0];
    table.setAttribute('id', 'realtime-trans-table');
  }

  handleSearch = (e) => {
    const { dispatch, form } = this.props;
    const { pageSize } = this.state;
    e.preventDefault();
    form.validateFields((err, fieldsValue) => {
      if (!err) {
        const value = {
          requestURI: fieldsValue.requestURI,
          classMethod: fieldsValue.classMethod,
          method: fieldsValue.method,
          returnType: fieldsValue.returnType,
          startTime: fieldsValue.time[0].format('YYYY-MM-DD 00:00:00'),
          endTime: fieldsValue.time[1].format('YYYY-MM-DD 23:59:59'),
        }
        dispatch({
          type: 'log/fetch',
          payload: {
            ...value,
            "currentPage": 1,
            "pageSize": pageSize,
          }
        });
      }
    })
  }

  handleFormReset = () => {
    const { form, dispatch } = this.props;
    const { pageSize } = this.state;
    form.resetFields();
    dispatch({
      type: 'log/fetch',
      payload: {
        "currentPage": 1,
        "pageSize": pageSize,
      },
    });
  };

  renderForm = () => {
    const { getFieldDecorator } = this.props.form;
    const FormItem = Form.Item;
    return (
      <Form labelCol={{ span: 4, md: 4, lg: 8 }} wrapperCol={{ span: 19, md: 19, lg: 16 }} onSubmit={this.handleSearch}>
        <Row>
          <Col span={24} md={24} lg={8}>
            <FormItem label="商户号">
              {getFieldDecorator('num')(<Input placeholder="请输入" />)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={8}>
            <FormItem label="终端号">
              {getFieldDecorator('name')(<Input placeholder="请输入" />)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={8}>
            <FormItem label="交易日期">
              {getFieldDecorator('date')(
                <RangePicker style={{ width: '100%' }} />
                )}
            </FormItem>
          </Col>
        </Row>
        <Row>
          <Col span={24} md={24} lg={8}>
            <FormItem label="交易类型">
              {getFieldDecorator('status3')(
                <Select placeholder="请选择" style={{ width: '100%' }}>
                  <Option value="0">关闭</Option>
                  <Option value="1">运行中</Option>
                </Select>
                )}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={8}>
            <FormItem label="交易状态">
              {getFieldDecorator('status4')(
                <Select placeholder="请选择" style={{ width: '100%' }}>
                  <Option value="0">关闭</Option>
                  <Option value="1">运行中</Option>
                </Select>
                )}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={8} style={{ display: "flex" }}>
            <FormItem label="交易金额">
              {getFieldDecorator('date')(
                <Input.Group compact>
                  <InputNumber min={1} max={10} defaultValue={0} style={{ width: "40%" }} />
                  <Input
                    style={{ width: "20%", pointerEvents: 'none', backgroundColor: '#fff', textAlign: "center" }}
                    placeholder="~"
                    disabled
                  />
                  <InputNumber min={1} max={10} defaultValue={10000} style={{ width: "40%" }} />
                </Input.Group>
                )}
            </FormItem>

          </Col>
        </Row>
        <Row>
          <Col span={24} md={24} lg={8}>
            <FormItem label="订单号">
              {getFieldDecorator('name')(<Input placeholder="请输入" />)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={8}>
            <FormItem label="系统参考号">
              {getFieldDecorator('number')(<Input style={{ width: '100%' }} />)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={8}>
            <FormItem className={styles.btnContainer}>
              <Button type="primary" htmlType="submit">
                查询
              </Button>
              <Button style={{ marginLeft: 20 }} onClick={this.handleFormReset}>
                重置
              </Button>
            </FormItem>
          </Col>
        </Row>
        
      </Form>
        )
      }
    
      renderCell = (text, width) => (
        <div style={{ width: `${width}`, overflow: "hidden", display: "inline-block", whiteSpace: 'nowrap', textOverflow: "ellipsis" }}>
          {text}
        </div>
        )
      
  handleModalVisible = (flag, record) => {
          this.setState({
            modalVisible: !!flag,
            currentRecord: record,
          });
        };
      
  handlePageChange = (pagination) => {
    const {dispatch} = this.props;
    const {pageSize} = this.state;
    dispatch({
          type: 'log/fetch',
      payload: {
          "currentPage": pagination.current,
        "pageSize": pageSize,
      }
    });
  }

  render() {
    const {log} = this.props;
    const {modalVisible, currentRecord } = this.state;
        const columns = [
      {
        title: '序号',
        dataIndex: 'num1',
        },
      {
        title: '商户号',
        dataIndex: 'num2',
        },
      {
        title: '商户名称',
        dataIndex: 'desc3',
        },
      {
        title: '终端号',
        dataIndex: 'num4',
        },
      {
        title: '交易日期',
        dataIndex: 'date5',
      render: val => <span>{moment(val).format('YYYY-MM-DD HH:MM')}</span>
        },
      {
        title: '交易时间',
        dataIndex: 'date6',
      render: val => <span>{moment(val).format('YYYY-MM-DD HH:MM')}</span>
        },
      {
        title: '交易类型',
        dataIndex: 'desc7'
        },
      {
        title: '交易金额',
        dataIndex: 'num8'
        },
      {
        title: '卡号',
        dataIndex: 'num9'
        },
      {
        title: '交易状态',
        dataIndex: 'desc10'
        },
      {
        title: '系统参考号',
        dataIndex: 'num11'
        },
      {
        title: '电子签购单',
        dataIndex: 'desc12'
        },
      ];
  
      const total = log.list.totalCount;
    const pagination = {
          total
        }

        return (
          <Card>
            <Row>
              {this.renderForm()}
            </Row>
            <Divider />
            <Row>
              <ReactHTMLTableToExcel
                className={`ant-btn ant-btn-primary ${styles.marginBottom}`}
                table="realtime-trans-table"
                filename="实时交易"
                sheet="实时交易"
                buttonText="导出"
              />
              <Table
                className='realTimeTable'
                dataSource={log.list.rows}
                rowKey="id"
                columns={columns}
                pagination={pagination}
                loading={log.loading}
                bordered={false}
                style={{ overflowX: "scroll" }}
                onChange={this.handlePageChange}
              />
            </Row>
            <Modal maskClosable={false}
              destroyOnClose
              title="请求详情"
              visible={modalVisible}
              width={700}
              okText="确定"
              cancelText="取消"
              onCancel={() => this.handleModalVisible()}
              onOk={() => this.handleModalVisible()}
            >
              {currentRecord &&
              <DescriptionList col={1} layout="vertical">
                <Description term="请求时间">{currentRecord.insertTime}</Description>
                <Description term="请求路径">{currentRecord.requestURI}</Description>
                <Description term="查询字符串">{currentRecord.queryString}</Description>
                <Description term="请求方式">{currentRecord.method}</Description>
                <Description term="日志类型">{currentRecord.returnType}</Description>
                <Description term="错误">{currentRecord.error}</Description>
                <Description term="返回信息">{currentRecord.response}</Description>
              </DescriptionList>
            }
            </Modal>
          </Card>
        )
      }
    }
    
RealTime.propTypes = {
          log: PropTypes.object
      };
      
RealTime.defaultProps = {
          log: {
          list: {
          rows: [],
        totalPage: 5
      }
    }
  };
  
export default RealTime;