import React from 'react';
import { connect } from 'dva';
import { Row, Col, Card, Table, Select, DatePicker, Form, Input, Button, Badge, Alert } from 'antd';
// import ExportJsonExcel from 'js-export-excel';
import PageHeaderWrapper from '@/components/PageHeaderWrapper';
import moment from "moment";
import styles from "../Log/Log.less";
import { judgePageAuth } from '@/global.js';

// 用Authorized和localStorage做权限控制
const { Option } = Select;
const { RangePicker } = DatePicker;
const statusMap = ['pink', 'blue', 'green', 'red', 'gold', '#ddd'];
const status = ['创建', '支付中', '支付成功', '交易失败', '交易完成', '交易关闭'];
const settleStatus = ['pink', 'blue', 'green', 'red', 'gold', '#ddd'];
const settleStatusMap = ['已接受', '处理中', '打款成功', '打款失败', '已退款', '已撤销'];
@Form.create()
/* eslint react/no-multi-comp:0 */
@connect(({ outMerchantTrans, financial, memberLevel, loading, menu: { pagePermissions } }) => ({
  outMerchantTrans,
  financial,
  memberLevel,
  pagePermissions,
  loading: loading.models.rule,
}))
class ProfitListMall extends React.Component {
  constructor(props) {
    super(props)
    this.state = {
      pageSize: 10,
      currentPage: 1
    }
  }

  componentDidMount() {
    const { dispatch } = this.props;
    const { pageSize } = this.state;
    //页面权限
    dispatch({
      type: 'menu/fetchButton',
    });
    dispatch({
      type: 'financial/fetchProfitListMall',
      payload: {
        "pageNo": 1,
        "pageSize": pageSize,
      }
    });
    dispatch({
      type: 'memberLevel/fetch',
      payload: {}
    });
    dispatch({
      type: 'financial/fetchProfitMallSum',
      payload: {}
    });
  }


  downloadExcel = () => {
    const { financial, form, dispatch } = this.props;
    form.validateFields((err, fieldsValue) => {
      const endTime = fieldsValue.createTime ? fieldsValue.createTime[0].format('YYYY-MM-DD 00:00:00') : null;
      const startTime = fieldsValue.createTime ? fieldsValue.createTime[1].format('YYYY-MM-DD 23:59:59') : null;
      const values = fieldsValue.createTime ? {
        ...fieldsValue,
        endTime,
        startTime,
      } : {
          ...fieldsValue,
        };
      dispatch({
        type: 'financial/fetchProfitListMall',
        payload: {
          ...values,
        }
      }).then(() => {
        const { financial } = this.props;
        const data = financial.profitMallList ? financial.profitMallList : '';// 表格数据
        const option = {};
        if (data) {
          const dataTable = data.rows.map(item => {
            return {
              '商户编号': item.merchNo,
              '会员名称': item.merchName,
              '手机号': item.merchPhone,
              '所属代理商': item.agentName,
              '订单号': item.orderNo,
              '订单金额': (item.tradeAmount / 1).toFixed(2),
              '交易手续费': (item.rateFee / 1).toFixed(2),
              '结算手续费': (item.withdrawFee / 1).toFixed(2),
              '分润金额': (item.totalProfit / 1).toFixed(2),
              '交易利润': (item.tradeProfit / 1).toFixed(2),
              '结算利润': (item.withdrawProfit / 1).toFixed(2),
              '通道名称': item.channelName,
              '完成时间': moment(item.createTime).format('YYYY-MM-DD HH:mm:ss'),
              '交易成本': item.tradeCost,
              '结算成本': item.withdrawCost,
              '成本费率': item.tradeRate,
              '结算费率': item.withdrawRate,
              '代理费率': item.sonWithdrawRate
            }
          });
          option.fileName = moment(Date.now()).format('YYYYMMDDHHmmss') + 'VCMall分润查询';
          const sheetHeader = ['商户编号', '会员名称', '手机号', '所属代理商', '订单号', '订单金额', '交易手续费',
            '结算手续费', '分润金额', '交易利润', '结算利润', '通道名称', '完成时间', '交易成本', '结算成本', '成本费率', '结算费率', '代理费率'];
          option.datas = [
            {
              sheetData: dataTable,
              sheetName: 'sheet',
              // sheetFilter: ['组织ID', '组织代码', '组织名称'],
              sheetHeader,
            }
          ];
          import('js-export-excel').then((module) => {
            const toExcel = module.default(option)
            // const toExcel = ExportJsonExcel(option);
            toExcel.saveExcel();

          })
        }

      });
    })

    // if (data) {
    //   for (const i in data) {
    //     if (data) {
    //       const obj = {
    //         '组织ID': data[i].id,
    //         '组织代码': data[i].organization_code,
    //         '组织名称': data[i].organization_name,
    //       }
    //       dataTable.push(obj);
    //     }
    //   }
    // }



  }

  // from表单确认事件
  handleSearch = (e) => {
    const { dispatch, form } = this.props;
    const { pageSize } = this.state;
    e.preventDefault();
    form.validateFields((err, fieldsValue) => {
      const endTime = fieldsValue.createTime ? fieldsValue.createTime[0].format('YYYY-MM-DD 00:00:00') : null;
      const startTime = fieldsValue.createTime ? fieldsValue.createTime[1].format('YYYY-MM-DD 23:59:59') : null;
      const values = fieldsValue.createTime ? {
        ...fieldsValue,
        endTime,
        startTime,
      } : {
          ...fieldsValue,
        };
      if (!err) {
        this.setState({
          currentPage: 1,
          formValues: values
        });
        dispatch({
          type: 'financial/fetchProfitListMall',
          payload: {
            ...values,
            "pageNo": 1,
            "pageSize": pageSize,
          }
        });
        dispatch({
          type: 'financialfetchProfitMallSum',
          payload: {
            ...values,
          }
        });
      }
    })
  }

  // 重置
  handleFormReset = () => {
    const { form, dispatch } = this.props;
    const { pageSize } = this.state;
    form.resetFields();
    this.setState({
      formValues: {},
      currentPage: 1
    });
    dispatch({
      type: 'financial/fetchProfitListMall',
      payload: {
        "pageNo": 1,
        "pageSize": pageSize,
      },
    });
  };

  renderForm = () => {
    const { memberLevel, form, pagePermissions } = this.props;
    const { getFieldDecorator } = form;
    const FormItem = Form.Item;
    return (
      <Form labelCol={{ span: 4, md: 4, lg: 8 }} wrapperCol={{ span: 19, md: 19, lg: 16 }} onSubmit={this.handleSearch}>
        <Row>
          <Col span={24} md={24} lg={8}>
            <FormItem label="商户编号">
              {getFieldDecorator('merchNo',
                {
                  rules: []
                }
              )(<Input />)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={8}>
            <FormItem label="会员名称">
              {getFieldDecorator('memberName',
                {
                  rules: []
                }
              )(<Input />)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={8}>
            <FormItem label="所属代理商">
              {getFieldDecorator('agentNameName',
                {
                  rules: []
                }
              )(<Input />)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={8}>
            <FormItem label="手机号">
              {getFieldDecorator('memberPhone',
                {
                  rules: []
                }
              )(<Input />)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={8}>
            <FormItem label="订单号">
              {getFieldDecorator('outOrderNo',
                {
                  rules: []
                }
              )(<Input />)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={8}>
            <FormItem label="完成时间">
              {getFieldDecorator('createTime',
                {
                  rules: []
                }
              )(<RangePicker />)}
            </FormItem>
          </Col>

          <Col span={24}>
            <FormItem className={styles.btnContainer}>
              <Button type="primary" htmlType="submit">
                查询
                  </Button>
              <Button style={{ marginLeft: 20 }} onClick={this.handleFormReset}>
                重置
                  </Button>
              {
                //页面权限
                judgePageAuth("exportProfitListMall", pagePermissions) &&
                (
                  <Button style={{ marginLeft: 20 }} onClick={this.downloadExcel}>导出</Button>
                )
              }
              {/* <Button style={{ marginLeft: 20 }} onClick={this.downloadExcel}>导出</Button> */}
            </FormItem>
          </Col>
        </Row>
      </Form>
    )
  }

  renderCell = (text, width) => (
    <div style={{ width: `${width}`, overflow: "hidden", display: "inline-block", whiteSpace: 'nowrap', textOverflow: "ellipsis" }}>
      {text}
    </div>
  )

  handleModalVisible = (flag, record) => {
    this.setState({
      modalVisible: !!flag,
      currentRecord: record,
    });
  };

  handlePageChange = (pagination) => {
    const { dispatch } = this.props;
    const { pageSize, formValues } = this.state;
    this.setState({
      currentPage: pagination.current,
      pageSize: pagination.pageSize
    });
    dispatch({
      type: 'financial/fetchProfitListMall',
      payload: {
        ...formValues,
        "pageNo": pagination.current,
        "pageSize": pagination.pageSize,
      }
    });
  }

  render() {
    const { outMerchantTrans, financial } = this.props;
    const { currentPage, pageSize } = this.state;
    const columns = [
      {
        title: '商户编号',
        dataIndex: 'merchNo',
        key: 'merchNo',
        fixed: 'left',
        render: (text) => (
          <div style={{ whiteSpace: "noWrap" }}>
            {text}
          </div>
        ),
      },
      {
        title: '会员名称',
        dataIndex: 'memberName',
        key: 'memberName',
        fixed: 'left',
        render: (text) => (
          <div style={{ whiteSpace: "noWrap" }}>
            {text}
          </div>
        ),
      },
      {
        title: '手机号',
        dataIndex: 'memberPhone',
        key: 'memberPhone',
        render: (text) => (
          <div style={{ whiteSpace: "noWrap" }}>
            {text}
          </div>
        ),
      },
      {
        title: '所属代理商',
        dataIndex: 'agentName',
        key: 'agentName',
        render: (text) => (
          <div style={{ whiteSpace: "noWrap" }}>
            {text}
          </div>
        ),
      },
      {
        title: '订单号',
        dataIndex: 'tradeNo',
        key: 'tradeNo',
        width: 150,
      },
      {
        title: '订单金额',
        dataIndex: 'tradeAmount',
        key: 'tradeAmount',
        render: (text) => (
          <div style={{ whiteSpace: "noWrap" }}>
            {(text / 1).toFixed(2)}
          </div>
        ),
      },
      {
        title: '交易手续费',
        dataIndex: 'rateFee',
        key: 'rateFee',
        render: (text) => (
          <div style={{ whiteSpace: "noWrap" }}>
            {(text / 1).toFixed(2)}
          </div>
        ),
      },
      {
        title: '结算手续费',
        dataIndex: 'withdrawFee',
        key: 'withdrawFee',
        render: (text) => (
          <div style={{ whiteSpace: "noWrap" }}>
            {(text / 1).toFixed(2)}
          </div>
        ),
      },
      {
        title: '分润汇总金额',
        dataIndex: 'totalProfit',
        key: 'totalProfit',
        render: (text) => (
          <div style={{ whiteSpace: "noWrap" }}>
            {(text / 1).toFixed(2)}
          </div>
        ),
      },
      {
        title: '交易利润',
        dataIndex: 'tradeProfit',
        key: 'tradeProfit',
        render: (text) => (
          <div style={{ whiteSpace: "noWrap" }}>
            {(text / 1).toFixed(2)}
          </div>
        ),
      },

      {
        title: '结算利润',
        dataIndex: 'withdrawProfit',
        key: 'withdrawProfit',
        render: (text) => (
          <div style={{ whiteSpace: "noWrap" }}>
            {text}
          </div>
        ),
      },
      {
        title: '通道名称',
        dataIndex: 'channelName',
        key: 'channelName',
      },
      {
        title: '完成时间',
        dataIndex: 'tradeTime',
        key: 'tradeTime',
        render: val => val &&
          <div style={{ width: 100 }}>{moment(val).format('YYYY-MM-DD HH:mm:ss')}</div>,
      },
    ];

    const { total } = financial.profitMallList;
    const pagination = {
      current: currentPage,
      pageSize,
      total,
      showTotal: () => "共 " + total + " 条", //显示总条数
      showQuickJumper: true, //显示跳转指定页框
      showSizeChanger: true //显示指定条数
    }
    const { totalTradeProfit, totalWithdrawProfit, totalTradeFee, totalWithdrawFee, totalTradeCount } = financial.profitMallSum;

    return (
      <PageHeaderWrapper title="分润查询">
        <Card>
          <Row>
            {this.renderForm()}
          </Row>
          <Row style={{ marginBottom: 20 }}>
            {/* 改这里 */}
            <Alert message={`收益统计：交易利润￥${(totalTradeProfit / 1).toFixed(2)}, 结算利润￥${(totalWithdrawProfit / 1).toFixed(2)},交易手续费￥${(totalTradeFee / 1).toFixed(2)}, 结算手续费￥${(totalWithdrawFee / 1).toFixed(2)}, 笔数 ${totalTradeCount}。`} type="success" showIcon />
          </Row>
          <Row>
            <Table
              dataSource={financial.profitMallList.rows}
              loading={financial.loading}
              expandedRowRender={record => <p>交易成本:{record.tradeCost}&nbsp;&nbsp;&nbsp;&nbsp;结算成本:{record.withdrawCost}&nbsp;&nbsp;&nbsp;&nbsp;成本费率:{`${record.tradeRate}%`}&nbsp;&nbsp;&nbsp;&nbsp;交易费率:{record.withdrawRate}&nbsp;&nbsp;&nbsp;&nbsp;代理费率:{record.sonWithdrawRate}</p>}
              columns={columns}
              rowKey={(record, index) => index}
              rowClassName="textCenter"
              pagination={pagination}
              bordered={false}
              scroll={{ x: 'max-content' }}
              // style={{ overflowX: "scroll" }}
              onChange={this.handlePageChange}
            />
          </Row>
        </Card>
      </PageHeaderWrapper>
    )
  }
}

export default ProfitListMall;