import React, { PureComponent, Fragment } from 'react';
import { connect } from 'dva';
import moment from 'moment';
import {Card,Form,Input,Icon,Button,Modal,Upload,Radio} from 'antd';
import StandardTable from '@/components/StandardTable';
import PageHeaderWrapper from '@/components/PageHeaderWrapper';
import imgUrl from '@/global';

import styles from './bannerSetting.less';

const FormItem = Form.Item;


function getBase64(file) {
  return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.readAsDataURL(file);
      reader.onload = () => resolve(reader.result);
      reader.onerror = error => reject(error);
  });
}

@Form.create()
class CreateForm extends React.Component {
  // CreateForm 主件 传入
  constructor(props){
    super(props)
    this.state = {
      previewVisible: false,
      previewImage: '',
      fileList: []
    }
  }


  componentDidMount() {
    if(this.props.values){
      const row = this.props.values ? this.props.values : {type:"",url:"",picUrl:""}
      const fileList = [{
        uid: 1,
        name: 'image.png',
        status: 'done',
        url: imgUrl + row.picUrl
      }]
  
      this.setState({
        fileList
    })
    }
    
  }

  /**
   * 图片预览 关闭
   */
  handleCancel = () => this.setState({ previewVisible: false });

  /**
   * 预览图片
   */
  handlePreview = async file => {
    if (!file.url && !file.preview) {
        file.preview = await getBase64(file.originFileObj);
    }

    this.setState({
        previewImage: file.url || file.preview,
        previewVisible: true,
    });
};

/**
 * 更换图片
 */
handleChange = ({ fileList }) => this.setState({ fileList });


  render() {
    const { modalVisible, form, handleAdd, handleModalVisible } = this.props;
    const { previewVisible, previewImage, fileList } = this.state;
    const okHandle = () => {
      form.validateFields((err, fieldsValue) => {
        if (err) return;
        if(this.props.values){ // 编辑
          fieldsValue.id = this.props.values.id;
          fieldsValue.picUrl = fileList[0].url;
        }else{
          fieldsValue.picUrl = fileList[0].response.data.path
        }
        
        form.resetFields();
        const addValue = {
          ...fieldsValue
        }
        handleAdd(addValue);
      });
    };
 
    const uploadButton = (
      <div>
        <Icon type="plus" />
        <div className="ant-upload-text">上传说明图</div>
      </div>
    );
    const token = localStorage.getItem("token");
   
    const row = this.props.values ? this.props.values : {type:"",url:"",picUrl:""}
    const title = this.props.values ? "编辑" :"新建";

    // if(this.props.values){
    //   const data = this.props.values;
    //   this.setState({
    //     fileList: [],
    //   });
    // }
        
  
    return (
      <Modal
        maskClosable={false}
        destroyOnClose
        width={840}
        title={title}
        visible={modalVisible}
        onOk={okHandle}
        onCancel={() => handleModalVisible()}
      >
        <FormItem labelCol={{ span: 5 }} wrapperCol={{ span: 15 }} label="类型">
          {form.getFieldDecorator('type', {
            initialValue: Number(row.type),
            rules: [{ required: true, message: '请选择类型！' }],
          })( <Radio.Group>
            <Radio value={0}>内部链接</Radio>
            <Radio value={1}>外部链接</Radio>
          </Radio.Group>)}
        </FormItem>

        <FormItem labelCol={{ span: 5 }} wrapperCol={{ span: 15 }} label="是否需要登陆">
          {form.getFieldDecorator('isLogin', {
            initialValue: Number(row.isLogin),
            rules: [{ required: true, message: '请选择类型！' }],
          })( <Radio.Group>
            <Radio value={1}>是</Radio>
            <Radio value={0}>否</Radio>
          </Radio.Group>)}
        </FormItem>

        <Form.Item labelCol={{ span: 5 }} wrapperCol={{ span: 15 }} label="url">
          {form.getFieldDecorator('url', {
                          initialValue: row.url,
                          rules: [{ required: true, message: '请输入正确的url!' }],
                      })(
                        <Input type="text" placeholder="请输入正确的url，如：http://www.baidu.com" />
                      )}
        </Form.Item>

        <FormItem labelCol={{ span: 5 }} wrapperCol={{ span: 15 }} label="详情图">
          {form.getFieldDecorator('picUrl', {
            initialValue:row.picUrl,
            rules: [{ required: true, message: '请上传详情图！' }],
          })(
            <div className="clearfix">
              <Upload
                action="/lazy-card/sysUser/uploadUserImg"
                listType="picture-card"
                data={{type:'goodsImg'}}
                fileList={fileList}
                onPreview={this.handlePreview}
                onChange={this.handleChange}
                headers={{
                        Authorization: token
                    }}
              >
                {fileList.length >= 1 ? null : uploadButton}
              </Upload>
              <Modal maskClosable={false} visible={previewVisible} footer={null} onCancel={this.handleCancel}>
                <img alt="example" style={{ width: '100%' }} src={previewImage} />
              </Modal>
            </div>
            )}
        </FormItem>
      </Modal>
    );
  }
}
/**
 * 请求组件 需放在主class 上面
 */
@connect(({ bannerSetting }) => ({
  bannerSetting,
}))
class bannerSetting extends PureComponent {

  state = {
    modalVisible: false,
    updateModalVisible: false,
    selectedRows: [],
    formValues: {},
    record: {},
  };

  /**
   * 初始化数据
   */
  static defaultProps = {
    bannerSetting: {
      list: []
    },
  };


  columns = [
    {
      title: '类型',
      dataIndex: 'type',
      key: 'type',
      render: name => <text>{this.conversionType(name)}</text>
    },

    {
      title: 'URL',
      dataIndex: 'url',
      key: 'url',
    },
    {
      title: '详情',
      dataIndex: 'picUrl',
      key: 'picUrl',
      render: path => <img src={imgUrl + path} style={{ height: "80px", width: "80px" }} />,
    },
    {
      title: '创建时间',
      dataIndex: 'created',
      key: 'created',
      render: val => val && <span>{moment(val).format('YYYY-MM-DD HH:mm:ss')}</span>
    },
    {
      title: '更新时间',
      dataIndex: 'updateTime',
      key: 'updateTime',
      render: val => val && <span>{moment(val).format('YYYY-MM-DD HH:mm:ss')}</span>
    },
    {
      title: '操作',
      render: (text, record) => (
        <Fragment>
          <a onClick={() => this.handleModalVisible(true, record)}>编辑</a>
        </Fragment>
      ),
    },
  ];

  /**
   * 列表格式化类型
   */
   conversionType = value => {
    switch(value){
      case "0":
        return "内部链接";
        break;
      case "1":
      return "外部链接";
        break;
        default:"";
    }
  };

  /**
   * 初始化加载数据
   */
  componentDidMount() {
    const { dispatch } = this.props;
    dispatch({
      type: 'bannerSetting/fetch',
      payload: {}
    });
  }

  /**
   * 选择行数据
   */
  handleSelectRows = rows => {
    this.setState({
      selectedRows: rows,
    });
  };

  /**
   * 删除数据
   */
  handleMenuClick = e => {
    const { dispatch } = this.props;
    const { selectedRows } = this.state;
    if (selectedRows.length === 0) return;
    const selectedRowKeys = selectedRows.map(item => {
      return item.id
    })
    dispatch({
      type: 'bannerSetting/remove',
      payload: selectedRowKeys,
      callback: () => {
        this.setState({
          selectedRows: [],
        });
      },
    });
  };

  /**
   * 操作弹框
   */
  handleModalVisible = (flag,record) => {
    this.setState({
      modalVisible: !!flag,
      record
    });
  };

  /**
   * 保存类别
   */
  handleAdd = fields => {
    const { dispatch } = this.props;
    dispatch({
      type: 'bannerSetting/add',
      payload: fields,
    });

    this.handleModalVisible();
  };


  /**
   * 分页查询动作
   */
  handleStandardTableChange = (pagination, sorter) => {
    const { dispatch } = this.props;
    const { formValues } = this.state;
    const params = {
      currentPage: pagination.current,
      pageSize: pagination.pageSize,
      ...formValues,
    };
    if (sorter.field) {
      params.sorter = `${sorter.field}_${sorter.order}`;
    }
    dispatch({
      type: 'bannerSetting/fetch',
      payload: params,
    });
  };


  render() {
    const {
      bannerSetting,
      dispatch,
    } = this.props;
    const bannerList = bannerSetting.list;
    const { selectedRows, modalVisible, updateModalVisible, record } = this.state;

    const parentMethods = {
      handleAdd: this.handleAdd,
      handleModalVisible: this.handleModalVisible,
    };
    const updateMethods = {
      handleUpdateModalVisible: this.handleUpdateModalVisible,
      handleUpdate: this.handleUpdate,
    };
    return (
      <PageHeaderWrapper title="首页轮播">
        <Card bordered={false}>
          <div className={styles.tableList}>
            <div className={styles.tableListOperator}>
              <Button icon="plus" type="primary" onClick={() => this.handleModalVisible(true)}>
                新建
              </Button>
              {selectedRows.length > 0 && (
                <span>
                  <Button onClick={this.handleMenuClick}>批量删除</Button>
                </span>
              )}
            </div>
            <StandardTable
              rowKey='id'
              selectedRows={selectedRows}
              data={bannerList}
              columns={this.columns}
              onSelectRow={this.handleSelectRows}
              onChange={this.handleStandardTableChange}
            />
          </div>
        </Card>
     
        {record && Object.keys(record).length ?
          <CreateForm {...parentMethods} modalVisible={modalVisible} values={record} dispatch={dispatch} />
        : null
      } 
        {record && Object.keys(record).length ?
         null
        :  <CreateForm {...parentMethods} modalVisible={modalVisible} dispatch={dispatch} />
      } 
     
      </PageHeaderWrapper>
    );
  }

}

export default bannerSetting;
