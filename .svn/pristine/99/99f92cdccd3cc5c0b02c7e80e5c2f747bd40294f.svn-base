import React, { PureComponent } from 'react';
import { connect } from 'dva';
import { message, Popconfirm, notification, Radio, Badge, Divider, Row, Col, Card, Table, Modal, Select, DatePicker, Form, Input, Button, Tag, Icon, Upload, } from 'antd';
import DescriptionList from '@/components/DescriptionList';
import PageHeaderWrapper from '@/components/PageHeaderWrapper';
import OperateTable from '@/components/OperateTable';
import moment from "moment";
// import Authorized from '@/utils/Authorized';
import CryptoJS from 'crypto-js';
import imgUrl from '@/global';
import styles from "./MemberAddressList.less";
import { judgePageAuth } from '@/global.js';

const { Description } = DescriptionList;
const { Option } = Select;
const { confirm } = Modal;
const { RangePicker } = DatePicker;
const Modular = ['代理商管理', '通道配置', '商户管理', '会员管理'];
const operateType = ['新增', '编辑', '删除', '禁用', '启用', '升级代理商', '审核成功', '审核失败'];
const FormItem = Form.Item;

@connect(({ systemSetting }) => ({
  systemSetting
}))
@Form.create()
class UpgradeAgent extends PureComponent {
  static defaultProps = {
    handleSaveOrUpdate: () => { },
    handleSaveOrUpdateModalVisible: () => { },
    values: {},
  };

  componentDidUpdate(prevProps) {
    const { updateModalVisible } = this.props;
    if (!prevProps.updateModalVisible && updateModalVisible) {
      this.getFee();
    }
  }

  // 请求系统配置的提现费率和手续费
  getFee = () => {
    const { form, dispatch } = this.props;
    dispatch({
      type: "systemSetting/fetch",
      payload: {}
    }).then((res) => {
      if (res.code === "SUCCESS") {
        form.setFieldsValue({
          processFee: res.data.processFee,
          withdrawFee: res.data.withdrawFee
        });
      } else { }

    });
  }

  getBankName() {
    const { form, dispatch } = this.props;
    const bankCard = form.getFieldValue("bankCard");
    if (bankCard.length < 16) {
      return;
    }
    dispatch({
      type: "agentinfo/queryBankName",
      payload: bankCard
    }).then((res) => {
      if (res.code === "SUCCESS") {
        form.setFieldsValue({
          subBranch: res.data.bankName
        });
      } else { }
    });
  }

  render() {
    const { updateModalVisible, handleSaveOrUpdateModalVisible, handleSaveOrUpdate, values, form, levelList } = this.props;
    const { getFieldDecorator } = form;
    const { TextArea } = Input;
    let rank = '';
    const okHandle = () => {
      form.validateFields((err, fieldsValue) => {
        if (err) return;
        form.resetFields();
        if (values.id) {
          handleSaveOrUpdate(fieldsValue, values.id);
        }
      });
    };
    return (
      <Modal
        maskClosable={false}
        width={1000}
        bodyStyle={{ padding: '32px 40px 48px' }}
        destroyOnClose
        title="补充代理商信息"
        visible={updateModalVisible}
        onOk={okHandle}
        onCancel={() => handleSaveOrUpdateModalVisible(false, values)}
        afterClose={() => handleSaveOrUpdateModalVisible()}
      >
        <Row gutter={{ md: 8, lg: 24, xl: 48 }}>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="代理商名称">
              {form.getFieldDecorator('agentName', {
                rules: [{ required: true, message: '请输入至多20个字符！', max: 20 }],
                initialValue: values.nickname
              })(<Input placeholder="请输入" disabled />)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="提现税率(%)">
              {form.getFieldDecorator('processFee', {
                rules: [{ required: true, message: '请输入提现税率！' }],
              })(<Input placeholder="请输入" disabled />)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="提现手续费">
              {form.getFieldDecorator('withdrawFee', {
                rules: [{ required: true, message: '请输入提现手续费！' }],
              })(<Input placeholder="请输入" disabled />)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="分润比例">
              {form.getFieldDecorator('profitRate', {
                initialValue: 100,
                rules: [{ required: true, pattern: /^([1-9]\d?(\.\d{1,2})?|0\.\d{1,2}|100)$/, message: '分润比例0-100之间' }],
              })(<Input placeholder="请输入" />)}
            </FormItem>
          </Col>
        </Row>
        <Row gutter={{ md: 8, lg: 24, xl: 48 }}>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="代理商级别">
              {form.getFieldDecorator('agentLevel', {
                rules: [{ required: true }],
              })(
                <Select
                  placeholder="请选择"
                  style={{ width: '100%' }}
                  onSelect={(value) => {
                    // level=''
                    levelList.forEach(item => {
                      if (item.levelNo === value) {
                        rank = item.floorPrice;
                      }
                    });
                    this.props.form.setFieldsValue({
                      settlementPrice: rank,
                    })
                  }}
                >
                  {levelList && levelList.map((item, index) => {
                    return (
                      <Option value={item.levelNo} key={index}>{`${item.name}(${item.freeRate} + ${item.withdrawalRate})`}</Option>
                    )
                  })}
                </Select>)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="提现周期">
              {form.getFieldDecorator('settlementCycle', {
                rules: [],
                initialValue: 'T+0',
              })(<Input placeholder="请输入" disabled />)}
            </FormItem>
          </Col>
        </Row>
        <Row gutter={{ md: 8, lg: 24, xl: 48 }}>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="身份证号">
              {form.getFieldDecorator('cardId', {
                initialValue: values.idCardNo,
                rules: [{ required: true }],
              })(<Input placeholder="请输入" />)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="有效期">
              {getFieldDecorator('time',
                {
                  rules: [],
                  initialValue: [null, null]
                }
              )(<RangePicker />)}
            </FormItem>
          </Col>
        </Row>
        <Row gutter={{ md: 8, lg: 24, xl: 48 }}>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="营业执照">
              {form.getFieldDecorator('businessLicense', {
                initialValue: values.busLicenseNo,
                rules: [],
              })(<Input placeholder="请输入" />)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="有效期">
              {getFieldDecorator('btime',
                {
                  rules: [],
                  initialValue: [null, null]
                }
              )(<RangePicker />)}
            </FormItem>
          </Col>
        </Row>
        <Row gutter={{ md: 8, lg: 24, xl: 48 }}>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="收款银行卡">
              {form.getFieldDecorator('bankCard', {
                initialValue: values.bankNo,
                rules: [{ required: true, message: '请输入收款银行卡', max: 20 }],
              })(<Input placeholder="请输入" onBlur={() => this.getBankName()} />)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="户名">
              {form.getFieldDecorator('householdName', {
                rules: [{ required: true, message: '请输入户名', max: 20 }],
              })(<Input placeholder="请输入" />)}
            </FormItem>
          </Col>
        </Row>
        <Row gutter={{ md: 8, lg: 24, xl: 48 }}>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="银行名称">
              {form.getFieldDecorator('subBranch', {
                initialValue: values.bankName,
                rules: [{ required: true, message: '请输入银行名称！' }],
              })(<Input placeholder="请输入" />)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="支行地址">
              {form.getFieldDecorator('branchAddress', {
                rules: [],
              })(<Input placeholder="请输入" />)}
            </FormItem>
          </Col>

        </Row>
        <Row gutter={{ md: 8, lg: 24, xl: 48 }}>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="银行预留手机号">
              {form.getFieldDecorator('phone', {
                rules: [{ required: true, message: '请输入至多18个字符！', max: 11 }],
                initialValue: values.phone,
              })(<Input placeholder="请输入" />)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="备注">
              {form.getFieldDecorator('remark', {
                rules: [{ message: '请输入至多500个字符！', max: 500 }],
              })(<TextArea placeholder="请输入" />)}
            </FormItem>
          </Col>
        </Row>
      </Modal>

    );
  }
}


// 编辑
@connect(({ member }) => ({
  member
}))
// 查看详情
@Form.create()
class DetailsForm extends React.Component {

  componentDidUpdate(prevProps) {
    const { seeMemberModalVisible, dispatch, values } = this.props;
    // 当模态框打开时请求验证码
    if (!prevProps.seeMemberModalVisible && seeMemberModalVisible) {
      dispatch({
        type: 'member/memberDetalis',
        payload: {
          id: values.id
        },
      });
      this.queryMemberChannelList(values);
    }
  }

  // 获取会员通道列表
  queryMemberChannelList(values) {
    const { dispatch } = this.props;
    dispatch({
      type: 'member/queryMemberChannelList',
      payload: {
        id: values.id
      },
    })
  }

  render() {
    const { seeMemberModalVisible, seeMember, form, member, operate } = this.props;
    const values = member.memberDetalisItem.data
    const operateRecordList = operate.operateRecordList.data.rows;
    const { memberChannelList } = member;
    return (
      <Modal
        maskClosable={false}
        width={1000}
        bodyStyle={{ padding: '32px 40px 48px' }}
        destroyOnClose
        title="会员详情信息"
        visible={seeMemberModalVisible}
        footer={null}
        onCancel={() => seeMember(false, values)}
        afterClose={() => seeMember()}
      >
        <DescriptionList col={3} layout="horizontal" title="会员详情信息">
          <Description term="会员名称">{values.nickname}</Description>
          <Description term="手机号">{values.phone}</Description>
          <Description term="状态">
            {
              values.status === 0 ? "禁用" : "启用"
            }
          </Description>
          <Description term="注册时间">
            {
              values.createTime === null ? "" : moment(values.createTime).format('YYYY-MM-DD HH:mm:ss')
            }
          </Description>
          <Description term="最后登录时间">
            {
              values.loginDate === null ? "" : moment(values.loginDate).format('YYYY-MM-DD HH:mm:ss')
            }
          </Description>
          <Description term="认证时间">
            {
              values.authTime === null || values.authTime === undefined ? "" : moment(values.authTime).format('YYYY-MM-DD HH:mm:ss')
            }
          </Description>
          <Description term="修改时间">
            {
              values.updateTime === null ? "" : moment(values.updateTime).format('YYYY-MM-DD HH:mm:ss')
            }
          </Description>
          <Description term="用户来源类型">
            {
              values.memberType === "member" ? "会员" : "代理"
            }
          </Description>
          <Description term="身份证号码">{values.idCardNo}</Description>
          <Description term="结算卡银行名称">{values.bankName}</Description>
          <Description term="结算卡号">{values.bankNo}</Description>
          <Description term="银行预留手机号">{values.cardPhone}</Description>
          <Description term="所属上级">{values.parentName}</Description>
          <Description term="下级会员数">{values.memberNum == null ? '0' : values.memberNum}</Description>
          <Description term="下级商户数">{values.merchMemberNum == null ? '0' : values.merchMemberNum}</Description>
          <Description term="下级店主数">{values.developmentNum == null ? '0' : values.developmentNum}</Description>
          <Description term="会员等级名称">{values.memberLevelName}</Description>
          <Description term="结算价格">{`${values.freeRate}% ` + `+${values.withdrawRate}`}</Description>

          <Description term="资质审核">
            <Radio.Group defaultValue={values.isAuth} disabled>
              <Radio value="success">成功</Radio>
              <Radio value="failed">失败</Radio>
            </Radio.Group>
          </Description>


          <Divider />
          <Row gutter={{ md: 8, lg: 24, xl: 48 }} style={{ marginBottom: 20 }}>
            <Col span={24} md={24} lg={12}>
              <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="法人身份证正面">
                {values.idCardUrl &&
                  <PicturesWall type="idCardPhoto" Picture={values.idCardUrl} disabled />
                }
                {!values.idCardUrl &&
                  <PicturesWall type="idCardPhoto" disabled />
                }
              </FormItem>
            </Col>
            <Col span={24} md={24} lg={12}>
              <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="法人身份证反面">
                {values.idCardBackUrl &&
                  <PicturesWall type="idCardBackPhoto" Picture={values.idCardBackUrl} disabled />
                }
                {!values.idCardBackUrl &&
                  <PicturesWall type="idCardBackPhoto" disabled />
                }
              </FormItem>
            </Col>
          </Row>

          <Row gutter={{ md: 8, lg: 24, xl: 48 }}>
            <Col span={24} md={24} lg={12}>
              <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="手持身份证">
                {values.idHoldCardUrl &&
                  <PicturesWall type="idCardPhoto" Picture={values.idHoldCardUrl} disabled />
                }
                {!values.idHoldCardUrl &&
                  <PicturesWall type="idCardPhoto" disabled />
                }
              </FormItem>
            </Col>
            <Col span={24} md={24} lg={12}>
              <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="银行卡正面">
                {values.bankUrl &&
                  <PicturesWall type="idCardBackPhoto" Picture={values.bankUrl} disabled />
                }
                {!values.bankUrl &&
                  <PicturesWall type="idCardBackPhoto" disabled />
                }
              </FormItem>
            </Col>
          </Row>
          <Divider />
          <DescriptionList layout="horizontal" title="通道信息" style={{ marginTop: 20 }}>
            <OperateTable
              RecordList={memberChannelList}
              moduleName={Modular}
              operateType="memberChannel"
              showExamine={'modify'}
            />
          </DescriptionList>

        </DescriptionList>

        <DescriptionList layout="horizontal" title="操作记录" style={{ marginTop: 20 }}>
          <OperateTable
            RecordList={operateRecordList}
            moduleName={Modular}
            operateType={operateType}
          />
        </DescriptionList>
      </Modal>

    );
  }
}



// 编辑
@connect(({ member, operate }) => ({
  member, operate
}))
@Form.create()
class ModifyForm extends PureComponent {
  state = {
    inputVisible: false,
    disabledStatus: false,
    showMemberChannelVisible: false,
  };

  static defaultProps = {
    modifyTrade: () => { },
    modifyByIdModalVisible: () => { },
    values: []
  };

  componentDidUpdate(prevProps) {
    const { modifyModalVisible, dispatch } = this.props;
    // 当模态框打开时请求验证码
    if (!prevProps.modifyModalVisible && modifyModalVisible) {
      dispatch({
        type: 'member/levelLists',
        payload: {},
      });

      this.setState({
        disabledStatus: this.props.modifyModalType != "examine",
      })
      if (this.props.values.isAuth == 'success') {
        this.setState({
          showMemberChannelVisible: true,
        });
        this.queryMemberChannelList(this.props.values);

      } else {
        this.setState({
          inputVisible: true,
        });
      }

    }
  }

  // 获取会员通道列表
  queryMemberChannelList(values) {
    const { dispatch } = this.props;
    dispatch({
      type: 'member/queryMemberChannelList',
      payload: {
        id: values.id
      },
    })
  }

  // 操作会员资质审核
  examineIsAuth(fieldsValue, values) {
    const { dispatch, modifyByIdModalVisible } = this.props;
    const { currentPage, pageSize } = this.state;
    dispatch({
      type: 'member/examineIsAuth',
      payload: {
        id: values.id,
        isAuth: fieldsValue.isAuth,
        reason: fieldsValue.reason
      },
    }).then((res) => {
      if (res.code == 'SUCCESS') {
        this.setState({
          disabledStatus: true,
        });
        if (fieldsValue.isAuth == 'success') {
          this.setState({
            showMemberChannelVisible: true,
          });
          this.queryMemberChannelList(values);
        } else { // 审核失败状态  关闭弹框  重新查询列表数据
          modifyByIdModalVisible(false, values, 'modify')
        }
        dispatch({
          type: 'member/fetch',
          payload: {
            "pageNo": currentPage,
            "pageSize": pageSize,
          }
        });
        // dispatch({
        //   type: 'operate/fetch',
        //   payload: {
        //     modularType: "3",
        //     dataId: values.id
        //   },
        // })
      }

    });

  }

  // 审核资质事件
  onChange = e => {
    const inputVisible = e.target.value === 'failed';
    this.setState({
      inputVisible,
      showMemberChannelVisible: false
    });

  };



  render() {
    const { modifyModalVisible, modifyByIdModalVisible, modifyTrade, form, member, operate, values } = this.props;
    console.log("vakues", values)
    const { getFieldDecorator } = this.props.form;
    const { inputVisible, disabledStatus, showMemberChannelVisible } = this.state;
    const operateRecordList = operate.operateRecordList.data.rows;
    const { TextArea } = Input;
    const memberLevelList = member.memberLevelList.data
    const { memberChannelList } = member;
    // 动作为审核时  审核资质的按钮才能编辑

    const okHandle = (saveType) => {
      form.validateFields((err, fieldsValue) => {
        if (err) return;
        // form.resetFields();
        if (values.id) {
          if (saveType == "modify") { // 编辑保存事件
            modifyTrade(fieldsValue, values.id, values);
          } else if (saveType == "examine") { // 资质审核保存事件
            if (fieldsValue.isAuth == 'processing') {
              notification.error({
                message: "FALID",
                description: "资质类型不能为空！",
              });


            } else if (fieldsValue.isAuth == 'failed') {
              if (!fieldsValue.reason) {
                notification.error({
                  message: "FALID",
                  description: "失败原因不能为空",
                });
                return;
              }
              this.examineIsAuth(fieldsValue, values);

            } else if (fieldsValue.isAuth == 'success') {
              fieldsValue.reason = '';
              this.examineIsAuth(fieldsValue, values);
            }

          }

        }
      });
    };


    return (
      <Modal
        maskClosable={false}
        width={1000}
        bodyStyle={{ padding: '32px 40px 48px' }}
        destroyOnClose
        title="会员编辑"
        visible={modifyModalVisible}
        onOk={() => okHandle("modify")}
        onCancel={() => modifyByIdModalVisible(false, values, 'modify')}
        afterClose={() => modifyByIdModalVisible(false, values, 'modify')}
      >
        <Col span={24} md={24} lg={12}>
          <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="用户名">
            {form.getFieldDecorator('username', {
              rules: [],
              initialValue: values.username,
            })(<Input placeholder="请输入" />)}
          </FormItem>
        </Col>
        <Col span={24} md={24} lg={12}>
          <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="名称">
            {form.getFieldDecorator('nickname', {
              rules: [],
              initialValue: values.nickname,
            })(<Input placeholder="请输入" />)}
          </FormItem>
        </Col>

        <Col span={24} md={24} lg={12}>
          <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="会员级别">
            {form.getFieldDecorator('memberLevelId', {
              rules: [{ required: true, message: '会员级别不能为空' }],
              initialValue: values.memberLevelId,
            })(
              <Select
                placeholder="请选择"
                style={{ width: '100%' }}
                onSelect={(value) => {

                }}
              >
                {memberLevelList && memberLevelList.map(item => {
                  return (
                    <Option value={item.id} key={item.name}>{item.name}</Option>
                  )
                })}
              </Select>)}
          </FormItem>
        </Col>

        <Col span={24} md={24} lg={12}>
          <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="手机号">
            {form.getFieldDecorator('phone', {
              rules: [],
              initialValue: values.phone,
            })(<Input placeholder="请输入" />)}
          </FormItem>
        </Col>
        <Col span={24} md={24} lg={12}>
          <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="身份证号码">
            {form.getFieldDecorator('idCardNo', {
              rules: [],
              initialValue: values.idCardNo,
            })(<Input placeholder="请输入" />)}
          </FormItem>
        </Col>
        <Divider />
        <Col span={24} md={24} lg={12}>
          <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="银行预留手机号">
            {form.getFieldDecorator('cardPhone', {
              rules: [],
              initialValue: values.cardPhone,
            })(<Input placeholder="请输入" />)}
          </FormItem>
        </Col>
        <Col span={24} md={24} lg={12}>
          <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="结算卡号">
            {form.getFieldDecorator('bankNo', {
              rules: [],
              initialValue: values.bankNo,
            })(<Input placeholder="请输入" />)}
          </FormItem>
        </Col>
        <Col span={24} md={24} lg={12}>
          <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="银行卡名称">
            {form.getFieldDecorator('bankName', {
              rules: [],
              initialValue: values.bankName,
            })(<Input placeholder="请输入" />)}
          </FormItem>
        </Col>
        <Divider />
        <Row gutter={{ md: 8, lg: 24, xl: 48 }}>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="法人身份证正面">
              <PicturesWall type="idCardPhoto" Picture={values.idCardUrl} disabled />
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="法人身份证反面">
              <PicturesWall type="idCardBackPhoto" Picture={values.idCardBackUrl} disabled />
            </FormItem>
          </Col>
        </Row>

        <Row gutter={{ md: 8, lg: 24, xl: 48 }}>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="手持身份证">
              <PicturesWall type="idCardPhoto" Picture={values.idHoldCardUrl} disabled />
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="银行卡正面">
              <PicturesWall type="idCardBackPhoto" Picture={values.bankUrl} disabled />
            </FormItem>
          </Col>
        </Row>

        <Row gutter={{ md: 8, lg: 24, xl: 48 }}>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="资质审核">
              {form.getFieldDecorator('isAuth', {
                rules: [],
                initialValue: values.isAuth,
              })(

                <Radio.Group onChange={this.onChange} disabled={disabledStatus}>
                  <Radio value="success">成功</Radio>
                  <Radio value="failed">失败</Radio>

                  <Button type="primary" size="small" disabled={disabledStatus} onClick={() => okHandle("examine")}>
                    确认
                  </Button>

                </Radio.Group>

              )}
            </FormItem>
          </Col>
        </Row>

        {inputVisible && <Row gutter={{ md: 8, lg: 24, xl: 48 }}>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="失败原因">
              {form.getFieldDecorator('reason', {
                rules: [],
                initialValue: values.reason,
              })(
                <TextArea placeholder="请输入原因" type="text" disabled={disabledStatus} />
              )}
            </FormItem>
          </Col>
        </Row>}
        {showMemberChannelVisible &&
          <DescriptionList layout="horizontal" title="通道信息" style={{ marginTop: 20 }}>
            <OperateTable
              RecordList={memberChannelList}
              moduleName={Modular}
              operateType="memberChannel"
              showExamine={this.props.modifyModalType}
            />
          </DescriptionList>
        }
        <DescriptionList layout="horizontal" title="操作记录" style={{ marginTop: 20 }}>
          <OperateTable
            RecordList={operateRecordList}
            moduleName={Modular}
            operateType={operateType}
          />
        </DescriptionList>
      </Modal>
    );
  }
}


@connect(({ member, agentinfo, loading }) => ({
  member,
  agentinfo,
  loading: loading.models.rule,
}))

// 邀请记录
@Form.create()
class InviteRecord extends PureComponent {
  static defaultProps = {
    inviteRecord: () => { },
    values: {},
  };

  state = {
    pageSize: 10,
    currentPage: 1,
    formValues: {}
  }

  // 查询
  inviteRecordSearch = (id) => {
    const { form, dispatch } = this.props;
    const { pageSize } = this.state;
    form.validateFields((err, fieldsValue) => {
      if (!err) {
        const value = {
          id,
          username: fieldsValue.username,
          phone: fieldsValue.phone,
          status: fieldsValue.status,
        }
        dispatch({
          type: 'member/invite',
          payload: {
            ...value,
            "pageNo": 1,
            "pageSize": pageSize,
          }
        });
      }
    })
  }

  // 重置
  inviteRecordFormReset = (id) => {
    const { form, dispatch } = this.props;
    const { pageSize } = this.state;
    form.resetFields();
    dispatch({
      type: 'member/invite',
      payload: {
        id,
        "pageNo": 1,
        "pageSize": pageSize,
      },
    });
  }

  handlePageChange = (pagination) => {
    const { dispatch } = this.props;
    const { pageSize, formValues } = this.state;
    this.setState({
      currentPage: pagination.current,
      pageSize: pagination.pageSize
    });
    dispatch({
      type: 'member/invite',
      payload: {
        ...formValues,
        "pageNo": pagination.current,
        "pageSize": pagination.pageSize,
      }
    });
  }

  render() {
    const { inviteRecordModalVisible, inviteRecord, values, form, columnsInvite, inviteList } = this.props;
    const { getFieldDecorator } = form;
    const { currentPage, pageSize } = this.state;

    // const okHandle = () => {
    //   form.validateFields((err, fieldsValue) => {
    //     if (err) return;
    //     form.resetFields();
    //     if (values.id) {
    //       details(fieldsValue, values.id);
    //     }
    //   });
    // };
    const total = inviteList;
    const pagination = {
      current: currentPage,
      pageSize,
      total,
      showTotal: () => `共 ${total} 条`, // 显示总条数
      showQuickJumper: true, // 显示跳转指定页框
      showSizeChanger: true // 显示指定条数
    }

    return (
      <Modal
        maskClosable={false}
        width={1200}
        bodyStyle={{ padding: '32px 40px 48px' }}
        destroyOnClose
        title="邀请记录"
        visible={inviteRecordModalVisible}
        // onOk={okHandle}
        footer={null}
        onCancel={() => inviteRecord(false, values)}
        afterClose={() => inviteRecord()}
      >
        <Form labelCol={{ span: 4, md: 4, lg: 8 }} wrapperCol={{ span: 19, md: 19, lg: 16 }}>
          <Row>
            <Col span={24} md={24} lg={8}>
              <FormItem label="会员名称">
                {getFieldDecorator('username',
                  {
                    rules: []
                  }
                )(<Input />)}
              </FormItem>
            </Col>
            <Col span={24} md={24} lg={8}>
              <FormItem label="手机号">
                {getFieldDecorator('phone',
                  {
                    rules: []
                  }
                )(<Input />)}
              </FormItem>
            </Col>
            <Col span={24} md={24} lg={8}>
              <FormItem label="账号状态">
                {getFieldDecorator('status',
                  {
                    rules: []
                  }
                )(
                  <Select placeholder="请选择" style={{ width: '100%' }}>
                    <Option value={0}>禁用</Option>
                    <Option value={1}>启用</Option>
                  </Select>
                )}
              </FormItem>
            </Col>
            <Col span={24} md={24} lg={8} offset={16}>
              <FormItem className={styles.btnContainer}>
                <Button type="primary" onClick={() => this.inviteRecordSearch(values.id)}>
                  查询
                </Button>
                <Button style={{ marginLeft: 20 }} onClick={() => this.inviteRecordFormReset(values.id)}>
                  重置
                </Button>
              </FormItem>
            </Col>
          </Row>
        </Form>
        <Row>
          <Table
            dataSource={inviteList.rows}
            rowKey="id"
            columns={columnsInvite}
            pagination={pagination}
            loading={inviteList.loading}
            bordered={false}
            style={{ overflowX: "scroll" }}
            onChange={this.handlePageChange}
          // scroll={{ x: 2000}}
          />
        </Row>

      </Modal>
    );
  }


}
// 页面权限
/* eslint react/no-multi-comp:0 */
@connect(({ member, agentinfo, operate, loading, menu: { pagePermissions } }) => ({
  member,
  agentinfo,
  operate,
  pagePermissions,
  loading: loading.models.rule,
}))

@Form.create()
class MemberList extends PureComponent {
  constructor(props) {
    super(props)
    this.state = {
      pageSize: 10,
      currentPage: 1,
      formValues: {},

    }
  }

  componentDidMount() {
    const { dispatch } = this.props;
    const { pageSize } = this.state;
    // 页面权限
    dispatch({
      type: 'menu/fetchButton',
    });
    dispatch({
      type: 'member/fetch',
      payload: {
        "pageNo": 1,
        "pageSize": pageSize,
      }
    });
  }

  // 查询
  handleSearch = (e) => {
    const { dispatch, form } = this.props;
    const { pageSize } = this.state;
    e.preventDefault();
    form.validateFields((err, fieldsValue) => {
      if (!err) {
        const value = {
          username: fieldsValue.username,
          phone: fieldsValue.phone,
          status: fieldsValue.status,
          isAuth: fieldsValue.isAuth
        }
        this.setState({
          currentPage: 1,
          formValues: value
        });
        dispatch({
          type: 'member/fetch',
          payload: {
            ...value,
            "pageNo": 1,
            "pageSize": pageSize,
          }
        });
      }
    })
  }

  // 重置
  handleFormReset = () => {
    const { form, dispatch } = this.props;
    const { pageSize } = this.state;
    form.resetFields();
    this.setState({
      formValues: {},
      currentPage: 1
    });
    dispatch({
      type: 'member/fetch',
      payload: {
        "pageNo": 1,
        "pageSize": pageSize,
      },
    });
  };

  // 升级代理
  handleSaveOrUpdate = (fields, id) => {
    const { dispatch } = this.props;
    dispatch({
      type: 'member/addAgentInfo',
      payload: {
        agentName: fields.agentName,// 代理商名称
        processFee: fields.processFee,// 提现手续费
        profitRate: fields.profitRate,// 分润比例
        withdrawFee: fields.withdrawFee,// 提现手续费
        agentLevel: fields.agentLevel,// 代理商级别
        settlementCycle: fields.settlementCycle,// 提现周期
        cardId: fields.cardId,// 身份证号
        effectiveStart: fields.time[0] != null ? fields.time[0].format('YYYY-MM-DD 00:00:00') : null,
        effectiveEnd: fields.time[1] != null ? fields.time[0].format('YYYY-MM-DD 00:00:00') : null,
        businessLicense: fields.businessLicense,// 营业执照 
        businessStart: fields.btime[0] != null ? fields.btime[0].format('YYYY-MM-DD 00:00:00') : null,
        businessEnd: fields.btime[0] != null ? fields.btime[1].format('YYYY-MM-DD 23:59:59') : null,
        bankCard: fields.bankCard,// 收款银行卡
        householdName: fields.householdName,// 户名
        subBranch: fields.subBranch,// 开户支行
        phone: fields.phone,// 收款银行卡
        remark: fields.remark,// 备注
        branchAddress: fields.branchAddress,// 支行地址
        memberId: id // 会员ID
      },
    });
    this.handleSaveOrUpdateModalVisible();
  };

  // 编辑确定
  modifyTrade = (fields, id, values) => {
    let parameterChange = false;
    if (
      fields.bankName != values.bankName || fields.bankNo != values.bankNo ||
      fields.cardPhone != values.cardPhone || fields.idCardNo != values.idCardNo ||
      fields.memberLevelId != values.memberLevelId || fields.nickname != values.nickname ||
      fields.phone != values.phone || fields.username != values.username
    ) {
      parameterChange = true;
    }
    const { dispatch } = this.props;
    dispatch({
      type: 'member/update',
      payload: {
        id,
        ...fields,
        parameterChange
      }
    });
    this.modifyByIdModalVisible();
  };

  handleEncrypt = beforePwd => {
    const secretKey = 'com.vcpay.foo.key';
    const afterEncrypt = CryptoJS.DES.encrypt(beforePwd, CryptoJS.enc.Utf8.parse(secretKey), {
      mode: CryptoJS.mode.ECB,
      padding: CryptoJS.pad.Pkcs7
    }).toString()
    return afterEncrypt;
  }

  renderForm = () => {
    const { form, pagePermissions } = this.props;
    const { getFieldDecorator } = form;
    return (
      <Form labelCol={{ span: 4, md: 4, lg: 8 }} wrapperCol={{ span: 19, md: 19, lg: 16 }} onSubmit={this.handleSearch}>
        <Row>
          <Col span={24} md={24} lg={8}>
            <FormItem label="会员名称">
              {getFieldDecorator('username',
                {
                  rules: []
                }
              )(<Input />)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={8}>
            <FormItem label="手机号">
              {getFieldDecorator('phone',
                {
                  rules: []
                }
              )(<Input />)}
            </FormItem>
          </Col>
          {
            // 页面权限
            judgePageAuth("findTypeMember", pagePermissions) &&
            <Col span={24} md={24} lg={8}>
              <FormItem label="账号状态">
                {getFieldDecorator('status',
                  {
                    rules: []
                  }
                )(
                  <Select placeholder="请选择" style={{ width: '100%' }}>
                    <Option value=''>全部</Option>
                    <Option value={0}>禁用</Option>
                    <Option value={1}>启用</Option>
                  </Select>
                )}
              </FormItem>
            </Col>

          }
          <Col span={24} md={24} lg={8}>
            <FormItem label="认证状态">
              {getFieldDecorator('isAuth',
                {
                  rules: []
                }
              )(
                <Select placeholder="请选择" style={{ width: '100%' }}>
                  <Option value=''>全部</Option>
                  <Option value='failed'>认证失败</Option>
                  <Option value='success'>认证成功</Option>
                  <Option value='uncertified'>未认证</Option>
                  <Option value='processing'>认证中</Option>
                </Select>
              )}
            </FormItem>
          </Col>

          <Col span={24} md={24} lg={8} offset={16}>
            <FormItem className={styles.btnContainer}>
              <Button type="primary" htmlType="submit">
                查询
              </Button>
              <Button style={{ marginLeft: 20 }} onClick={this.handleFormReset}>
                重置
              </Button>
            </FormItem>
          </Col>
        </Row>
      </Form>
    )
  }

  // 升级代理
  handleSaveOrUpdateModalVisible = (flag, record) => {
    const { dispatch } = this.props;
    this.setState({
      updateModalVisible: !!flag,
      updateFormValues: record || {},
    });
    dispatch({
      type: 'agentinfo/levelA',
    });
  };


  // 设置会员费率
  handleSetMemberRate = (record) => {
    const { dispatch } = this.props;
    const title = '你确定要设置该会员费率吗?'
    confirm({
      title,
      onOk() {
        dispatch({
          type: 'member/seMemberRate',
          payload: record,
          callback: () => {
            this.setState({
              selectedRows: [],
            });
          },
        })

      },
      onCancel() { },
    });
  };

  // 查看
  seeMember = (flag, record) => {
    const { dispatch } = this.props;
    this.setState({
      seeMemberModalVisible: !!flag,
      seeMemberFormValues: record || {},
    });
    if (flag) {
      dispatch({
        type: 'operate/fetch',
        payload: {
          modularType: "3",
          dataId: record.id
        },
      })
    }
  }

  // 审核页面
  modifyByIdModalVisible = (flag, record, type) => {
    const { dispatch } = this.props;
    this.setState({
      modifyModalVisible: !!flag,
      modifyFormValues: record || {},
      modifyModalType: type
    });
    if (flag) {
      dispatch({
        type: 'operate/fetch',
        payload: {
          modularType: "3",
          dataId: record.id
        },
      })
    }
  };

  // 禁用
  prohibit = (flag, record) => {
    const { dispatch } = this.props;
    if (flag) {
      dispatch({
        type: 'member/statusMember',
        payload: {
          id: record.id,
          status: record.status
        }
      }).then(() => {
        message.success('禁用成功');
      });
    }
  }

  // 启用
  enable = (flag, record) => {
    const { dispatch } = this.props;
    if (flag) {
      dispatch({
        type: 'member/statusMember',
        payload: {
          id: record.id,
          status: record.status
        }
      }).then(() => {
        message.success('启动成功');
      });
    }
  }

  // 取消提示
  cancel = (e) => {
    // message.error('Click on No');
  }

  // 邀请模块
  inviteRecord = (flag, record) => {
    const { dispatch } = this.props;
    const { pageSize } = this.state;
    this.setState({
      inviteRecordModalVisible: !!flag,
      inviteRecordFormValues: record || {},
    });
    if (flag) {
      dispatch({
        type: 'member/invite',
        payload: {
          id: record.id,
          "pageNo": 1,
          "pageSize": pageSize,
        }
      });
    }
  };

  // 下级详情
  memberNumDetailsModal = (flag, record, type) => {
    const { dispatch } = this.props;
    this.setState({
      memberNumDetailsModalVisible: !!flag,
      memberNumDetails: record || {},
    });
    if (flag) {
      record.memberType = type
      dispatch({
        type: 'member/queryMemberNum',
        payload: record,
      });

    }
  }

  // 所属上级详情
  parentDetailsModal = (flag, record) => {
    const { dispatch } = this.props;
    this.setState({
      parentDetailsModalVisible: !!flag,
      parentDetails: record || {},
    });
    if (flag) {
      dispatch({
        type: 'member/queryParentDetails',
        payload: record,
      });

    }
  }

  handlePageChange = (pagination, filters, sorter) => {
    const { dispatch } = this.props;
    const { pageSize, formValues } = this.state;
    formValues.timeOrderBy = sorter.columnKey == 'createTime' ? sorter.order == "descend" ? "desc" : "asc" : null;
    formValues.loginTimeOrderBy = sorter.columnKey == 'loginDate' ? sorter.order == "descend" ? "desc" : "asc" : null;
    formValues.isAuthOrderBy = sorter.columnKey == 'isAuth' ? sorter.order == "descend" ? "desc" : "asc" : null;

    this.setState({
      currentPage: pagination.current,
      pageSize: pagination.pageSize
    });
    dispatch({
      type: 'member/fetch',
      payload: {
        ...formValues,
        "pageNo": pagination.current,
        "pageSize": pagination.pageSize,
      }
    });
  }

  render() {
    const { member, operate, pagePermissions } = this.props;
    const { updateModalVisible, updateFormValues, seeMemberModalVisible, seeMemberFormValues,
      modifyModalVisible, modifyFormValues, modifyModalType, inviteRecordModalVisible, inviteRecordFormValues,
      currentPage, pageSize, memberNumDetailsModalVisible, memberNumDetails,
      parentDetailsModalVisible, parentDetails } = this.state;
    const { agentinfo } = this.props;
    const { levelList } = agentinfo;

    const columns = [
      {
        title: '会员名称',
        dataIndex: 'nickname',
        key: 'nickname',
        fixed: 'left',
        render: (item, record) => {
          const nickname = item == null ? record.username : item;
          const nicknames = item == null ? <a onClick={() => this.seeMember(true, record)}> {record.username} </a> : <a onClick={() => this.seeMember(true, record)}> {item} </a>
          return (
            // 页面权限
            judgePageAuth("detailMember", pagePermissions) ? nicknames : nickname
          )
        }
      },
      {
        title: '手机号',
        dataIndex: 'phone',
        key: 'phone',
        fixed: 'left'
      },
      {
        title: '用户来源类型',
        dataIndex: 'memberType',
        key: 'memberType',
        render: item => {
          // 用户来源类型 会员(member) 代理(agent)
          if (item === "member") {
            return "会员"
          } if (item === "agent") {
            return "代理"
          }
          return ""

        }
      },
      {
        title: '会员等级名称',
        dataIndex: 'memberLevelName',
        key: 'memberLevelName',
      },
      {
        title: '所属上级',
        dataIndex: 'parentName',
        key: 'parentName',
        render: (item, record) => {
          return item = <a onClick={() => this.parentDetailsModal(true, record)}> {item} </a>
        }
      },
      {
        title: '下级会员数',
        dataIndex: 'memberNum',
        key: 'memberNum',
        render: (item, record) => {
          return (
            item == null ? '0' : <a onClick={() => this.memberNumDetailsModal(true, record, "member")}> {item} </a>
          )
        }
      },
      {
        title: '下级商户数',
        dataIndex: 'merchMemberNum',
        key: 'merchMemberNum',
        render: (item, record) => {
          return (
            item == null ? '0' : <a onClick={() => this.memberNumDetailsModal(true, record, "merchMember")}> {item} </a>
          )
        }
      },
      {
        title: '下级店主数',
        dataIndex: 'developmentNum',
        key: 'developmentNum',
        render: (item, record) => {
          return (
            item == null ? '0' : <a onClick={() => this.memberNumDetailsModal(true, record, "developmentMember")}> {item} </a>
          )
        }
      },


      {
        title: '账号状态',
        dataIndex: 'status',
        key: 'status',
        render: item => {
          return (
            item === 0 ? "禁用" : "启用"
          )
        }
      },
      {
        title: '最后登录时间',
        dataIndex: 'loginDate',
        key: 'loginDate',
        sorter: true,
        render: item => {
          return (
            item == null ? "" : moment(item).format('YYYY-MM-DD HH:mm:ss')
          )
        }
      },
      {
        title: '创建时间',
        dataIndex: 'createTime',
        key: 'createTime',
        sorter: true,
        render: item => {
          return (
            item == null ? "" : moment(item).format('YYYY-MM-DD HH:mm:ss')
          )
        }
      },
      {
        title: '认证状态',
        dataIndex: 'isAuth',
        key: 'isAuth',
        sorter: true,
        render: item => {
          switch (item) {
            case 'uncertified':
              item = <Tag color='red'>未认证</Tag>
              break;
            case 'success':
              item = <Tag color='green'>已认证</Tag>
              break;
            case 'processing':
              item = <Tag color="orange">认证中</Tag>
              break;
            case 'failed':
              item = <Tag color="orange">认证失败</Tag>
              break;
            default:
              item = ""
          }
          return (

            item
          )
        }
      },
    ];
    // 页面权限  是否展示表格操作列
    judgePageAuth("operateTableMember", pagePermissions) && columns.push({
      title: '操作',
      render: (text, record) => (
        <div style={{ display: 'flex', flexWrap: 'wrap' }}>
          {
            // 页面权限
            judgePageAuth("upgradeMember", pagePermissions) &&
            (record.isAgent !== "0" && record.isAuth === "success" ?
              <a className="marginText" onClick={() => this.handleSaveOrUpdateModalVisible(true, record)}>升级代理</a> : null)
          }
          {
            judgePageAuth("editMember", pagePermissions) &&
            (record.isAuth === "success" ?
              <a className="marginText" onClick={() => this.modifyByIdModalVisible(true, record, 'modify')}>编辑</a> : "")
          }
          {
            judgePageAuth("examineMember", pagePermissions) &&
            (record.isAuth === "uncertified" ?
              "" : <a className="marginText" onClick={() => this.modifyByIdModalVisible(true, record, 'examine')}>审核</a>)
          }
          {
            judgePageAuth("setFeeMember", pagePermissions) &&
              record.isSetrate === "false" ?
              <a className="marginText" onClick={() => this.handleSetMemberRate(record)}>设置费率</a> : ""
          }
          {
            judgePageAuth("openBtnMember", pagePermissions) &&
            (record.status === 0 ?
              <Popconfirm
                title="确定启用吗"
                onConfirm={() => this.enable(true, record)}
                onCancel={() => this.cancel(true, record)}
                okText="确定"
                cancelText="取消"
              >
                <a href="#">启用</a>
              </Popconfirm>
              :
              <Popconfirm
                title="确定禁用吗"
                onConfirm={() => this.prohibit(true, record)}
                onCancel={() => this.cancel(true, record)}
                okText="确定"
                cancelText="取消"
              >
                <a href="#">禁用</a>
              </Popconfirm>)
          }
          {/* </Authorized> */}
          {/* &nbsp;&nbsp;&nbsp;&nbsp;<a onClick={() => this.inviteRecord(true, record)}>邀请记录</a> */}
          {/* <a disabled onClick={() => this.handleSaveOrUpdateModalVisible(true, record)}>注销</a> */}
        </div>
      ),

    })
    const columnsInvite = [
      {
        title: '会员名称',
        dataIndex: 'username',
        key: 'username',
      },
      {
        title: '手机号',
        dataIndex: 'phone',
        key: 'phone',
      },
      {
        title: '用户来源类型',
        dataIndex: 'memberType',
        key: 'memberType',
        render: item => {
          // 用户来源类型 会员(member) 代理(agent)
          if (item === "member") {
            return "会员"
          } if (item === "agent") {
            return "代理"
          }
          return ""

        }
      },
      {
        title: '会员等级名称',
        dataIndex: 'memberLevelName',
        key: 'memberLevelName',
      },
      {
        title: '所属上级',
        dataIndex: 'parentName',
        key: 'parentName',
      },
      {
        title: '下级会员数',
        dataIndex: 'memberNum',
        key: 'memberNum',
        render: item => {
          return (
            item == null ? '0' : item
          )
        }
      },
      {
        title: '下级商户数',
        dataIndex: 'merchMemberNum',
        key: 'merchMemberNum',
        render: item => {
          return (
            item == null ? '0' : item
          )
        }
      },
      {
        title: '下级店主数',
        dataIndex: 'developmentNum',
        key: 'developmentNum',
        render: item => {
          return (
            item == null ? '0' : item
          )
        }
      },
      {
        title: '账号状态',
        dataIndex: 'status',
        key: 'status',
        render: item => {
          const status = item === "0" ? "error" : "processing";
          const statusText = item === "0" ? "禁用" : "启用";
          return (
            <Badge status={status} text={statusText} style={{ minWidth: 80 }} />
          )
        }
      },
      {
        title: '最后登录时间',
        dataIndex: 'loginDate',
        key: 'loginDate',
        render: item => {
          return (
            item == null ? "" : moment(item).format('YYYY-MM-DD HH:mm:ss')
          )
        }
      },
      {
        title: '修改时间',
        dataIndex: 'updateTime',
        key: 'updateTime',
        render: item => {
          return (
            item == null ? "" : moment(item).format('YYYY-MM-DD HH:mm:ss')
          )
        }
      },
      {
        title: '会员状态',
        dataIndex: 'isAgent',
        key: 'isAgent',
        render: item => {
          return (
            item == "0" ? "代理商" : "会员"
          )
        }
      },
    ];


    const { total } = member.list;
    const pagination = {
      current: currentPage,
      pageSize,
      total,
      showTotal: () => `共 ${total} 条`, // 显示总条数
      showQuickJumper: true, // 显示跳转指定页框
      showSizeChanger: true // 显示指定条数
    }
    const inviteList = member.inviteList.data;
    // 下级会员详情
    // const memberNumDetailsList = member.memberNumDetailsList.data;

    const updateMethods = {
      handleSaveOrUpdateModalVisible: this.handleSaveOrUpdateModalVisible,
      handleSaveOrUpdate: this.handleSaveOrUpdate,
    };
    const lookMethods = {
      seeMember: this.seeMember,
    };
    // 邀请记录
    const inviteRecordMethods = {
      inviteRecord: this.inviteRecord,
    };
    // 编辑
    const detailsMethods = {
      modifyByIdModalVisible: this.modifyByIdModalVisible,
      modifyTrade: this.modifyTrade,
      modifyModalType: this.modifyModalType
    };

    // 下级会员详情
    const memberdetailsMethods = {
      memberNumDetailsModal: this.memberNumDetailsModal,
      memberNumDetails: this.memberNumDetails,
    };

    // 上级 代理 会员详情
    const parentDetailsMethods = {
      parentDetailsModal: this.parentDetailsModal,
      parentDetails: this.parentDetails,
    };
    return (
      <PageHeaderWrapper title="">
        <Card>
          <Row>
            {this.renderForm()}
            {/* <Button icon="plus" type="primary" onClick={() => this.handleModalVisible(true)}>
                添加
            </Button> */}
          </Row>
          <Row>
            <Table
              dataSource={member.list.rows}
              rowKey="id"
              columns={columns}
              pagination={pagination}
              loading={member.loading}
              bordered={false}
              onChange={this.handlePageChange}
              scroll={{ x: 'max-content' }}
              rowClassName="textCenter"
            />
          </Row>
        </Card>
        <UpgradeAgent
          {...updateMethods}
          updateModalVisible={updateModalVisible}
          levelList={levelList}
          values={updateFormValues}
        />
        {/* // 查看详情 */}
        <DetailsForm
          {...lookMethods}
          seeMemberModalVisible={seeMemberModalVisible}
          values={seeMemberFormValues}
          member={member}
          operate={operate}
        />
        <InviteRecord
          {...inviteRecordMethods}
          inviteRecordModalVisible={inviteRecordModalVisible}
          values={inviteRecordFormValues}
          columnsInvite={columnsInvite}
          inviteList={inviteList}
        />
        {/* 编辑 */}
        <ModifyForm
          {...detailsMethods}
          modifyModalVisible={modifyModalVisible}
          //   areaList={areaList}
          operate={operate}
          values={modifyFormValues}
          modifyModalType={modifyModalType}
          member={member}
        />

        <MemberNumDetailsForm
          // 方法
          {...memberdetailsMethods}
          // 弹框状态
          memberNumDetailsModalVisible={memberNumDetailsModalVisible}
          member={member}
          values={memberNumDetails}
        />

        <ParentDetailsForm
          // 方法
          {...parentDetailsMethods}
          // 弹框状态
          parentDetailsModalVisible={parentDetailsModalVisible}
          member={member}
          values={parentDetails}
        />
      </PageHeaderWrapper>
    )
  }
}

function getBase64(file) {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.readAsDataURL(file);
    reader.onload = () => resolve(reader.result);
    reader.onerror = error => reject(error);
  });
}
// 图片组件
@connect(({ goods }) => ({
  goods,
}))
class PicturesWall extends React.Component {
  state = {
    previewVisible: false,
    previewImage: '',
    fileList: [],
    current: 90,
    transStyle: ''
  };

  componentDidMount() {
    const { Picture } = this.props;
    if (Picture && Array.isArray(Picture)) {
      const fileList = Picture.map((item, index) => {
        return ({
          uid: index,
          name: 'image.png',
          status: 'done',
          url: imgUrl + item,
        })
      })
      this.setState({
        fileList
      })
    } else if (Picture && !Array.isArray(Picture)) {
      this.setState({
        fileList: [{
          uid: 1,
          name: 'image.png',
          status: 'done',
          url: imgUrl + Picture,
        },]
      })
    }
  }

  handleCancel = () => this.setState({ previewVisible: false });

  handlePreview = async file => {
    if (!file.url && !file.preview) {
      file.preview = await getBase64(file.originFileObj);
    }

    this.setState({
      previewImage: file.url || file.preview,
      previewVisible: true,
    });
  };

  handleChange = ({ fileList }) => {
    const { dispatch, type } = this.props;
    this.setState({
      fileList
    });
  };

  cancelPreview = () => {
    this.setState({
      visible: false,
      previewVisible: false,
      current: 90,
      transStyle: `rotate(${0}deg)`
    });
  }

  translate = () => {
    this.setState({
      current: (this.state.current + 90) % 360,
      transStyle: `rotate(${this.state.current}deg)`
    });
  }

  render() {
    const { previewVisible, previewImage, fileList } = this.state;
    const { disabled } = this.props;
    const uploadButton = (
      <div>
        <Icon type="plus" />
        <div className="ant-upload-text">Upload</div>
      </div>
    );
    const content = (
      <div style={{ textAlign: 'center' }}>
        <Button
          onClick={
            // onClick:()=>{window.open(this.state.previewImage,'_blank')}
            /**
             * window.open此处是可以实现的，但是因为后台存储线上图片的格式更加安全，导致window.open打开的时候就直接下载了。
             * 所以采用下面的方式实现
             */
            () => {
              const str = `<!DOCTYPE html><html><body ><img src=${this.state.previewImage} /></body></html>`;
              const a = window.open("", '_blank')
              a.document.write(str);
            }
          }
        >查看原图
        </Button>
        <span style={{ marginLeft: 6 }}>
          <Button
            onClick={this.translate}
          >
            旋转<Icon type="reload" theme="outlined" />
          </Button>
        </span>
      </div>
    )
    const token = localStorage.getItem("token");
    return (
      <div className="clearfix">
        <Upload
          action="/lazy-card/sysUser/uploadUserImg"
          listType="picture-card"
          data={{ type: 'merchInfo' }}
          fileList={fileList}
          onPreview={this.handlePreview}
          onChange={this.handleChange}
          headers={{
            Authorization: token
          }}
          disabled={disabled}
        >
          {fileList.length >= 1 ? null : uploadButton}
        </Upload>
        <Modal visible={previewVisible} footer={content} onCancel={this.cancelPreview.bind(this)} style={{ marginRight: 10 }}>
          {/* <img alt="example" style={{ width: '100%' }} src={previewImage} /> */}
          <div style={{ marginTop: 20, height: 470, transform: this.state.transStyle, display: 'flex', alignItems: 'center' }}>
            <img
              alt="example"
              style={{ width: '100%', height: '100%' }}
              src={this.state.previewImage}
            />
          </div>
        </Modal>
      </div>
    );
  }
}


/**
 * 下级会员详情
 */
@Form.create()
class MemberNumDetailsForm extends PureComponent {
  static defaultProps = {
    memberNumDetails: () => { },
    // 方法
    memberNumDetailsModal: () => { },
    // 弹窗状态
    memberNumDetailsModalVisible: false,
    values: {},
  };



  render() {
    const { memberNumdetailsMethods, memberNumDetailsModalVisible, member, values, memberNumDetailsModal } = this.props;
    const memberNumDetailsList = member.memberNumDetailsList.data;
    const columns = [
      {
        title: '会员名称',
        dataIndex: 'nickname',
        key: 'nickname',
        render: (item, record) => {
          return (
            item == null ? record.username : item
          )
        }
      },
      {
        title: '手机号',
        dataIndex: 'phone',
        key: 'phone',
      },
      {
        title: '会员等级名称',
        dataIndex: 'memberLevelName',
        key: 'memberLevelName',
      },
      {
        title: '交易费率',
        dataIndex: 'freeRate',
        key: 'freeRate',
        render: item => {
          return (
            item == null ? "" : `${item}%`
          )
        }
      },
      {
        title: '结算手续费',
        dataIndex: 'withdrawRate',
        key: 'withdrawRate',
      },
      {
        title: '账号状态',
        dataIndex: 'status',
        key: 'status',
        render: item => {
          const status = item === "0" ? "error" : "processing";
          const statusText = item === "0" ? "禁用" : "启用";
          return (
            <Badge status={status} text={statusText} />
          )
        }
      },
      {
        title: '最后登录时间',
        dataIndex: 'loginDate',
        key: 'loginDate',
        render: item => {
          return (
            item == null ? "" : moment(item).format('YYYY-MM-DD HH:mm:ss')
          )
        }
      }];

    return (
      <Modal
        maskClosable={false}
        width={1000}
        bodyStyle={{ padding: '32px 40px 48px' }}
        destroyOnClose
        title="下级信息"
        visible={memberNumDetailsModalVisible}
        footer={null}
        onCancel={() => memberNumDetailsModal(false, values, "")}
      >

        <Table
          dataSource={memberNumDetailsList}
          rowKey="id"
          columns={columns}
          bordered={false}
          style={{ overflowX: "scroll" }}
        />
      </Modal>

    );
  }
}

/**
 * 上级 代理 会员详情
 */
@Form.create()
class ParentDetailsForm extends PureComponent {
  static defaultProps = {
    parentDetails: () => { },
    // 方法
    parentDetailsModal: () => { },
    // 弹窗状态
    parentDetailsModalVisible: false,
    values: {},
  };




  render() {
    const { parentDetailsMethods, parentDetailsModalVisible, member, parentDetailsModal } = this.props;
    const item = member.parentMemberDateilsItem.data;
    const okHandle = () => {
    };

    return (
      <Modal
        maskClosable={false}
        width={1000}
        bodyStyle={{ padding: '32px 40px 48px' }}
        destroyOnClose
        title="所属上级详情信息"
        visible={parentDetailsModalVisible}
        onOk={okHandle}
        footer={null}
        onCancel={() => parentDetailsModal(false, item)}
        afterClose={() => parentDetailsModal()}
      >
        <DescriptionList col={3} layout="horizontal" title="所属上级详情信息">
          <Description term="名称">{item.nickname}</Description>
          <Description term="手机号">{item.phone}</Description>
          <Description term="所属上级">{item.parentName}</Description>

          <Description term="等级名称">{item.memberLevelName}</Description>
          <Description term="结算价格">{item.freeRate} % + {item.withdrawRate}</Description>
          <Description term="状态">

            <Badge status={item.status === "0" ? "error" : "processing"} text={item.status === "0" ? "禁用" : "正常"} style={{ minWidth: 80 }} />

          </Description>
          <Description term="创建时间">{item.create}</Description>
          {/* <Description term="交易费率">{item.freeRate} %</Description>
          <Description term="结算手续费">{item.withdrawRate}</Description> */}

        </DescriptionList>
      </Modal>

    );
  }
}


export default MemberList;