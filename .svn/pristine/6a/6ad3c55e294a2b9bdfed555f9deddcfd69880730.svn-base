/* eslint-disable */
import React, { PureComponent, Fragment } from 'react';
import { formatMessage, FormattedMessage } from 'umi-plugin-react/locale';
import { connect } from 'dva';
import { message, Popconfirm, AutoComplete, Radio, Row, Col, Avatar, Badge, Card, Table, Modal, Select, DatePicker, Carousel, Alert, Spin, Skeleton, Divider, Form, Input, Button, List, Progress } from 'antd';
import DescriptionList from '@/components/DescriptionList';
import PageHeaderWrapper from '@/components/PageHeaderWrapper';
import OperateTable from '@/components/OperateTable';
import PropTypes from 'prop-types';
import moment from "moment";
import CryptoJS from 'crypto-js';
import styles from "./Agent.less";
import { judgePageAuth } from '@/global.js';

const { Description } = DescriptionList;
const { Option } = Select;
const { RangePicker } = DatePicker;
const FormItem = Form.Item;
const Modular = ['代理商管理'];
const operateType = ['新增', '编辑', '删除', '禁用', '启用'];
@connect(({ agentinfo, systemSetting }) => ({
  agentinfo,
  systemSetting
}))
@Form.create()
class CreateForm extends React.Component {
  constructor(props) {
    super(props)
  }

  getBankName() {
    const { form, dispatch } = this.props;
    const bankCard = form.getFieldValue("bankCard");
    if (bankCard.length < 16) {
      return;
    }
    dispatch({
      type: "agentinfo/queryBankName",
      payload: bankCard
    }).then((res) => {
      if (res.code === "SUCCESS") {
        form.setFieldsValue({
          subBranch: res.data.bankName
        });
      } else {

      }

    });

  }

  // 请求系统配置的提现费率和手续费
  getFee = () => {
    const { form, dispatch } = this.props;
    dispatch({
      type: "systemSetting/fetch",
      payload: {}
    }).then((res) => {
      if (res.code === "SUCCESS") {
        form.setFieldsValue({
          processFee: res.data.processFee,
          withdrawFee: res.data.withdrawFee
        });
      } else {

      }

    });
  }

  componentDidUpdate(prevProps) {
    const { modalVisible } = this.props;
    if (!prevProps.modalVisible && modalVisible) {
      this.getFee();
    }
  }

  render() {
    const { modalVisible, form, handleAdd, handleModalVisible, levelList } = this.props;
    const { getFieldDecorator } = this.props.form;
    const { TextArea } = Input;
    const InputGroup = Input.Group;
    let rank = '';
    let level = '';
    const okHandle = () => {
      form.validateFields((err, fieldsValue) => {
        if (err) return;
        handleAdd(fieldsValue, form);
      });
    };
    return (
      <Modal maskClosable={false}
        destroyOnClose
        title="添加代理商信息"
        visible={modalVisible}
        onOk={okHandle}
        width={1000}
        onCancel={() => handleModalVisible()}
      >
        <Row gutter={{ md: 8, lg: 24, xl: 48 }} className={styles.headerName}>
          基本信息
        </Row>

        <Row gutter={{ md: 8, lg: 24, xl: 48 }}>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="代理商名称">
              {form.getFieldDecorator('agentName', {
                rules: [{ required: true, message: '请输入至多20个字符！', max: 50 }],
              })(<Input placeholder="请输入" />)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="提现税率(%)">
              {form.getFieldDecorator('processFee', {
                rules: [{ required: true, message: '请输入提现税率！' }],
                // initialValue: '6',
              })(<Input placeholder="请输入" type="number" disabled />)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="提现手续费">
              {form.getFieldDecorator('withdrawFee', {
                rules: [{ required: true, message: '请输入提现手续费！' }],
                // initialValue: '1',
              })(<Input placeholder="请输入" type="number" disabled />)}
            </FormItem>
          </Col>

          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="分润比例(%)">
              {form.getFieldDecorator('profitRate', {
                initialValue: 100,
                rules: [{ required: true, pattern: /^([1-9]\d?(\.\d{1,2})?|0\.\d{1,2}|100)$/, message: '分润比例0-100之间' }],
              })(<Input placeholder="请输入" type="number" />)}
            </FormItem>
          </Col>

        </Row>
        <Row gutter={{ md: 8, lg: 24, xl: 48 }}>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="代理商级别">
              {form.getFieldDecorator('agentLevel', {
                rules: [{ required: true, message: '代理商级别不能为空' }],
              })(
                <Select placeholder="请选择" style={{ width: '100%' }} onSelect={(value) => {
                  // level=''
                  levelList.forEach(item => {
                    if (item.levelNo === value) {
                      rank = item.floorPrice;
                    }
                  });
                  this.props.form.setFieldsValue({
                    settlementPrice: rank,
                  })
                }}>
                  {levelList && levelList.map((item, index) => {
                    return (
                      <Option value={item.levelNo} key={index}>{`${item.name}(${item.freeRate} + ${item.withdrawalRate})`}</Option>
                    )
                  })}
                </Select>)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="提现周期">
              {form.getFieldDecorator('settlementCycle', {
                rules: [],
                initialValue: 'T+0',
              })(<Input placeholder="请输入" disabled />)}
            </FormItem>
          </Col>
        </Row>
        <Row gutter={{ md: 8, lg: 24, xl: 48 }}>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="身份证号">
              {form.getFieldDecorator('cardId', {
                rules: [{ required: true, message: '身份证号不能为空' }],
              })(<Input placeholder="请输入" />)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="有效期">
              {getFieldDecorator('time',
                {
                  rules: [],
                  initialValue: [null, null]
                }
              )(<RangePicker />)}
            </FormItem>
          </Col>
        </Row>
        <Row gutter={{ md: 8, lg: 24, xl: 48 }}>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="营业执照">
              {form.getFieldDecorator('businessLicense', {
                rules: [],
              })(<Input placeholder="请输入" />)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="有效期">
              {getFieldDecorator('btime',
                {
                  rules: [],
                  initialValue: [null, null]
                }
              )(<RangePicker />)}
            </FormItem>
          </Col>
        </Row>
        <Row gutter={{ md: 8, lg: 24, xl: 48 }}>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="收款银行卡">
              {form.getFieldDecorator('bankCard', {
                rules: [{ required: true, message: '请输入至多30个字符！', max: 50 }],
              })(<Input placeholder="请输入" onBlur={() => this.getBankName()} />)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="户名">
              {form.getFieldDecorator('householdName', {
                rules: [{ required: true, message: '请输入至多20个字符！', max: 50 }],
              })(<Input placeholder="请输入" />)}
            </FormItem>
          </Col>
        </Row>
        <Row gutter={{ md: 8, lg: 24, xl: 48 }}>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="银行名称">
              {form.getFieldDecorator('subBranch', {
                rules: [{ required: true, message: '请输入银行名称！' }],
              })(<Input placeholder="请输入" />)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="支行地址">
              {form.getFieldDecorator('branchAddress', {
                rules: [],
              })(<Input placeholder="请输入" />)}
            </FormItem>
          </Col>
        </Row>
        <Row gutter={{ md: 8, lg: 24, xl: 48 }}>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="银行预留手机号">
              {form.getFieldDecorator('phone', {
                rules: [{ required: true, message: '请输入至多18个字符！', max: 11 }],
              })(<Input placeholder="请输入" />)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="备注">
              {form.getFieldDecorator('remark', {
                rules: [],
              })(<TextArea placeholder="请输入" />)}
            </FormItem>
          </Col>
        </Row>

      </Modal>
    );
  }
}

@connect(({ agentinfo, operate }) => ({
  agentinfo, operate
}))
@Form.create()
class UpdateForm extends PureComponent {
  static defaultProps = {
    handleUpdate: () => { },
    handleUpdateModalVisible: () => { },
    values: {},
  };

  getBankName() {
    const { form, dispatch } = this.props;
    const bankCard = form.getFieldValue("bankCard");
    if (bankCard.length < 16) {
      return;
    }
    dispatch({
      type: "agentinfo/queryBankName",
      payload: bankCard
    }).then((res) => {
      if (res.code === "SUCCESS") {
        form.setFieldsValue({
          subBranch: res.data.bankName
        });
      } else {

      }
    });
  }

  render() {
    const { updateModalVisible, handleUpdateModalVisible, handleUpdate, values, form, levelList, operate } = this.props;
    const operateRecordList = operate.operateRecordList.data.rows;
    const { getFieldDecorator } = this.props.form;
    const { TextArea } = Input;
    let rank = '';
    let level = '';
    const InputGroup = Input.Group;
    const okHandle = () => {
      form.validateFields((err, fieldsValue) => {
        if (err) return;
        form.resetFields();
        if (values.id) {
          handleUpdate(fieldsValue, values.id, values.statementId, values);
        }
      });
    };
    return (
      <Modal maskClosable={false}
        width={1000}
        bodyStyle={{ padding: '32px 40px 48px' }}
        destroyOnClose
        title="编辑代理商信息"
        visible={updateModalVisible}
        onOk={okHandle}
        onCancel={() => handleUpdateModalVisible(false, values)}
        afterClose={() => handleUpdateModalVisible()}
      >
        <Row gutter={{ md: 8, lg: 24, xl: 48 }} className={styles.headerName}>
          基本信息
        </Row>

        <Row gutter={{ md: 8, lg: 24, xl: 48 }}>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="代理商名称">
              {form.getFieldDecorator('agentName', {
                rules: [{ required: true, message: '请输入代理商名称！', max: 50 }],
                initialValue: values.agentName
              })(<Input placeholder="请输入" disabled />)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="提现税率(%)">
              {form.getFieldDecorator('processFee', {
                rules: [{ required: true, message: '请输入提现税率！' }],
                initialValue: values.processFee,
              })(<Input placeholder="请输入" type="number" min={0} />)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="提现手续费">
              {form.getFieldDecorator('withdrawFee', {
                rules: [{ required: true, message: '请输入提现手续费！' }],
                initialValue: values.withdrawFee,
              })(<Input placeholder="请输入" type="number" min={0} />)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="分润比例(%)">
              {form.getFieldDecorator('profitRate', {
                rules: [{ required: true, pattern: /^([1-9]\d?(\.\d{1,2})?|0\.\d{1,2}|100)$/, message: '分润比例0-100之间' }],
                initialValue: values.profitRate,
              })(<Input placeholder="请输入" type="number" />)}
            </FormItem>
          </Col>
        </Row>
        <Row gutter={{ md: 8, lg: 24, xl: 48 }}>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="代理商级别">
              {form.getFieldDecorator('agentLevel', {
                rules: [{ required: true, message: "请选择代理商级别" }],
                initialValue: values.levelNo
              })(
                <Select placeholder="请选择" style={{ width: '100%' }} onSelect={(value) => {
                  // level=''
                  levelList.forEach(item => {
                    if (item.levelNo === value) {
                      rank = item.floorPrice;
                    }
                  });
                  this.props.form.setFieldsValue({
                    settlementPrice: rank,
                  })
                }}>
                  {levelList && levelList.map((item, index) => {
                    return (
                      <Option value={item.levelNo} key={index}>{`${item.name}(${item.freeRate} + ${item.withdrawalRate})`}</Option>
                    )
                  })}
                </Select>)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="提现周期">
              {form.getFieldDecorator('settlementCycle', {
                rules: [],
                initialValue: 'T+0',
              })(<Input placeholder="请输入" disabled />)}
            </FormItem>
          </Col>
        </Row>
        <Row gutter={{ md: 8, lg: 24, xl: 48 }}>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="身份证号">
              {form.getFieldDecorator('cardId', {
                rules: [{ required: true, message: '身份证号不能为空' }],
                initialValue: values.cardId
              })(<Input placeholder="请输入" />)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="有效期">
              {getFieldDecorator('time',
                {
                  rules: [],
                  initialValue: [values.effectiveStart != null ? moment(values.effectiveStart, 'YYYY/MM/DD') : null, values.effectiveEnd != null ? moment(values.effectiveEnd, 'YYYY/MM/DD') : null]
                }
              )(<RangePicker />)}
            </FormItem>
          </Col>
        </Row>
        <Row gutter={{ md: 8, lg: 24, xl: 48 }}>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="营业执照">
              {form.getFieldDecorator('businessLicense', {
                rules: [],
                initialValue: values.businessLicense
              })(<Input placeholder="请输入" />)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="有效期">
              {getFieldDecorator('btime',
                {
                  rules: [],
                  initialValue: [values.businessStart != null ? moment(values.businessStart, 'YYYY/MM/DD') : null, values.businessEnd != null ? moment(values.businessEnd, 'YYYY/MM/DD') : null]
                }
              )(<RangePicker />)}
            </FormItem>
          </Col>
        </Row>
        <Row gutter={{ md: 8, lg: 24, xl: 48 }}>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="收款银行卡">
              {form.getFieldDecorator('bankCard', {
                rules: [{ required: true, message: '请输入至多30个字符！', max: 30 }],
                initialValue: values.bankCard
              })(<Input placeholder="请输入" onBlur={() => this.getBankName()} />)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="户名">
              {form.getFieldDecorator('householdName', {
                rules: [{ required: true, message: '请输入至多20个字符！', max: 50 }],
                initialValue: values.householdName
              })(<Input placeholder="请输入" disabled />)}
            </FormItem>
          </Col>
        </Row>
        <Row gutter={{ md: 8, lg: 24, xl: 48 }}>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="银行名称">
              {form.getFieldDecorator('subBranch', {
                rules: [{ required: true, message: '请输入银行名称！' }],
                initialValue: values.subBranch
              })(<Input placeholder="请输入" />)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="支行地址">
              {form.getFieldDecorator('branchAddress', {
                rules: [],
                initialValue: values.branchAddress
              })(<Input placeholder="请输入" />)}
            </FormItem>
          </Col>

        </Row>
        <Row gutter={{ md: 8, lg: 24, xl: 48 }}>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="银行预留手机号">
              {form.getFieldDecorator('phone', {
                rules: [{ required: true, message: '请输入至多18个字符！', max: 11 }],
                initialValue: values.phone
              })(<Input placeholder="请输入" />)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={12}>
            <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label="备注">
              {form.getFieldDecorator('remark', {
                rules: [],
                initialValue: values.remark
              })(<TextArea placeholder="请输入" />)}
            </FormItem>
          </Col>
        </Row>
        <DescriptionList layout="horizontal" title="操作记录" style={{ marginTop: 20 }}>
          <OperateTable
            RecordList={operateRecordList}
            moduleName={Modular}
            operateType={operateType}
          />
        </DescriptionList>
      </Modal>

    );
  }
}


// 查看详情
@Form.create()
@connect(({ agentinfo, loading, operate }) => ({
  agentinfo, operate,
  loading: loading.models.rule,
}))
class DetailsForm extends PureComponent {
  static defaultProps = {
    seeAgent: () => { },
    values: {},
  };

  componentDidUpdate(prevProps) {
    const { seeAgentModalVisible, dispatch, values } = this.props;
    // 当模态框打开时请求验证码
    if (!prevProps.seeAgentModalVisible && seeAgentModalVisible) {
      dispatch({
        type: 'agentinfo/agentDetalis',
        payload: {
          id: values.id
        },
      });
    }
  }

  render() {
    const { seeAgentModalVisible, seeAgent, form, agentinfo, operate } = this.props;
    const operateRecordList = operate.operateRecordList.data.rows;
    const values = agentinfo.agentDetalisItem.data
    const okHandle = () => {
      form.validateFields((err, fieldsValue) => {
        if (err) return;
        form.resetFields();
      });
    };

    return (
      <Modal
        maskClosable={false}
        width={1000}
        bodyStyle={{ padding: '32px 40px 48px' }}
        destroyOnClose
        title="代理商查看详情"
        visible={seeAgentModalVisible}
        onOk={okHandle}
        footer={null}
        onCancel={() => seeAgent(false, values)}
        afterClose={() => seeAgent()}
      >
        <DescriptionList col={3} layout="horizontal" title="代理商查看详情">
          <Description term="代理商名称">{values.agentName}</Description>
          <Description term="邀请码">{values.agentCode}</Description>
          <Description term="提现费率(%)">{values.processFee}</Description>
          <Description term="提现手续费">{values.withdrawFee}</Description>
          <Description term="分润比例(%)">{values.profitRate}</Description>
          <Description term="代理商级别">{values.agentLevel}</Description>
          <Description term="提现周期">{values.settlementCycle}</Description>
          <Description term="身份证号">{values.cardId}</Description>
          <Description term="有效期">
            {values.effectiveStart === null ? "" : moment(values.effectiveStart).format('YYYY-MM-DD')}
            ~
            {values.effectiveEnd === null ? "" : moment(values.effectiveEnd).format('YYYY-MM-DD')}
          </Description>
          <Description term="营业执照">{values.businessLicense}</Description>
          <Description term="有效期">
            {values.businessStart === null ? "" : moment(values.businessStart).format('YYYY-MM-DD')}
            ~
          {values.businessEnd === null ? "" : moment(values.businessEnd).format('YYYY-MM-DD')}
          </Description>
          <Description term="收款银行卡">{values.bankCard}</Description>
          <Description term="户名">{values.householdName}</Description>
          <Description term="银行名称">{values.subBranch}</Description>
          <Description term="支行地址">{values.branchAddress}</Description>
          <Description term="银行预留手机号">{values.phone}</Description>
          <Description term="状态">
            {
              values.status === "1" ? "禁用" : "正常"
            }
          </Description>
          <Description term="备注">{values.remark}</Description>
        </DescriptionList>
        <DescriptionList layout="horizontal" title="操作记录" style={{ marginTop: 20 }}>
          <OperateTable
            RecordList={operateRecordList}
            moduleName={Modular}
            operateType={operateType}
          />
        </DescriptionList>
      </Modal>
    );
  }
}

// 页面权限
/* eslint react/no-multi-comp:0 */
@connect(({ agentinfo, loading, operate, menu: { pagePermissions } }) => ({
  agentinfo,
  operate,
  pagePermissions,
  loading: loading.models.rule,
}))
@Form.create()
class AgentInfo extends PureComponent {
  constructor(props) {
    super(props)
    this.state = {
      modalVisible: false,
      currentRecord: null,
      pageSize: 10,
      currentPage: 1,
      sortedInfo: {},
    }
  }

  componentDidMount() {
    const { dispatch } = this.props;
    const { pageSize } = this.state;
    //页面权限
    dispatch({
      type: 'menu/fetchButton',
    });
    dispatch({
      type: 'agentinfo/fetch',
      payload: {
        "pageNo": 1,
        "pageSize": pageSize,
      }
    });
    console.log(this.props.pagePermissions)
  }

  //from表单确认事件
  handleSearch = (e) => {
    const { dispatch, form } = this.props;
    const { pageSize } = this.state;
    e.preventDefault();
    form.validateFields((err, fieldsValue) => {
      if (!err) {
        let dateStart = null;
        let dateEnd = null;
        if (fieldsValue.time != undefined) {
          dateStart = fieldsValue.time[0].format('YYYY-MM-DD 00:00:00');
          dateEnd = fieldsValue.time[1].format('YYYY-MM-DD 23:59:59');
        }
        const value = {
          agentName: fieldsValue.agentName,
          agentLevel: fieldsValue.agentLevel,
          phone: fieldsValue.phone,
          belongToAgent: fieldsValue.belongToAgent,
          status: fieldsValue.status,
          agentCode: fieldsValue.agentCode,
          dateStart: dateStart,
          dateEnd: dateEnd,
        }
        this.setState({
          currentPage: 1,
          formValues: value
        });
        dispatch({
          type: 'agentinfo/fetch',
          payload: {
            ...value,
            "pageNo": 1,
            "pageSize": pageSize,
          }
        });
      }
    })
  }
  //重置
  handleFormReset = () => {
    const { form, dispatch } = this.props;
    const { pageSize } = this.state;
    form.resetFields();
    this.setState({
      formValues: {},
      currentPage: 1
    });
    dispatch({
      type: 'agentinfo/fetch',
      payload: {
        "pageNo": 1,
        "pageSize": pageSize,
      },
    });
  };
  renderForm = () => {
    const { getFieldDecorator } = this.props.form;
    const FormItem = Form.Item;
    return (
      <Form labelCol={{ span: 4, md: 4, lg: 8 }} wrapperCol={{ span: 19, md: 19, lg: 16 }} onSubmit={this.handleSearch}>
        <Row>
          <Col span={24} md={24} lg={8}>
            <FormItem label="代理商名称">
              {getFieldDecorator('agentName',
                {
                  rules: []
                }
              )(<Input />)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={8}>
            <FormItem label="代理商等级">
              {getFieldDecorator('agentLevel',
                {
                  rules: []

                }
              )(
                <Select>
                  <Option value={null}>全部</Option>
                  <Option value={'7'}>国代</Option>
                  <Option value={'6'}>省代</Option>
                  <Option value={'5'}>市代</Option>
                </Select>
              )}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={8}>
            <FormItem label="手机号码">
              {getFieldDecorator('phone',
                {
                  rules: []
                }
              )(<Input />)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={8}>
            <FormItem label="上级代理商">
              {getFieldDecorator('belongToAgent',
                {
                  rules: []
                }
              )(<Input />)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={8}>
            <FormItem label="状态">
              {getFieldDecorator('status',
                {
                  rules: []
                }
              )(
                <Select>
                  <Option value={null}>全部</Option>
                  <Option value="0">正常</Option>
                  <Option value="1">禁用</Option>
                </Select>
              )}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={8}>
            <FormItem label="邀请码">
              {getFieldDecorator('agentCode',
                {
                  rules: []
                }
              )(<Input />)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={8}>
            <FormItem label="开通时间">
              {getFieldDecorator('time',
                {
                  rules: []
                }
              )(<RangePicker />)}
            </FormItem>
          </Col>
          <Col span={24} md={24} lg={8} offset={16}>
            <FormItem className={styles.btnContainer}>
              <Button type="primary" htmlType="submit">
                查询
              </Button>
              <Button style={{ marginLeft: 20 }} onClick={this.handleFormReset}>
                重置
              </Button>
            </FormItem>
          </Col>
        </Row>
      </Form>
    )
  }

  renderCell = (text, width) => (
    <div style={{ width: `${width}`, overflow: "hidden", display: "inline-block", whiteSpace: 'nowrap', textOverflow: "ellipsis" }}>
      {text}
    </div>
  )

  handleUpdateModalVisible = (flag, record) => {
    const { dispatch } = this.props;
    this.setState({
      updateModalVisible: !!flag,
      updateFormValues: record || {},
    });
    dispatch({
      type: 'agentinfo/levelA',
    });
    if (flag) {
      dispatch({
        type: 'operate/fetch',
        payload: {
          modularType: "0",
          dataId: record.id
        },
      })
    }
  };

  //禁用
  prohibit = (flag, record) => {
    const { dispatch } = this.props;
    if (flag) {
      dispatch({
        type: 'agentinfo/statusAgent',
        payload: record.id
      }).then(() => {
        message.success('禁用成功');
        dispatch({
          type: 'operate/add',
          payload: {
            modularType: "0",//代理商模块
            operateType: "3", //0新增 1 修改 2 删除 3 禁用 4 启用
            dataId: record.id
          },
        });
      });
    }
  }
  //启用
  enable = (flag, record) => {
    const { dispatch } = this.props;
    if (flag) {
      dispatch({
        type: 'agentinfo/enableAgent',
        payload: record.id
      }).then(() => {
        message.success('启用成功');
        dispatch({
          type: 'operate/add',
          payload: {
            modularType: "0",//代理商模块
            operateType: "4", //0新增 1 修改 2 删除 3 禁用 4 启用
            dataId: record.id
          },
        });
      });
    }
  }
  //取消提示
  cancel = (e) => {
    // message.error('Click on No');
  }

  handleModalVisible = (flag, record) => {
    const { dispatch } = this.props;
    this.setState({
      modalVisible: !!flag,
      currentRecord: record,
    });
    dispatch({
      type: 'agentinfo/levelA',
    });
  };

  handleAdd = (fields, form) => {
    const { dispatch } = this.props;
    const EncryptPassword = this.handleEncrypt(fields.password);
    dispatch({
      type: 'agentinfo/add',
      payload: {
        agentName: fields.agentName,//代理商名称
        processFee: fields.processFee,//提现费率
        profitRate: fields.profitRate,//分润比例
        withdrawFee: fields.withdrawFee,//提现手续费
        agentLevel: fields.agentLevel,//代理商级别
        settlementCycle: fields.settlementCycle,//提现周期
        cardId: fields.cardId,//身份证号
        effectiveStart: fields.time[0] != null ? fields.time[0].format('YYYY-MM-DD 00:00:00') : null,
        effectiveEnd: fields.time[1] != null ? fields.time[0].format('YYYY-MM-DD 00:00:00') : null,
        businessLicense: fields.businessLicense,//营业执照 
        businessStart: fields.btime[0] != null ? fields.btime[0].format('YYYY-MM-DD 00:00:00') : null,
        businessEnd: fields.btime[0] != null ? fields.btime[1].format('YYYY-MM-DD 23:59:59') : null,
        bankCard: fields.bankCard,//收款银行卡
        householdName: fields.householdName,//户名
        subBranch: fields.subBranch,//开户支行
        phone: fields.phone,//收款银行卡
        branchAddress: fields.branchAddress,//支行地址
        remark: fields.remark,//备注
      },
    }).then((res) => {
      if (res.code === "SUCCESS") {
        form.resetFields();
        this.handleModalVisible();
      }
    });
  };

  handleUpdate = (fields, encryptionId, statementId, values) => {
    const { dispatch } = this.props;
    let bon = false;
    let effectiveStart = fields.time[0] != null ? fields.time[0].format('YYYY-MM-DD 00:00:00') : null;
    let effectiveEnd = fields.time[1] != null ? fields.time[0].format('YYYY-MM-DD 00:00:00') : null;
    let businessStart = fields.btime[0] != null ? fields.btime[0].format('YYYY-MM-DD 00:00:00') : null;
    let businessEnd = fields.btime[0] != null ? fields.btime[1].format('YYYY-MM-DD 23:59:59') : null;
    if (fields.agentName != values.agentName || fields.processFee != values.processFee || fields.profitRate != values.profitRate ||
      fields.withdrawFee != values.withdrawFee || values.cardId != fields.cardId ||
      fields.agentLevel != values.levelNo || fields.settlementCycle != values.settlementCycle ||
      effectiveStart != values.effectiveStart || effectiveEnd != values.effectiveEnd ||
      fields.businessLicense != values.businessLicense || businessStart != values.businessStart ||
      businessEnd != values.businessEnd || fields.bankCard != values.bankCard || fields.householdName != values.householdName ||
      fields.subBranch != values.subBranch || fields.phone != values.phone ||
      fields.branchAddress != values.branchAddress || fields.remark != values.remark
    ) {
      bon = true;
    }
    dispatch({
      type: 'agentinfo/update',
      payload: {
        notDetail: true,
        encryptionId,
        // ...fields,
        id: encryptionId,
        statementId: statementId,
        agentName: fields.agentName,//代理商名称
        processFee: fields.processFee,//提现费率
        profitRate: fields.profitRate,//分润比例
        withdrawFee: fields.withdrawFee,//提现手续费
        agentLevel: fields.agentLevel,//代理商级别
        settlementCycle: fields.settlementCycle,//提现周期
        cardId: fields.cardId,//身份证号
        effectiveStart: fields.time[0] != null ? fields.time[0].format('YYYY-MM-DD 00:00:00') : null,
        effectiveEnd: fields.time[1] != null ? fields.time[0].format('YYYY-MM-DD 00:00:00') : null,
        businessLicense: fields.businessLicense,//营业执照 
        businessStart: fields.btime[0] != null ? fields.btime[0].format('YYYY-MM-DD 00:00:00') : null,
        businessEnd: fields.btime[0] != null ? fields.btime[1].format('YYYY-MM-DD 23:59:59') : null,
        bankCard: fields.bankCard,//收款银行卡
        householdName: fields.householdName,//户名
        subBranch: fields.subBranch,//开户支行
        phone: fields.phone,//收款银行卡
        branchAddress: fields.branchAddress,//支行地址
        remark: fields.remark,//备注
      },
    });
    if (bon) {
      dispatch({
        type: 'operate/add',
        payload: {
          modularType: "0",
          operateType: "1",
          dataId: encryptionId
        },
      });
    }
    this.handleUpdateModalVisible();
  };


  handleEncrypt = beforePwd => {
    const secretKey = 'com.vcpay.foo.key';
    const afterEncrypt = CryptoJS.DES.encrypt(beforePwd, CryptoJS.enc.Utf8.parse(secretKey), {
      mode: CryptoJS.mode.ECB,
      padding: CryptoJS.pad.Pkcs7
    }).toString()
    return afterEncrypt;
  }

  handlePageChange = (pagination, filters, sorter, extra) => {
    const { dispatch } = this.props;
    const { pageSize, currentPage, formValues, sortedInfo } = this.state;
    // Object.keys(sortedInfo).length  为0 代表排序两次后取消排序
    console.log('params', pagination, filters, sorter, extra);
    // sorter.field 代表点击了排序

    // Object.keys(sortedInfo).length === 0
    this.setState({
      currentPage: pagination.current,
      pageSize: pagination.pageSize,
      // sortedInfo: {},
    });
    // const data = sorter.field ? {
    //   ...formValues,
    //   "pageNo": pagination.current,
    //   "pageSize": pagination.pageSize,
    //   "order":sorter.order
    // }:{
    //   ...formValues,
    //   "pageNo": pagination.current,
    //   "pageSize": pagination.pageSize,
    // };
    dispatch({
      type: 'agentinfo/fetch',
      payload: {
        ...formValues,
        "pageNo": pagination.current,
        "pageSize": pagination.pageSize,
      }
    });

  }

  // 所属上级详情
  parentDetailsModal = (flag, record) => {
    console.log(`详情：${record}`);
    const { dispatch } = this.props;
    this.setState({
      parentDetailsModalVisible: !!flag,
      parentDetails: record || {},
    });
    if (flag) {
      dispatch({
        type: 'agentinfo/queryParentAgentDetails',
        payload: record,
      });

    }
  }


  // 下级代理商 商户 店主详情
  agentNumDetailsModal = (flag, record, type) => {
    console.log(`详情：${record}`, "类型：" + type);
    const { dispatch } = this.props;
    this.setState({
      agentNumDetailsModalVisible: !!flag,
      agentNumDetails: record || {},
    });
    if (flag) {
      record.queryType = type
      dispatch({
        type: 'agentinfo/queryNextDeatils',
        payload: {
          queryType: type,
          id: record.id
        },
      });

    }
  }


  // 查看
  seeAgent = (flag, record) => {
    const { dispatch } = this.props;
    this.setState({
      seeAgentModalVisible: !!flag,
      seeAgentFormValues: record || {},
    });
    if (flag) {
      dispatch({
        type: 'operate/fetch',
        payload: {
          modularType: "0",
          dataId: record.id
        },
      })
    }
  }

  render() {
    // 页面权限
    const { agentinfo, pagePermissions } = this.props;
    const { modalVisible, currentRecord, currentPage, pageSize, pageSizeselectedRows, updateModalVisible, updateFormValues,
      parentDetailsModalVisible, parentDetails, agentNumDetailsModalVisible, agentNumDetails, seeAgentModalVisible, seeAgentFormValues } = this.state;
    let { sortedInfo } = this.state;
    sortedInfo = sortedInfo || {};
    const levelList = agentinfo.levelList;
    const columns = [
      {
        title: '代理商名称',
        dataIndex: 'agentName',
        key: 'agentName',
        render: (item, record) => {
          // 页面权限
          return (
            judgePageAuth("detailAgent", pagePermissions) ?
              <a onClick={() => this.seeAgent(true, record)}> {item} </a> : item
          )
        }
      },
      {
        title: '手机号码',
        dataIndex: 'phone',
        key: 'phone',
      },
      {
        title: '邀请码',
        dataIndex: 'agentCode',
        key: 'agentCode',
      },
      {
        title: '代理商等级',
        dataIndex: 'agentLevel',
        key: 'agentLevel',
        render: (text) => (
          <div style={{ minWidth: 80 }}>
            {text}
          </div>
        ),
      },
      {
        title: '结算价格',
        dataIndex: 'settlementPrice',
        key: 'settlementPrice',
        render: (text, item) => (
          <div style={{ minWidth: 80 }}>
            {text} % + {item.withdrawRate}
          </div>
        ),
      },
      {
        title: '上级代理商',
        dataIndex: 'upperAgent',
        key: 'upperAgent',
        render: (item, record) => {
          return item = item == 'system' ? item : <a onClick={() => this.parentDetailsModal(true, record)} > {item} </a>
        }
      },
      {
        title: '下级代理商数',
        dataIndex: 'lowerAgentNum',
        key: 'lowerAgentNum',
        sorter: (a, b) => a.lowerAgentNum - b.lowerAgentNum,
        // sortOrder: sortedInfo.columnKey === 'lowerAgentNum' && sortedInfo.order,
        render: (item, record) => {
          return (
            item == null ? '0' : <a onClick={() => this.agentNumDetailsModal(true, record, "agent")}> {item} </a>
          )
        }

      },
      {
        title: '下级商户数',
        dataIndex: 'lowerMerchNum',
        key: 'lowerMerchNum',
        render: (item, record) => {
          return (
            item == null ? '0' : <a onClick={() => this.agentNumDetailsModal(true, record, "merch")}> {item} </a>
          )
        }
      },
      {
        title: '下级店主数',
        dataIndex: 'lowerShopkeeperNum',
        key: 'lowerShopkeeperNum',
        render: (item, record) => {
          return (
            item == null ? '0' : <a onClick={() => this.agentNumDetailsModal(true, record, "shopkeeper")}> {item} </a>
          )
        }
      },
      {
        title: '开通时间',
        dataIndex: 'openingDate',
        key: 'openingDate',

      },
      {
        title: '状态',
        dataIndex: 'status',
        key: 'status',
        render: item => {
          const status = item === "1" ? "error" : "processing";
          const statusText = item === "1" ? "禁用" : "正常";
          return (
            <Badge status={status} text={statusText} style={{ minWidth: 80 }} />
          )
        }

      },
      
    ];
    // 页面权限  是否展示表格操作列
    judgePageAuth("operateTableAgent", pagePermissions) && columns.push({
      title: '操作',
      fixed: "right",
      render: (text, record) => (
        <div style={{ width: 100, display: 'flex', flexWrap: 'wrap', justifyContent: 'center' }}>
          {/* 页面权限 */}
          { judgePageAuth("editAgent", pagePermissions) &&
            <a onClick={() => this.handleUpdateModalVisible(true, record)} className="marginText">编辑</a>
          }
          {/* 页面权限 */}
          { judgePageAuth("openBtnAgent", pagePermissions) &&
            (record.status === "1" ?
              <Popconfirm
                title="确定启用吗"
                onConfirm={() => this.enable(true, record)}
                onCancel={() => this.cancel(true, record)}
                okText="确定"
                cancelText="取消"
              >
                <a href="#">启用</a>
              </Popconfirm>
              :
              <Popconfirm
                title="确定禁用吗"
                onConfirm={() => this.prohibit(true, record)}
                onCancel={() => this.cancel(true, record)}
                okText="确定"
                cancelText="取消"
              >
                <a href="#">禁用</a>
              </Popconfirm>)
          }
        </div>
      ),
    },)

    const total = agentinfo.list.total;
    const pagination = {
      current: currentPage,
      pageSize,
      total,
      showTotal: () => "共 " + total + " 条", //显示总条数
      showQuickJumper: true, //显示跳转指定页框
      showSizeChanger: true //显示指定条数
    }
    const parentMethods = {
      handleAdd: this.handleAdd,
      handleModalVisible: this.handleModalVisible,
    };
    const updateMethods = {
      handleUpdateModalVisible: this.handleUpdateModalVisible,
      handleUpdate: this.handleUpdate,
    };

    // 上级 代理详情
    const parentDetailsMethods = {
      parentDetailsModal: this.parentDetailsModal,
      parentDetails: this.parentDetails,
    };


    // 上级 代理详情
    const agentDetailsMethods = {
      agentNumDetailsModal: this.agentNumDetailsModal,
      agentDetails: this.agentNumDetails,
    };

    const lookMethods = {
      seeAgent: this.seeAgent,
    };
    console.log("agentinfo.list.rows", agentinfo.list)
    return (
      <PageHeaderWrapper title="代理商列表">
        <Card>
          <Row>
            {this.renderForm()}
          </Row>
          <Row>
            {/* 页面权限 */}
            {judgePageAuth("addAgent", pagePermissions) &&
              <Button icon="plus" type="primary" onClick={() => this.handleModalVisible(true)}>
                添加
              </Button>}
            <Table
              dataSource={agentinfo.list.rows}
              rowKey="id"
              className="textCenter"
              rowClassName="textCenter"
              columns={columns}
              pagination={pagination}
              loading={agentinfo.loading}
              bordered={false}
              scroll={{ x: 'max-content' }}
              onChange={this.handlePageChange}
            />
          </Row>
        </Card>
        <CreateForm {...parentMethods} modalVisible={modalVisible} levelList={levelList} />
        {updateFormValues && Object.keys(updateFormValues).length ? (
          <UpdateForm
            {...updateMethods}
            updateModalVisible={updateModalVisible}
            values={updateFormValues}
            levelList={levelList}
          />
        ) : null}

        <ParentDetailsForm
          // 方法
          {...parentDetailsMethods}
          // 弹框状态
          parentDetailsModalVisible={parentDetailsModalVisible}
          agentinfo={agentinfo}
          values={parentDetails}
          agentinfo={agentinfo}
        />

        <AgentNumDetailsForm
          // 方法
          {...agentDetailsMethods}
          // 弹框状态
          agentNumDetailsModalVisible={agentNumDetailsModalVisible}
          agentinfo={agentinfo}
          values={agentNumDetails}
        />
        <DetailsForm
          //查看
          {...lookMethods}
          seeAgentModalVisible={seeAgentModalVisible}
          values={seeAgentFormValues}
        />
      </PageHeaderWrapper>
    )
  }
}

/**
 * 上级 代理详情
 */
@Form.create()
class ParentDetailsForm extends PureComponent {
  static defaultProps = {
    parentDetails: () => { },
    // 方法
    parentDetailsModal: () => { },
    // 弹窗状态
    parentDetailsModalVisible: false,
    values: {},
  };




  render() {
    const { parentDetailsMethods, parentDetailsModalVisible, agentinfo, parentDetailsModal } = this.props;
    const item = agentinfo.parentAgentDateilsItem.data;
    const okHandle = () => {
    };

    return (
      <Modal
        maskClosable={false}
        width={1000}
        bodyStyle={{ padding: '32px 40px 48px' }}
        destroyOnClose
        title="所属上级详情信息"
        visible={parentDetailsModalVisible}
        onOk={okHandle}
        footer={null}
        onCancel={() => parentDetailsModal(false, item)}
        afterClose={() => parentDetailsModal()}
      >
        <DescriptionList col={3} layout="horizontal" title="所属上级详情信息">
          <Description term="名称">{item.nickname}</Description>
          <Description term="手机号">{item.phone}</Description>
          <Description term="所属上级">{item.parentName}</Description>
          <Description term="等级名称">{item.memberLevelName}</Description>
          <Description term="结算价格">{item.freeRate} % + {item.withdrawRate}</Description>
          <Description term="状态">

            <Badge status={item.status === "1" ? "error" : "processing"} text={item.status === "1" ? "禁用" : "正常"} style={{ minWidth: 80 }} />

          </Description>
          <Description term="开通时间">{item.create}</Description>
        </DescriptionList>
      </Modal>

    );
  }
}

/**
 * 下级代理 商户 店主详情 页面权限
 */
@connect(({ menu: { pagePermissions } }) => ({
  pagePermissions,
}))
@Form.create()
class AgentNumDetailsForm extends PureComponent {
  static defaultProps = {
    agentNumDetails: () => { },
    // 方法
    agentNumDetailsModal: () => { },
    // 弹窗状态
    agentNumDetailsModalVisible: false,
    values: {},
  };



  render() {
    const { agentNumdetailsMethods, agentNumDetailsModalVisible, agentinfo, values, agentNumDetailsModal,pagePermissions } = this.props;

    const agentNumDetailsList = agentinfo.agentNumDetailsList.data.rows;

    // 页面权限  不建议这样写，定义了两列数据，最好用Array.push方式控制不同数据，如该页面另一个表格
    const columns = judgePageAuth("subDetailDiffAgent", pagePermissions) ?
      [
        {
          title: '名称',
          dataIndex: 'nickname',
          key: 'nickname',
          render: (item, record) => {
            return (
              item == null ? record.username : item
            )
          }
        },
        {
          title: '手机号',
          dataIndex: 'phone',
          key: 'phone',
        },
        {
          title: '等级名称',
          dataIndex: 'memberLevelName',
          key: 'memberLevelName',
        },
        {
          title: '所属上级',
          dataIndex: 'parentName',
          key: 'parentName',
        },
        {
          title: '结算费率',
          dataIndex: 'freeRate',
          key: 'freeRate',
          render: (item, record) => {
            return (
              item == null ? "" : item + "%" + "+" + record.withdrawRate
            )
          }
        },
        {
          title: '账号状态',
          dataIndex: 'status',
          key: 'status',
          render: item => {
            const status = item === "1" ? "error" : "processing";
            const statusText = item === "1" ? "禁用" : "正常";
            return (
              <Badge status={status} text={statusText} />
            )
          }
        },
        {
          title: '开通时间',
          dataIndex: 'create',
          key: 'create'
        }] : [
        {
          title: '名称',
          dataIndex: 'nickname',
          key: 'nickname',
          render: (item, record) => {
            return (
              item == null ? record.username : item
            )
          }
        },
        {
          title: '手机号',
          dataIndex: 'phone',
          key: 'phone',
        },
        {
          title: '等级名称',
          dataIndex: 'memberLevelName',
          key: 'memberLevelName',
        },
        {
          title: '用户来源类型',
          dataIndex: 'memberType',
          key: 'memberType',
          render: item => {
            // 用户来源类型 会员(member) 代理(agent)
            if (item === "member") {
              return "会员"
            } if (item === "agent") {
              return "代理"
            }
            return ""

          }
        },

        {
          title: '所属上级',
          dataIndex: 'parentName',
          key: 'parentName',
        },
        {
          title: '交易费率',
          dataIndex: 'freeRate',
          key: 'freeRate',
          render: item => {
            return (
              item == null ? "" : item + "%"
            )
          }
        },
        {
          title: '结算手续费',
          dataIndex: 'withdrawRate',
          key: 'withdrawRate',
        },
        {
          title: '账号状态',
          dataIndex: 'status',
          key: 'status',
          render: item => {
            const status = item === "0" ? "error" : "processing";
            const statusText = item === "0" ? "禁用" : "正常";
            return (
              <Badge status={status} text={statusText} />
            )
          }
        },
        {
          title: '开通时间',
          dataIndex: 'create',
          key: 'create'
        }];

    return (
      <Modal
        maskClosable={false}
        width={1000}
        bodyStyle={{ padding: '32px 40px 48px' }}
        destroyOnClose
        title="下级信息"
        visible={agentNumDetailsModalVisible}
        footer={null}
        onCancel={() => agentNumDetailsModal(false, values, "")}
      >

        <Table
          dataSource={agentNumDetailsList}
          size="small"
          rowKey="id"
          columns={columns}
          bordered={false}
          style={{ overflowX: "scroll" }}
        />
      </Modal>

    );
  }
}


export default AgentInfo;